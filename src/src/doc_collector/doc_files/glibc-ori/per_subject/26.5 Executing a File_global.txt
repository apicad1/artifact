This section describes the exec family of functions, for executing a file as a process image.  You can use these functions to make a child process execute a new program after it has been forked. 
To see the effects of exec from the point of view of the called program, see Program Basics. 
The functions in this family differ in how you specify the arguments, but otherwise they all do the same thing.  They are declared in the header file unistd.h. 
The size of the argument list and environment list taken together must not be greater than ARG_MAX bytes.  See General Limits.  On GNU/Hurd systems, the size (which compares against ARG_MAX) includes, for each string, the number of characters in the string, plus the size of a char *, plus one, rounded up to a multiple of the size of a char *.  Other systems may have somewhat different rules for counting. 
These functions normally donâ€™t return, since execution of a new program causes the currently executing program to go away completely.  A value of -1 is returned in the event of a failure.  In addition to the usual file name errors (see File Name Errors), the following errno error conditions are defined for these functions: 
If execution of the new file succeeds, it updates the access time field of the file as if the file had been read.  See File Times, for more details about access times of files. 
The point at which the file is closed again is not specified, but is at some point before the process exits or before another process image is executed. 
Executing a new process image completely changes the contents of memory, copying only the argument and environment strings to new locations.  But many other attributes of the process are unchanged: 
  The process ID and the parent process ID.  See Process Creation Concepts.   Session and process group membership.  See Concepts of Job Control.   Real user ID and group ID, and supplementary group IDs.  See Process Persona.   Pending alarms.  See Setting an Alarm.   Current working directory and root directory.  See Working Directory.  On GNU/Hurd systems, the root directory is not copied when executing a setuid program; instead the system default root directory is used for the new program.   File mode creation mask.  See Setting Permissions.   Process signal mask; see Process Signal Mask.   Pending signals; see Blocking Signals.   Elapsed processor time associated with the process; see Processor Time. 
If the set-user-ID and set-group-ID mode bits of the process image file are set, this affects the effective user ID and effective group ID (respectively) of the process.  These concepts are discussed in detail in Process Persona. 
Signals that are set to be ignored in the existing process image are also set to be ignored in the new process image.  All other signals are set to the default action in the new process image.  For more information about signals, see Signal Handling. 
File descriptors open in the existing process image remain open in the new process image, unless they have the FD_CLOEXEC (close-on-exec) flag set.  The files that remain open inherit all attributes of the open file descriptors from the existing process image, including file locks.  File descriptors are discussed in Low-Level I/O. 
Streams, by contrast, cannot survive through exec functions, because they are located in the memory of the process itself.  The new process image has no streams except those it creates afresh.  Each of the streams in the pre-exec process image has a descriptor inside it, and these descriptors do survive through exec (provided that they do not have FD_CLOEXEC set).  The new process image can reconnect these to new streams using fdopen (see Descriptors and Streams). 
