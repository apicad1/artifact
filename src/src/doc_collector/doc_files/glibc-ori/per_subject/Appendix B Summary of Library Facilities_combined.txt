This appendix is a complete list of the facilities declared within the header files supplied with the GNU C Library.  Each entry also lists the standard or other source from which each facility is derived, and tells you where in the manual you can find more information about how to use it. 

>>>>>>>>>>>>>>>>>>>>
- ACCOUNTING
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- AF_FILE
sys/socket.h (GNU):  Address Formats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- AF_INET
sys/socket.h (BSD):  Address Formats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- AF_INET6
sys/socket.h (IPv6 Basic API):  Address Formats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- AF_LOCAL
sys/socket.h (POSIX):  Address Formats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- AF_UNIX
sys/socket.h (BSD):  Address Formats. 
sys/socket.h (Unix98):  Address Formats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- AF_UNSPEC
sys/socket.h (BSD):  Address Formats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ALTWERASE
termios.h (BSD):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ARGP_ERR_UNKNOWN
argp.h (GNU):  Argp Parser Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_BUG_ADDR
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_DOC
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_EXIT_ERR
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_EXIT_OK
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_LONG
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_LONG_ONLY
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_POST_DOC
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_PRE_DOC
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_SEE
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_SHORT_USAGE
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_STD_ERR
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_STD_HELP
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_STD_USAGE
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_HELP_USAGE
argp.h (GNU):  Argp Help Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_IN_ORDER
argp.h (GNU):  Argp Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_ARG
argp.h (GNU):  Argp Special Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_ARGS
argp.h (GNU):  Argp Special Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_END
argp.h (GNU):  Argp Special Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_ERROR
argp.h (GNU):  Argp Special Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_FINI
argp.h (GNU):  Argp Special Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_HELP_ARGS_DOC
argp.h (GNU):  Argp Help Filter Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_HELP_DUP_ARGS_NOTE
argp.h (GNU):  Argp Help Filter Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_HELP_EXTRA
argp.h (GNU):  Argp Help Filter Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_HELP_HEADER
argp.h (GNU):  Argp Help Filter Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_HELP_POST_DOC
argp.h (GNU):  Argp Help Filter Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_HELP_PRE_DOC
argp.h (GNU):  Argp Help Filter Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_INIT
argp.h (GNU):  Argp Special Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_NO_ARGS
argp.h (GNU):  Argp Special Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_KEY_SUCCESS
argp.h (GNU):  Argp Special Keys. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_LONG_ONLY
argp.h (GNU):  Argp Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_NO_ARGS
argp.h (GNU):  Argp Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_NO_ERRS
argp.h (GNU):  Argp Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_NO_EXIT
argp.h (GNU):  Argp Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_NO_HELP
argp.h (GNU):  Argp Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_PARSE_ARGV0
argp.h (GNU):  Argp Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ARGP_SILENT
argp.h (GNU):  Argp Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ARG_MAX
limits.h (POSIX.1):  General Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int BC_BASE_MAX
limits.h (POSIX.2):  Utility Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int BC_DIM_MAX
limits.h (POSIX.2):  Utility Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int BC_SCALE_MAX
limits.h (POSIX.2):  Utility Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int BC_STRING_MAX
limits.h (POSIX.2):  Utility Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- BOOT_TIME
utmp.h (SVID):  Manipulating the Database. 
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t BRKINT
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int BUFSIZ
stdio.h (ISO):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CCTS_OFLOW
termios.h (BSD):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int CHAR_BIT
limits.h (C90):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- CHAR_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- CHAR_MIN
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- CHAR_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int CHILD_MAX
limits.h (POSIX.1):  General Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CIGNORE
termios.h (BSD):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int CLK_TCK
time.h (POSIX.1):  Processor Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CLOCAL
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int CLOCKS_PER_SEC
time.h (ISO):  CPU Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- clockid_t CLOCK_MONOTONIC
time.h (POSIX.1):  Getting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- clockid_t CLOCK_REALTIME
time.h (POSIX.1):  Getting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int COLL_WEIGHTS_MAX
limits.h (POSIX.2):  Utility Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void CPU_CLR (int cpu, cpu_set_t *set)
sched.h (GNU):  CPU Affinity. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int CPU_ISSET (int cpu, const cpu_set_t *set)
sched.h (GNU):  CPU Affinity. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void CPU_SET (int cpu, cpu_set_t *set)
sched.h (GNU):  CPU Affinity. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int CPU_SETSIZE
sched.h (GNU):  CPU Affinity. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void CPU_ZERO (cpu_set_t *set)
sched.h (GNU):  CPU Affinity. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CREAD
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CRTS_IFLOW
termios.h (BSD):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CS5
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CS6
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CS7
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CS8
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CSIZE
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t CSTOPB
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DBL_DIG
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DBL_EPSILON
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DBL_MANT_DIG
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DBL_MAX
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DBL_MAX_10_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DBL_MAX_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DBL_MIN
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DBL_MIN_10_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DBL_MIN_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DEAD_PROCESS
utmp.h (SVID):  Manipulating the Database. 
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DIR
dirent.h (POSIX.1):  Opening a Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- mode_t DTTOIF (int dtype)
dirent.h (BSD):  Directory Entries. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int E2BIG
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EACCES
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EADDRINUSE
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EADDRNOTAVAIL
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EADV
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EAFNOSUPPORT
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EAGAIN
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EALREADY
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EAUTH
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBACKGROUND
errno.h (GNU):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBADE
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBADF
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBADFD
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBADMSG
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBADR
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBADRPC
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBADRQC
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBADSLT
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBFONT
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EBUSY
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ECANCELED
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ECHILD
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ECHO
termios.h (POSIX.1):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ECHOCTL
termios.h (BSD):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ECHOE
termios.h (POSIX.1):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ECHOK
termios.h (POSIX.1):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ECHOKE
termios.h (BSD):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ECHONL
termios.h (POSIX.1):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ECHOPRT
termios.h (BSD):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ECHRNG
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ECOMM
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ECONNABORTED
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ECONNREFUSED
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ECONNRESET
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ED
errno.h (GNU):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EDEADLK
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EDEADLOCK
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EDESTADDRREQ
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EDIED
errno.h (GNU):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EDOM
errno.h (ISO):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EDOTDOT
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EDQUOT
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EEXIST
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EFAULT
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EFBIG
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EFTYPE
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EGRATUITOUS
errno.h (GNU):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EGREGIOUS
errno.h (GNU):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EHOSTDOWN
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EHOSTUNREACH
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EHWPOISON
errno.h (Linux):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EIDRM
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EIEIO
errno.h (GNU):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EILSEQ
errno.h (ISO):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EINPROGRESS
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EINTR
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EINVAL
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EIO
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EISCONN
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EISDIR
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EISNAM
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EKEYEXPIRED
errno.h (Linux):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EKEYREJECTED
errno.h (Linux):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EKEYREVOKED
errno.h (Linux):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EL2HLT
errno.h (Obsolete):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EL2NSYNC
errno.h (Obsolete):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EL3HLT
errno.h (Obsolete):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EL3RST
errno.h (Obsolete):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ELIBACC
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ELIBBAD
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ELIBEXEC
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ELIBMAX
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ELIBSCN
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ELNRNG
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ELOOP
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EMEDIUMTYPE
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EMFILE
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EMLINK
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- EMPTY
utmp.h (SVID):  Manipulating the Database. 
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EMSGSIZE
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EMULTIHOP
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENAMETOOLONG
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENAVAIL
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENEEDAUTH
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENETDOWN
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENETRESET
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENETUNREACH
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENFILE
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOANO
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOBUFS
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOCSI
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENODATA
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENODEV
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOENT
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOEXEC
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOKEY
errno.h (Linux):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOLCK
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOLINK
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOMEDIUM
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOMEM
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOMSG
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENONET
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOPKG
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOPROTOOPT
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOSPC
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOSR
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOSTR
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOSYS
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTBLK
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTCONN
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTDIR
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTEMPTY
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTNAM
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTRECOVERABLE
errno.h (GNU):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTSOCK
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTSUP
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTTY
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENOTUNIQ
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ENXIO
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EOF
stdio.h (ISO):  EOF and Errors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EOPNOTSUPP
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EOVERFLOW
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EOWNERDEAD
errno.h (GNU):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPERM
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPFNOSUPPORT
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPIPE
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPROCLIM
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPROCUNAVAIL
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPROGMISMATCH
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPROGUNAVAIL
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPROTO
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPROTONOSUPPORT
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EPROTOTYPE
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EQUIV_CLASS_MAX
limits.h (POSIX.2):  Utility Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ERANGE
errno.h (ISO):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EREMCHG
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EREMOTE
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EREMOTEIO
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ERESTART
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ERFKILL
errno.h (Linux):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EROFS
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ERPCMISMATCH
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ESHUTDOWN
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ESOCKTNOSUPPORT
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ESPIPE
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ESRCH
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ESRMNT
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ESTALE
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ESTRPIPE
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ETIME
errno.h (XOPEN):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ETIMEDOUT
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ETOOMANYREFS
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ETXTBSY
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EUCLEAN
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EUNATCH
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EUSERS
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EWOULDBLOCK
errno.h (BSD):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EXDEV
errno.h (POSIX.1):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EXFULL
errno.h (Linux???):  Error Codes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EXIT_FAILURE
stdlib.h (ISO):  Exit Status. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EXIT_SUCCESS
stdlib.h (ISO):  Exit Status. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int EXPR_NEST_MAX
limits.h (POSIX.2):  Utility Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int FD_CLOEXEC
fcntl.h (POSIX.1):  Descriptor Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void FD_CLR (int filedes, fd_set *set)
sys/types.h (BSD):  Waiting for I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int FD_ISSET (int filedes, const fd_set *set)
sys/types.h (BSD):  Waiting for I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void FD_SET (int filedes, fd_set *set)
sys/types.h (BSD):  Waiting for I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int FD_SETSIZE
sys/types.h (BSD):  Waiting for I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void FD_ZERO (fd_set *set)
sys/types.h (BSD):  Waiting for I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FE_DIVBYZERO
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FE_DOWNWARD
fenv.h (ISO):  Rounding. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FE_INEXACT
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FE_INVALID
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FE_OVERFLOW
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int FE_SNANS_ALWAYS_SIGNAL
fenv.h (ISO):  Infinity and NaN. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FE_TONEAREST
fenv.h (ISO):  Rounding. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FE_TOWARDZERO
fenv.h (ISO):  Rounding. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FE_UNDERFLOW
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FE_UPWARD
fenv.h (ISO):  Rounding. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE
stdio.h (ISO):  Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int FILENAME_MAX
stdio.h (ISO):  Limits for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_DIG
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_EPSILON
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_MANT_DIG
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_MAX
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_MAX_10_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_MAX_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_MIN
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_MIN_10_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_MIN_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_RADIX
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FLT_ROUNDS
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t FLUSHO
termios.h (BSD):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FNM_CASEFOLD
fnmatch.h (GNU):  Wildcard Matching. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FNM_EXTMATCH
fnmatch.h (GNU):  Wildcard Matching. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FNM_FILE_NAME
fnmatch.h (GNU):  Wildcard Matching. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FNM_LEADING_DIR
fnmatch.h (GNU):  Wildcard Matching. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FNM_NOESCAPE
fnmatch.h (POSIX.2):  Wildcard Matching. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FNM_PATHNAME
fnmatch.h (POSIX.2):  Wildcard Matching. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FNM_PERIOD
fnmatch.h (POSIX.2):  Wildcard Matching. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int FOPEN_MAX
stdio.h (ISO):  Opening Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_DECOVF_TRAP
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_FLTDIV_FAULT
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_FLTDIV_TRAP
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_FLTOVF_FAULT
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_FLTOVF_TRAP
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_FLTUND_FAULT
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_FLTUND_TRAP
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_INTDIV_TRAP
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_INTOVF_TRAP
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FPE_SUBRNG_TRAP
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int FP_ILOGB0
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int FP_ILOGBNAN
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_INFINITE
math.h (C99):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_INT_DOWNWARD
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_INT_TONEAREST
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_INT_TONEARESTFROMZERO
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_INT_TOWARDZERO
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_INT_UPWARD
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int FP_LLOGB0
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int FP_LLOGBNAN
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_NAN
math.h (C99):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_NORMAL
math.h (C99):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_SUBNORMAL
math.h (C99):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FP_ZERO
math.h (C99):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct FTW
ftw.h (XPG4.2):  Working with Directory Trees. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_DUPFD
fcntl.h (POSIX.1):  Duplicating Descriptors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_GETFD
fcntl.h (POSIX.1):  Descriptor Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_GETFL
fcntl.h (POSIX.1):  Getting File Status Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_GETLK
fcntl.h (POSIX.1):  File Locks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_GETOWN
fcntl.h (BSD):  Interrupt Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_OFD_SETLK
fcntl.h (POSIX.1):  Open File Description Locks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_OFD_SETLKW
fcntl.h (POSIX.1):  Open File Description Locks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_OK
unistd.h (POSIX.1):  Testing File Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- F_RDLCK
fcntl.h (POSIX.1):  File Locks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_SETFD
fcntl.h (POSIX.1):  Descriptor Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_SETFL
fcntl.h (POSIX.1):  Getting File Status Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_SETLK
fcntl.h (POSIX.1):  File Locks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_SETLKW
fcntl.h (POSIX.1):  File Locks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int F_SETOWN
fcntl.h (BSD):  Interrupt Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- F_UNLCK
fcntl.h (POSIX.1):  File Locks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- F_WRLCK
fcntl.h (POSIX.1):  File Locks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_ABORTED
glob.h (POSIX.2):  Calling Glob. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_ALTDIRFUNC
glob.h (GNU):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_APPEND
glob.h (POSIX.2):  Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_BRACE
glob.h (GNU):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_DOOFFS
glob.h (POSIX.2):  Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_ERR
glob.h (POSIX.2):  Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_MAGCHAR
glob.h (GNU):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_MARK
glob.h (POSIX.2):  Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_NOCHECK
glob.h (POSIX.2):  Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_NOESCAPE
glob.h (POSIX.2):  Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_NOMAGIC
glob.h (GNU):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_NOMATCH
glob.h (POSIX.2):  Calling Glob. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_NOSORT
glob.h (POSIX.2):  Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_NOSPACE
glob.h (POSIX.2):  Calling Glob. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_ONLYDIR
glob.h (GNU):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_PERIOD
glob.h (GNU):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_TILDE
glob.h (GNU):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- GLOB_TILDE_CHECK
glob.h (GNU):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- HOST_NOT_FOUND
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double HUGE_VAL
math.h (ISO):  Math Error Reporting. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float HUGE_VALF
math.h (ISO):  Math Error Reporting. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double HUGE_VALL
math.h (ISO):  Math Error Reporting. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN HUGE_VAL_FN
math.h (TS 18661-3:2015):  Math Error Reporting. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx HUGE_VAL_FNx
math.h (TS 18661-3:2015):  Math Error Reporting. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t HUPCL
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- const float complex I
complex.h (C99):  Complex Numbers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ICANON
termios.h (POSIX.1):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ICRNL
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t IEXTEN
termios.h (POSIX.1):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t IFNAMSIZ
net/if.h (???):  Interface Naming. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int IFTODT (mode_t mode)
dirent.h (BSD):  Directory Entries. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t IGNBRK
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t IGNCR
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t IGNPAR
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t IMAXBEL
termios.h (BSD):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t INADDR_ANY
netinet/in.h (BSD):  Host Address Data Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t INADDR_BROADCAST
netinet/in.h (BSD):  Host Address Data Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t INADDR_LOOPBACK
netinet/in.h (BSD):  Host Address Data Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t INADDR_NONE
netinet/in.h (BSD):  Host Address Data Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float INFINITY
math.h (ISO):  Infinity and NaN. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- INIT_PROCESS
utmp.h (SVID):  Manipulating the Database. 
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t INLCR
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t INPCK
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- INTPTR_WIDTH
stdint.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- INT_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- INT_MIN
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- INT_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int IPPORT_RESERVED
netinet/in.h (BSD):  Ports. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int IPPORT_USERRESERVED
netinet/in.h (BSD):  Ports. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ISIG
termios.h (POSIX.1):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ISTRIP
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ITIMER_PROF
sys/time.h (BSD):  Setting an Alarm. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ITIMER_REAL
sys/time.h (BSD):  Setting an Alarm. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ITIMER_VIRTUAL
sys/time.h (BSD):  Setting an Alarm. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t IXANY
termios.h (BSD):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t IXOFF
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t IXON
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LANG
locale.h (ISO):  Locale Categories. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LC_ALL
locale.h (ISO):  Locale Categories. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LC_COLLATE
locale.h (ISO):  Locale Categories. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LC_CTYPE
locale.h (ISO):  Locale Categories. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LC_MESSAGES
locale.h (XOPEN):  Locale Categories. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LC_MONETARY
locale.h (ISO):  Locale Categories. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LC_NUMERIC
locale.h (ISO):  Locale Categories. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LC_TIME
locale.h (ISO):  Locale Categories. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LDBL_DIG
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LDBL_EPSILON
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LDBL_MANT_DIG
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LDBL_MAX
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LDBL_MAX_10_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LDBL_MAX_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LDBL_MIN
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LDBL_MIN_10_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LDBL_MIN_EXP
float.h (C90):  Floating Point Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int LINE_MAX
limits.h (POSIX.2):  Utility Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int LINK_MAX
limits.h optional (POSIX.1):  Limits for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LLONG_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LLONG_MIN
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LLONG_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LOGIN_PROCESS
utmp.h (SVID):  Manipulating the Database. 
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LONG_LONG_MAX
limits.h (GNU):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LONG_LONG_MIN
limits.h (GNU):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LONG_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LONG_MIN
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- LONG_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- L_INCR
sys/file.h (BSD):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- L_SET
sys/file.h (BSD):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- L_XTND
sys/file.h (BSD):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int L_ctermid
stdio.h (POSIX.1):  Identifying the Terminal. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int L_cuserid
stdio.h (POSIX.1):  Who Logged In. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int L_tmpnam
stdio.h (ISO):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- MADV_HUGEPAGE
sys/mman.h (Linux):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- MAP_HUGETLB
sys/mman.h (Linux):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int MAXNAMLEN
dirent.h (BSD):  Limits for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int MAXSYMLINKS
sys/param.h (BSD):  Symbolic Links. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int MAX_CANON
limits.h (POSIX.1):  Limits for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int MAX_INPUT
limits.h (POSIX.1):  Limits for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int MB_CUR_MAX
stdlib.h (ISO):  Selecting the Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int MB_LEN_MAX
limits.h (ISO):  Selecting the Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t MDMBUF
termios.h (BSD):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- MFD_ALLOW_SEALING
sys/mman.h (Linux):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- MFD_CLOEXEC
sys/mman.h (Linux):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- MFD_HUGETLB
sys/mman.h (Linux):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- MLOCK_ONFAULT
sys/mman.h (Linux):  Page Lock Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int MSG_DONTROUTE
sys/socket.h (BSD):  Socket Data Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int MSG_OOB
sys/socket.h (BSD):  Socket Data Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int MSG_PEEK
sys/socket.h (BSD):  Socket Data Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int NAME_MAX
limits.h (POSIX.1):  Limits for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float NAN
math.h (GNU):  Infinity and NaN. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int NCCS
termios.h (POSIX.1):  Mode Data Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- NEW_TIME
utmp.h (SVID):  Manipulating the Database. 
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int NGROUPS_MAX
limits.h (POSIX.1):  General Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t NOFLSH
termios.h (POSIX.1):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t NOKERNINFO
termios.h optional (BSD):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- NO_ADDRESS
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- NO_RECOVERY
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int NSIG
signal.h (BSD):  Standard Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * NULL
stddef.h (ISO):  Null Pointer Constant. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- OLD_TIME
utmp.h (SVID):  Manipulating the Database. 
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ONCE_FLAG_INIT
threads.h (C11):  Call Once. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ONLCR
termios.h (POSIX.1):  Output Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t ONOEOT
termios.h optional (BSD):  Output Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int OPEN_MAX
limits.h (POSIX.1):  General Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t OPOST
termios.h (POSIX.1):  Output Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- OPTION_ALIAS
argp.h (GNU):  Argp Option Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- OPTION_ARG_OPTIONAL
argp.h (GNU):  Argp Option Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- OPTION_DOC
argp.h (GNU):  Argp Option Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- OPTION_HIDDEN
argp.h (GNU):  Argp Option Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- OPTION_NO_USAGE
argp.h (GNU):  Argp Option Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t OXTABS
termios.h optional (BSD):  Output Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_ACCMODE
fcntl.h (POSIX.1):  Access Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_APPEND
fcntl.h (POSIX.1):  Operating Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_ASYNC
fcntl.h (BSD):  Operating Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_CREAT
fcntl.h (POSIX.1):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_DIRECTORY
fcntl.h (POSIX.1):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_EXCL
fcntl.h (POSIX.1):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_EXEC
fcntl.h optional (GNU):  Access Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_EXLOCK
fcntl.h optional (BSD):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_FSYNC
fcntl.h (BSD):  Operating Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_IGNORE_CTTY
fcntl.h optional (GNU):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_NDELAY
fcntl.h (BSD):  Operating Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_NOATIME
fcntl.h (GNU):  Operating Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_NOCTTY
fcntl.h (POSIX.1):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_NOFOLLOW
fcntl.h (POSIX.1):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_NOLINK
fcntl.h optional (GNU):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_NONBLOCK
fcntl.h (POSIX.1):  Open-time Flags. 
fcntl.h (POSIX.1):  Operating Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_NOTRANS
fcntl.h optional (GNU):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_PATH
fcntl.h (Linux):  Access Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_RDONLY
fcntl.h (POSIX.1):  Access Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_RDWR
fcntl.h (POSIX.1):  Access Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_READ
fcntl.h optional (GNU):  Access Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_SHLOCK
fcntl.h optional (BSD):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_SYNC
fcntl.h (BSD):  Operating Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_TMPFILE
fcntl.h (GNU):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_TRUNC
fcntl.h (POSIX.1):  Open-time Flags. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_WRITE
fcntl.h optional (GNU):  Access Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int O_WRONLY
fcntl.h (POSIX.1):  Access Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t PARENB
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t PARMRK
termios.h (POSIX.1):  Input Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t PARODD
termios.h (POSIX.1):  Control Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int PATH_MAX
limits.h (POSIX.1):  Limits for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_CHAR
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_DOUBLE
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_FLAG_LONG
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_FLAG_LONG_DOUBLE
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_FLAG_LONG_LONG
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int PA_FLAG_MASK
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_FLAG_PTR
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_FLAG_SHORT
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_FLOAT
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_INT
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_LAST
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_POINTER
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PA_STRING
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t PENDIN
termios.h (BSD):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int PF_FILE
sys/socket.h (GNU):  Local Namespace Details. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int PF_INET
sys/socket.h (BSD):  Internet Namespace. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int PF_INET6
sys/socket.h (X/Open):  Internet Namespace. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int PF_LOCAL
sys/socket.h (POSIX):  Local Namespace Details. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int PF_UNIX
sys/socket.h (BSD):  Local Namespace Details. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int PIPE_BUF
limits.h (POSIX.1):  Limits for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PKEY_DISABLE_ACCESS
sys/mman.h (Linux):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PKEY_DISABLE_WRITE
sys/mman.h (Linux):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- POSIX_REC_INCR_XFER_SIZE
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- POSIX_REC_MAX_XFER_SIZE
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- POSIX_REC_MIN_XFER_SIZE
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- POSIX_REC_XFER_ALIGN
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PRIO_MAX
sys/resource.h (BSD):  Traditional Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PRIO_MIN
sys/resource.h (BSD):  Traditional Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PRIO_PGRP
sys/resource.h (BSD):  Traditional Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PRIO_PROCESS
sys/resource.h (BSD):  Traditional Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PRIO_USER
sys/resource.h (BSD):  Traditional Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PROT_EXEC
sys/mman.h (POSIX):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PROT_NONE
sys/mman.h (POSIX):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PROT_READ
sys/mman.h (POSIX):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PROT_WRITE
sys/mman.h (POSIX):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- PTRDIFF_WIDTH
stdint.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * P_tmpdir
stdio.h (SVID):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int RAND_MAX
stdlib.h (ISO):  ISO Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_BADBR
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_BADPAT
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_BADRPT
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_EBRACE
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_EBRACK
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_ECOLLATE
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_ECTYPE
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_EESCAPE
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_EPAREN
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_ERANGE
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_ESPACE
regex.h (POSIX.2):  POSIX Regexp Compilation. 
regex.h (POSIX.2):  Matching POSIX Regexps. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_ESUBREG
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_EXTENDED
regex.h (POSIX.2):  Flags for POSIX Regexps. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_ICASE
regex.h (POSIX.2):  Flags for POSIX Regexps. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_NEWLINE
regex.h (POSIX.2):  Flags for POSIX Regexps. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_NOMATCH
regex.h (POSIX.2):  Matching POSIX Regexps. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_NOSUB
regex.h (POSIX.2):  Flags for POSIX Regexps. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_NOTBOL
regex.h (POSIX.2):  Matching POSIX Regexps. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- REG_NOTEOL
regex.h (POSIX.2):  Matching POSIX Regexps. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int RE_DUP_MAX
limits.h (POSIX.2):  General Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_AS
sys/resource.h (Unix98):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_CORE
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_CPU
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_DATA
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_FSIZE
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_MEMLOCK
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_NOFILE
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_NPROC
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_RSS
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIMIT_STACK
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- rlim_t RLIM_INFINITY
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RLIM_NLIMITS
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RUN_LVL
utmp.h (SVID):  Manipulating the Database. 
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RUSAGE_CHILDREN
sys/resource.h (BSD):  Resource Usage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- RUSAGE_SELF
sys/resource.h (BSD):  Resource Usage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int R_OK
unistd.h (POSIX.1):  Testing File Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SA_NOCLDSTOP
signal.h (POSIX.1):  Flags for Sigaction. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SA_ONSTACK
signal.h (BSD):  Flags for Sigaction. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SA_RESTART
signal.h (BSD):  Flags for Sigaction. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SCHAR_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SCHAR_MIN
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SCHAR_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SEEK_CUR
stdio.h (ISO):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SEEK_END
stdio.h (ISO):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SEEK_SET
stdio.h (ISO):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SHRT_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SHRT_MIN
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SHRT_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGABRT
signal.h (ISO):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGALRM
signal.h (POSIX.1):  Alarm Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGBUS
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGCHLD
signal.h (POSIX.1):  Job Control Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGCLD
signal.h (SVID):  Job Control Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGCONT
signal.h (POSIX.1):  Job Control Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGEMT
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGFPE
signal.h (ISO):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGHUP
signal.h (POSIX.1):  Termination Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGILL
signal.h (ISO):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGINFO
signal.h (BSD):  Miscellaneous Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGINT
signal.h (ISO):  Termination Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGIO
signal.h (BSD):  Asynchronous I/O Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGIOT
signal.h (Unix):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGKILL
signal.h (POSIX.1):  Termination Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGLOST
signal.h (GNU):  Operation Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGPIPE
signal.h (POSIX.1):  Operation Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGPOLL
signal.h (SVID):  Asynchronous I/O Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGPROF
signal.h (BSD):  Alarm Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGQUIT
signal.h (POSIX.1):  Termination Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGSEGV
signal.h (ISO):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGSTOP
signal.h (POSIX.1):  Job Control Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGSYS
signal.h (Unix):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGTERM
signal.h (ISO):  Termination Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGTRAP
signal.h (BSD):  Program Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGTSTP
signal.h (POSIX.1):  Job Control Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGTTIN
signal.h (POSIX.1):  Job Control Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGTTOU
signal.h (POSIX.1):  Job Control Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGURG
signal.h (BSD):  Asynchronous I/O Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGUSR1
signal.h (POSIX.1):  Miscellaneous Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGUSR2
signal.h (POSIX.1):  Miscellaneous Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGVTALRM
signal.h (BSD):  Alarm Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGWINCH
signal.h (BSD):  Miscellaneous Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGXCPU
signal.h (BSD):  Operation Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SIGXFSZ
signal.h (BSD):  Operation Error Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SIG_ATOMIC_WIDTH
stdint.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SIG_BLOCK
signal.h (POSIX.1):  Process Signal Mask. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- sighandler_t SIG_ERR
signal.h (ISO):  Basic Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SIG_SETMASK
signal.h (POSIX.1):  Process Signal Mask. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SIG_UNBLOCK
signal.h (POSIX.1):  Process Signal Mask. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SIZE_WIDTH
stdint.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double SNAN
math.h (TS 18661-1:2014):  Infinity and NaN. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float SNANF
math.h (TS 18661-1:2014):  Infinity and NaN. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN SNANFN
math.h (TS 18661-3:2015):  Infinity and NaN. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx SNANFNx
math.h (TS 18661-3:2015):  Infinity and NaN. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double SNANL
math.h (TS 18661-1:2014):  Infinity and NaN. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SOCK_DGRAM
sys/socket.h (BSD):  Communication Styles. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SOCK_RAW
sys/socket.h (BSD):  Communication Styles. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SOCK_STREAM
sys/socket.h (BSD):  Communication Styles. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SOL_SOCKET
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_BROADCAST
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_DEBUG
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_DONTROUTE
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_ERROR
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_KEEPALIVE
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_LINGER
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_OOBINLINE
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_RCVBUF
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_REUSEADDR
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_SNDBUF
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_STYLE
sys/socket.h (GNU):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SO_TYPE
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t SSIZE_MAX
limits.h (POSIX.1):  General Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- STDERR_FILENO
unistd.h (POSIX.1):  Descriptors and Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- STDIN_FILENO
unistd.h (POSIX.1):  Descriptors and Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- STDOUT_FILENO
unistd.h (POSIX.1):  Descriptors and Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int STREAM_MAX
limits.h (POSIX.1):  General Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int SUN_LEN (struct sockaddr_un * ptr)
sys/un.h (BSD):  Local Namespace Details. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- SYMLINK_MAX
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IEXEC
sys/stat.h (BSD):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IFBLK
sys/stat.h (BSD):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IFCHR
sys/stat.h (BSD):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IFDIR
sys/stat.h (BSD):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IFIFO
sys/stat.h (BSD):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IFLNK
sys/stat.h (BSD):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_IFMT
sys/stat.h (BSD):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IFREG
sys/stat.h (BSD):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IFSOCK
sys/stat.h (BSD):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IREAD
sys/stat.h (BSD):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IRGRP
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IROTH
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IRUSR
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IRWXG
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IRWXO
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IRWXU
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_ISBLK (mode_t m)
sys/stat.h (POSIX):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_ISCHR (mode_t m)
sys/stat.h (POSIX):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_ISDIR (mode_t m)
sys/stat.h (POSIX):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_ISFIFO (mode_t m)
sys/stat.h (POSIX):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_ISGID
sys/stat.h (POSIX):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_ISLNK (mode_t m)
sys/stat.h (GNU):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_ISREG (mode_t m)
sys/stat.h (POSIX):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_ISSOCK (mode_t m)
sys/stat.h (GNU):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_ISUID
sys/stat.h (POSIX):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_ISVTX
sys/stat.h (BSD):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IWGRP
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IWOTH
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IWRITE
sys/stat.h (BSD):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IWUSR
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IXGRP
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IXOTH
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- S_IXUSR
sys/stat.h (POSIX.1):  Permission Bits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_TYPEISMQ (struct stat *s)
sys/stat.h (POSIX):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_TYPEISSEM (struct stat *s)
sys/stat.h (POSIX):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int S_TYPEISSHM (struct stat *s)
sys/stat.h (POSIX):  Testing File Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- TCSADRAIN
termios.h (POSIX.1):  Mode Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- TCSAFLUSH
termios.h (POSIX.1):  Mode Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- TCSANOW
termios.h (POSIX.1):  Mode Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- TCSASOFT
termios.h (BSD):  Mode Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- TEMP_FAILURE_RETRY (expression)
unistd.h (GNU):  Interrupted Primitives. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int TMP_MAX
stdio.h (ISO):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t TOSTOP
termios.h (POSIX.1):  Local Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- TRY_AGAIN
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- TSS_DTOR_ITERATIONS
threads.h (C11):  ISO C Thread-local Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int TZNAME_MAX
limits.h (POSIX.1):  General Limits. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- UCHAR_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- UCHAR_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- UINTPTR_WIDTH
stdint.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- UINT_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- UINT_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ULLONG_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ULLONG_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ULONG_LONG_MAX
limits.h (GNU):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ULONG_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ULONG_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- USER_PROCESS
utmp.h (SVID):  Manipulating the Database. 
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- USHRT_MAX
limits.h (ISO):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- USHRT_WIDTH
limits.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VDISCARD
termios.h (BSD):  Other Special. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VDSUSP
termios.h (BSD):  Signal Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VEOF
termios.h (POSIX.1):  Editing Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VEOL
termios.h (POSIX.1):  Editing Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VEOL2
termios.h (BSD):  Editing Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VERASE
termios.h (POSIX.1):  Editing Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VINTR
termios.h (POSIX.1):  Signal Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VKILL
termios.h (POSIX.1):  Editing Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VLNEXT
termios.h (BSD):  Other Special. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VMIN
termios.h (POSIX.1):  Noncanonical Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VQUIT
termios.h (POSIX.1):  Signal Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VREPRINT
termios.h (BSD):  Editing Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VSTART
termios.h (POSIX.1):  Start/Stop Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VSTATUS
termios.h (BSD):  Other Special. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VSTOP
termios.h (POSIX.1):  Start/Stop Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VSUSP
termios.h (POSIX.1):  Signal Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VTIME
termios.h (POSIX.1):  Noncanonical Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int VWERASE
termios.h (BSD):  Editing Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WCHAR_MAX
limits.h (GNU):  Range of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t WCHAR_MAX
wchar.h (ISO):  Extended Char Intro. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t WCHAR_MIN
wchar.h (ISO):  Extended Char Intro. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WCHAR_WIDTH
stdint.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int WCOREDUMP (int status)
sys/wait.h (BSD):  Process Completion Status. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int WEOF
wchar.h (ISO):  EOF and Errors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t WEOF
wchar.h (ISO):  Extended Char Intro. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int WEXITSTATUS (int status)
sys/wait.h (POSIX.1):  Process Completion Status. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int WIFEXITED (int status)
sys/wait.h (POSIX.1):  Process Completion Status. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int WIFSIGNALED (int status)
sys/wait.h (POSIX.1):  Process Completion Status. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int WIFSTOPPED (int status)
sys/wait.h (POSIX.1):  Process Completion Status. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WINT_WIDTH
stdint.h (ISO):  Width of Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_APPEND
wordexp.h (POSIX.2):  Flags for Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_BADCHAR
wordexp.h (POSIX.2):  Calling Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_BADVAL
wordexp.h (POSIX.2):  Calling Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_CMDSUB
wordexp.h (POSIX.2):  Calling Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_DOOFFS
wordexp.h (POSIX.2):  Flags for Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_NOCMD
wordexp.h (POSIX.2):  Flags for Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_NOSPACE
wordexp.h (POSIX.2):  Calling Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_REUSE
wordexp.h (POSIX.2):  Flags for Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_SHOWERR
wordexp.h (POSIX.2):  Flags for Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_SYNTAX
wordexp.h (POSIX.2):  Calling Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- WRDE_UNDEF
wordexp.h (POSIX.2):  Flags for Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int WSTOPSIG (int status)
sys/wait.h (POSIX.1):  Process Completion Status. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int WTERMSIG (int status)
sys/wait.h (POSIX.1):  Process Completion Status. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int W_OK
unistd.h (POSIX.1):  Testing File Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int X_OK
unistd.h (POSIX.1):  Testing File Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _ATFILE_SOURCE
no header (GNU):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _CS_LFS64_CFLAGS
unistd.h (Unix98):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _CS_LFS64_LDFLAGS
unistd.h (Unix98):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _CS_LFS64_LIBS
unistd.h (Unix98):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _CS_LFS64_LINTFLAGS
unistd.h (Unix98):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _CS_LFS_CFLAGS
unistd.h (Unix98):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _CS_LFS_LDFLAGS
unistd.h (Unix98):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _CS_LFS_LIBS
unistd.h (Unix98):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _CS_LFS_LINTFLAGS
unistd.h (Unix98):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _CS_PATH
unistd.h (POSIX.2):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- const float complex _Complex_I
complex.h (C99):  Complex Numbers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _DEFAULT_SOURCE
no header (GNU):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _DYNAMIC_STACK_SIZE_SOURCE
no header (GNU):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void _Exit (int status)
stdlib.h (ISO):  Termination Internals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FILE_OFFSET_BITS
no header (X/Open):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FORTIFY_SOURCE
no header (GNU):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t _Fork (void)
unistd.h (GNU):  Creating a Process. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _GNU_SOURCE
no header (GNU):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _IOFBF
stdio.h (ISO):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _IOLBF
stdio.h (ISO):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _IONBF
stdio.h (ISO):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _ISOC11_SOURCE
no header (C11):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _ISOC2X_SOURCE
no header (C2X):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _ISOC99_SOURCE
no header (GNU):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _LARGEFILE64_SOURCE
no header (X/Open):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _LARGEFILE_SOURCE
no header (X/Open):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_ASYNC_IO
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_CHOWN_RESTRICTED
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_FILESIZEBITS
unistd.h (LFS):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_LINK_MAX
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_MAX_CANON
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_MAX_INPUT
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_NAME_MAX
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_NO_TRUNC
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_PATH_MAX
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_PIPE_BUF
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_PRIO_IO
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_REC_INCR_XFER_SIZE
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_REC_MAX_XFER_SIZE
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_REC_MIN_XFER_SIZE
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_REC_XFER_ALIGN
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_SYNC_IO
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _PC_VDISABLE
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX2_BC_BASE_MAX
limits.h (POSIX.2):  Utility Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX2_BC_DIM_MAX
limits.h (POSIX.2):  Utility Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX2_BC_SCALE_MAX
limits.h (POSIX.2):  Utility Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX2_BC_STRING_MAX
limits.h (POSIX.2):  Utility Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX2_COLL_WEIGHTS_MAX
limits.h (POSIX.2):  Utility Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _POSIX2_C_DEV
unistd.h (POSIX.2):  System Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int _POSIX2_C_VERSION
unistd.h (POSIX.2):  Version Supported. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX2_EQUIV_CLASS_MAX
limits.h (POSIX.2):  Utility Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX2_EXPR_NEST_MAX
limits.h (POSIX.2):  Utility Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _POSIX2_FORT_DEV
unistd.h (POSIX.2):  System Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _POSIX2_FORT_RUN
unistd.h (POSIX.2):  System Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX2_LINE_MAX
limits.h (POSIX.2):  Utility Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _POSIX2_LOCALEDEF
unistd.h (POSIX.2):  System Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX2_RE_DUP_MAX
limits.h (POSIX.2):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _POSIX2_SW_DEV
unistd.h (POSIX.2):  System Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_AIO_LISTIO_MAX
limits.h (POSIX.1):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_AIO_MAX
limits.h (POSIX.1):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_ARG_MAX
limits.h (POSIX.1):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_CHILD_MAX
limits.h (POSIX.1):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _POSIX_CHOWN_RESTRICTED
unistd.h (POSIX.1):  Options for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_C_SOURCE
no header (POSIX.2):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _POSIX_JOB_CONTROL
unistd.h (POSIX.1):  System Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_LINK_MAX
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_MAX_CANON
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_MAX_INPUT
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_NAME_MAX
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_NGROUPS_MAX
limits.h (POSIX.1):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _POSIX_NO_TRUNC
unistd.h (POSIX.1):  Options for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_OPEN_MAX
limits.h (POSIX.1):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_PATH_MAX
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_PIPE_BUF
limits.h (POSIX.1):  File Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _POSIX_SAVED_IDS
unistd.h (POSIX.1):  System Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_SOURCE
no header (POSIX.1):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_SSIZE_MAX
limits.h (POSIX.1):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_STREAM_MAX
limits.h (POSIX.1):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _POSIX_TZNAME_MAX
limits.h (POSIX.1):  Minimums. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned char _POSIX_VDISABLE
unistd.h (POSIX.1):  Options for Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int _POSIX_VERSION
unistd.h (POSIX.1):  Version Supported. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _REENTRANT
no header (Obsolete):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_2_C_DEV
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_2_FORT_DEV
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_2_FORT_RUN
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_2_LOCALEDEF
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_2_SW_DEV
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_2_VERSION
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_AIO_LISTIO_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_AIO_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_AIO_PRIO_DELTA_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_ARG_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_ASYNCHRONOUS_IO
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_ATEXIT_MAX
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_AVPHYS_PAGES
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_BC_BASE_MAX
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_BC_DIM_MAX
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_BC_SCALE_MAX
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_BC_STRING_MAX
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_CHARCLASS_NAME_MAX
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_CHAR_BIT
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_CHAR_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_CHAR_MIN
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_CHILD_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_CLK_TCK
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_COLL_WEIGHTS_MAX
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_DELAYTIMER_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_EQUIV_CLASS_MAX
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_EXPR_NEST_MAX
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_FSYNC
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_GETGR_R_SIZE_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_GETPW_R_SIZE_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_INT_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_INT_MIN
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_JOB_CONTROL
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL1_DCACHE_ASSOC
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL1_DCACHE_LINESIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL1_DCACHE_SIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL1_ICACHE_ASSOC
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL1_ICACHE_LINESIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL1_ICACHE_SIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL2_CACHE_ASSOC
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL2_CACHE_LINESIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL2_CACHE_SIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL3_CACHE_ASSOC
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL3_CACHE_LINESIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL3_CACHE_SIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL4_CACHE_ASSOC
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL4_CACHE_LINESIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LEVEL4_CACHE_SIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LINE_MAX
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LOGIN_NAME_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_LONG_BIT
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_MAPPED_FILES
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_MB_LEN_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_MEMLOCK
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_MEMLOCK_RANGE
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_MEMORY_PROTECTION
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_MESSAGE_PASSING
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_MINSIGSTKSZ
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_MQ_OPEN_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_MQ_PRIO_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NGROUPS_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NL_ARGMAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NL_LANGMAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NL_MSGMAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NL_NMAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NL_SETMAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NL_TEXTMAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NPROCESSORS_CONF
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NPROCESSORS_ONLN
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_NZERO
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_OPEN_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PAGESIZE
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PHYS_PAGES
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII_INTERNET
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII_INTERNET_DGRAM
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII_INTERNET_STREAM
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII_OSI
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII_OSI_CLTS
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII_OSI_COTS
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII_OSI_M
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII_SOCKET
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PII_XTI
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PRIORITIZED_IO
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_PRIORITY_SCHEDULING
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_REALTIME_SIGNALS
unistdh.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_RTSIG_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SAVED_IDS
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SCHAR_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SCHAR_MIN
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SELECT
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SEMAPHORES
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SEM_NSEMS_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SEM_VALUE_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SHARED_MEMORY_OBJECTS
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SHRT_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SHRT_MIN
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SIGQUEUE_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SIGSTKSZ
unistd.h (GNU):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SSIZE_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_STREAM_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_SYNCHRONIZED_IO
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREADS
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_ATTR_STACKADDR
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_ATTR_STACKSIZE
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_DESTRUCTOR_ITERATIONS
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_KEYS_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_PRIORITY_SCHEDULING
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_PRIO_INHERIT
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_PRIO_PROTECT
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_PROCESS_SHARED
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_SAFE_FUNCTIONS
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_STACK_MIN
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_THREAD_THREADS_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_TIMERS
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_TIMER_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_TTY_NAME_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_TZNAME_MAX
unistd.h (POSIX.1):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_T_IOV_MAX
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_UCHAR_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_UINT_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_UIO_MAXIOV
unistd.h (POSIX.1g):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_ULONG_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_USHRT_MAX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_VERSION
unistd.h (POSIX.1):  Constants for Sysconf. 
unistd.h (POSIX.2):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_WORD_BIT
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_CRYPT
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_ENH_I18N
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_LEGACY
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_REALTIME
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_REALTIME_THREADS
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_SHM
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_UNIX
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_VERSION
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_XCU_VERSION
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_XPG2
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_XPG3
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _SC_XOPEN_XPG4
unistd.h (X/Open):  Constants for Sysconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _THREAD_SAFE
no header (Obsolete):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _XOPEN_SOURCE
no header (X/Open):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _XOPEN_SOURCE_EXTENDED
no header (X/Open):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- __STDC_WANT_IEC_60559_BFP_EXT__
no header (ISO):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- __STDC_WANT_IEC_60559_EXT__
no header (ISO):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- __STDC_WANT_IEC_60559_FUNCS_EXT__
no header (ISO):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- __STDC_WANT_IEC_60559_TYPES_EXT__
no header (ISO):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- __STDC_WANT_LIB_EXT2__
no header (ISO):  Feature Test Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t __fbufsize (FILE *stream)
stdio_ext.h (GNU):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int __flbf (FILE *stream)
stdio_ext.h (GNU):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t __fpending (FILE *stream)
stdio_ext.h (GNU):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void __fpurge (FILE *stream)
stdio_ext.h (GNU):  Flushing Buffers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int __freadable (FILE *stream)
stdio_ext.h (GNU):  Opening Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int __freading (FILE *stream)
stdio_ext.h (GNU):  Opening Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int __fsetlocking (FILE *stream, int type)
stdio_ext.h (GNU):  Streams and Threads. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- __ftw64_func_t
ftw.h (GNU):  Working with Directory Trees. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- __ftw_func_t
ftw.h (GNU):  Working with Directory Trees. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int __fwritable (FILE *stream)
stdio_ext.h (GNU):  Opening Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int __fwriting (FILE *stream)
stdio_ext.h (GNU):  Opening Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void (*__gconv_end_fct) (struct gconv_step *)
gconv.h (GNU):  glibc iconv Implementation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int (*__gconv_fct) (struct __gconv_step *, struct __gconv_step_data *, const char **, const char *, size_t *, int)
gconv.h (GNU):  glibc iconv Implementation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int (*__gconv_init_fct) (struct __gconv_step *)
gconv.h (GNU):  glibc iconv Implementation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct __gconv_step
gconv.h (GNU):  glibc iconv Implementation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct __gconv_step_data
gconv.h (GNU):  glibc iconv Implementation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char __libc_single_threaded
sys/single_threaded.h (GNU):  Single-Threaded. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- __nftw64_func_t
ftw.h (GNU):  Working with Directory Trees. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- __nftw_func_t
ftw.h (GNU):  Working with Directory Trees. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void __va_copy (va_list dest, va_list src)
stdarg.h (GNU):  Argument Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void _exit (int status)
unistd.h (POSIX.1):  Termination Internals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void _flushlbf (void)
stdio_ext.h (GNU):  Flushing Buffers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _tolower (int c)
ctype.h (SVID):  Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int _toupper (int c)
ctype.h (SVID):  Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int a64l (const char *string)
stdlib.h (XPG):  Encode Binary Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void abort (void)
stdlib.h (ISO):  Aborting a Program. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int abs (int number)
stdlib.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int accept (int socket, struct sockaddr *addr, socklen_t *length_ptr)
sys/socket.h (BSD):  Accepting Connections. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int access (const char *filename, int how)
unistd.h (POSIX.1):  Testing File Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double acos (double x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float acosf (float x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN acosfN (_FloatN x)
math.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx acosfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double acosh (double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float acoshf (float x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN acoshfN (_FloatN x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx acoshfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double acoshl (long double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double acosl (long double x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int addmntent (FILE *stream, const struct mntent *mnt)
mntent.h (BSD):  mtab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int adjtime (const struct timeval *delta, struct timeval *olddelta)
sys/time.h (BSD):  Setting and Adjusting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int adjtimex (struct timex *timex)
sys/timex.h (GNU):  Setting and Adjusting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_cancel (int fildes, struct aiocb *aiocbp)
aio.h (POSIX.1b):  Cancel AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_cancel64 (int fildes, struct aiocb64 *aiocbp)
aio.h (Unix98):  Cancel AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_error (const struct aiocb *aiocbp)
aio.h (POSIX.1b):  Status of AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_error64 (const struct aiocb64 *aiocbp)
aio.h (Unix98):  Status of AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_fsync (int op, struct aiocb *aiocbp)
aio.h (POSIX.1b):  Synchronizing AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_fsync64 (int op, struct aiocb64 *aiocbp)
aio.h (Unix98):  Synchronizing AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void aio_init (const struct aioinit *init)
aio.h (GNU):  Configuration of AIO. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_read (struct aiocb *aiocbp)
aio.h (POSIX.1b):  Asynchronous Reads/Writes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_read64 (struct aiocb64 *aiocbp)
aio.h (Unix98):  Asynchronous Reads/Writes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t aio_return (struct aiocb *aiocbp)
aio.h (POSIX.1b):  Status of AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t aio_return64 (struct aiocb64 *aiocbp)
aio.h (Unix98):  Status of AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_suspend (const struct aiocb *const list[], int nent, const struct timespec *timeout)
aio.h (POSIX.1b):  Synchronizing AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_suspend64 (const struct aiocb64 *const list[], int nent, const struct timespec *timeout)
aio.h (Unix98):  Synchronizing AIO Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_write (struct aiocb *aiocbp)
aio.h (POSIX.1b):  Asynchronous Reads/Writes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int aio_write64 (struct aiocb64 *aiocbp)
aio.h (Unix98):  Asynchronous Reads/Writes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct aiocb
aio.h (POSIX.1b):  Asynchronous I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct aiocb64
aio.h (POSIX.1b):  Asynchronous I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct aioinit
aio.h (GNU):  Configuration of AIO. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned int alarm (unsigned int seconds)
unistd.h (POSIX.1):  Setting an Alarm. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * aligned_alloc (size_t alignment, size_t size)
stdlib.h (???):  Aligned Memory Blocks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * alloca (size_t size)
stdlib.h (GNU):  Variable Size Automatic. 
stdlib.h (BSD):  Variable Size Automatic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int alphasort (const struct dirent **a, const struct dirent **b)
dirent.h (BSD):  Scanning Directory Content. 
dirent.h (SVID):  Scanning Directory Content. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int alphasort64 (const struct dirent64 **a, const struct dirent **b)
dirent.h (GNU):  Scanning Directory Content. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct argp
argp.h (GNU):  Argp Parsers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct argp_child
argp.h (GNU):  Argp Children. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t argp_err_exit_status
argp.h (GNU):  Argp Global Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void argp_error (const struct argp_state *state, const char *fmt, …)
argp.h (GNU):  Argp Helper Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void argp_failure (const struct argp_state *state, int status, int errnum, const char *fmt, …)
argp.h (GNU):  Argp Helper Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void argp_help (const struct argp *argp, FILE *stream, unsigned flags, char *name)
argp.h (GNU):  Argp Help. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct argp_option
argp.h (GNU):  Argp Option Vectors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t argp_parse (const struct argp *argp, int argc, char **argv, unsigned flags, int *arg_index, void *input)
argp.h (GNU):  Argp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- const char * argp_program_bug_address
argp.h (GNU):  Argp Global Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- const char * argp_program_version
argp.h (GNU):  Argp Global Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- argp_program_version_hook
argp.h (GNU):  Argp Global Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct argp_state
argp.h (GNU):  Argp Parsing State. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void argp_state_help (const struct argp_state *state, FILE *stream, unsigned flags)
argp.h (GNU):  Argp Helper Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void argp_usage (const struct argp_state *state)
argp.h (GNU):  Argp Helper Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t argz_add (char **argz, size_t *argz_len, const char *str)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t argz_add_sep (char **argz, size_t *argz_len, const char *str, int delim)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t argz_append (char **argz, size_t *argz_len, const char *buf, size_t buf_len)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t argz_count (const char *argz, size_t argz_len)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t argz_create (char *const argv[], char **argz, size_t *argz_len)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t argz_create_sep (const char *string, int sep, char **argz, size_t *argz_len)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void argz_delete (char **argz, size_t *argz_len, char *entry)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void argz_extract (const char *argz, size_t argz_len, char **argv)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t argz_insert (char **argz, size_t *argz_len, char *before, const char *entry)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * argz_next (const char *argz, size_t argz_len, const char *entry)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t argz_replace (char **argz, size_t *argz_len, const char *str, const char *with, unsigned *replace_count)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void argz_stringify (char *argz, size_t len, int sep)
argz.h (GNU):  Argz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * asctime (const struct tm *brokentime)
time.h (ISO):  Formatting Calendar Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * asctime_r (const struct tm *brokentime, char *buffer)
time.h (POSIX.1c):  Formatting Calendar Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double asin (double x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float asinf (float x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN asinfN (_FloatN x)
math.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx asinfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double asinh (double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float asinhf (float x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN asinhfN (_FloatN x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx asinhfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double asinhl (long double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double asinl (long double x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int asprintf (char **ptr, const char *template, …)
stdio.h (GNU):  Dynamic Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void assert (int expression)
assert.h (ISO):  Consistency Checking. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void assert_perror (int errnum)
assert.h (GNU):  Consistency Checking. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double atan (double x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double atan2 (double y, double x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float atan2f (float y, float x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN atan2fN (_FloatN y, _FloatN x)
math.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx atan2fNx (_FloatNx y, _FloatNx x)
math.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double atan2l (long double y, long double x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float atanf (float x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN atanfN (_FloatN x)
math.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx atanfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double atanh (double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float atanhf (float x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN atanhfN (_FloatN x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx atanhfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double atanhl (long double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double atanl (long double x)
math.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int atexit (void (*function) (void))
stdlib.h (ISO):  Cleanups on Exit. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double atof (const char *string)
stdlib.h (ISO):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int atoi (const char *string)
stdlib.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int atol (const char *string)
stdlib.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int atoll (const char *string)
stdlib.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int backtrace (void **buffer, int size)
execinfo.h (GNU):  Backtraces. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char ** backtrace_symbols (void *const *buffer, int size)
execinfo.h (GNU):  Backtraces. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void backtrace_symbols_fd (void *const *buffer, int size, int fd)
execinfo.h (GNU):  Backtraces. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * basename (char *path)
libgen.h (XPG):  Finding Tokens in a String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * basename (const char *filename)
string.h (GNU):  Finding Tokens in a String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int bcmp (const void *a1, const void *a2, size_t size)
string.h (BSD):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void bcopy (const void *from, void *to, size_t size)
string.h (BSD):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int bind (int socket, struct sockaddr *addr, socklen_t length)
sys/socket.h (BSD):  Setting Address. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * bind_textdomain_codeset (const char *domainname, const char *codeset)
libintl.h (GNU):  Charset conversion in gettext. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * bindtextdomain (const char *domainname, const char *dirname)
libintl.h (GNU):  Locating gettext catalog. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- blkcnt64_t
sys/types.h (Unix98):  Attribute Meanings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- blkcnt_t
sys/types.h (Unix98):  Attribute Meanings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int brk (void *addr)
unistd.h (BSD):  Resizing the Data Segment. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * bsearch (const void *key, const void *array, size_t count, size_t size, comparison_fn_t compare)
stdlib.h (ISO):  Array Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t btowc (int c)
wchar.h (ISO):  Converting a Character. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void bzero (void *block, size_t size)
string.h (BSD):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double cabs (complex double z)
complex.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float cabsf (complex float z)
complex.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN cabsfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx cabsfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double cabsl (complex long double z)
complex.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double cacos (complex double z)
complex.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float cacosf (complex float z)
complex.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN cacosfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx cacosfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double cacosh (complex double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float cacoshf (complex float z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN cacoshfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx cacoshfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double cacoshl (complex long double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double cacosl (complex long double z)
complex.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void call_once (once_flag *flag, void (*func) (void))
threads.h (C11):  Call Once. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * calloc (size_t count, size_t eltsize)
malloc.h (ISO):  Allocating Cleared Space. 
stdlib.h (ISO):  Allocating Cleared Space. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int canonicalize (double *cx, const double *x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * canonicalize_file_name (const char *name)
stdlib.h (GNU):  Symbolic Links. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int canonicalizef (float *cx, const float *x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int canonicalizefN (_FloatN *cx, const _FloatN *x)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int canonicalizefNx (_FloatNx *cx, const _FloatNx *x)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int canonicalizel (long double *cx, const long double *x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double carg (complex double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float cargf (complex float z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN cargfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx cargfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double cargl (complex long double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double casin (complex double z)
complex.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float casinf (complex float z)
complex.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN casinfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx casinfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double casinh (complex double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float casinhf (complex float z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN casinhfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx casinhfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double casinhl (complex long double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double casinl (complex long double z)
complex.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double catan (complex double z)
complex.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float catanf (complex float z)
complex.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN catanfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx catanfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double catanh (complex double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float catanhf (complex float z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN catanhfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx catanhfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double catanhl (complex long double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double catanl (complex long double z)
complex.h (ISO):  Inverse Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- nl_catd catopen (const char *cat_name, int flag)
nl_types.h (X/Open):  The catgets Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double cbrt (double x)
math.h (BSD):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float cbrtf (float x)
math.h (BSD):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN cbrtfN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx cbrtfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double cbrtl (long double x)
math.h (BSD):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- cc_t
termios.h (POSIX.1):  Mode Data Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double ccos (complex double z)
complex.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float ccosf (complex float z)
complex.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN ccosfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx ccosfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double ccosh (complex double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float ccoshf (complex float z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN ccoshfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx ccoshfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double ccoshl (complex long double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double ccosl (complex long double z)
complex.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double ceil (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float ceilf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN ceilfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx ceilfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double ceill (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double cexp (complex double z)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float cexpf (complex float z)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN cexpfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx cexpfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double cexpl (complex long double z)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- speed_t cfgetispeed (const struct termios *termios-p)
termios.h (POSIX.1):  Line Speed. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- speed_t cfgetospeed (const struct termios *termios-p)
termios.h (POSIX.1):  Line Speed. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void cfmakeraw (struct termios *termios-p)
termios.h (BSD):  Noncanonical Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int cfsetispeed (struct termios *termios-p, speed_t speed)
termios.h (POSIX.1):  Line Speed. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int cfsetospeed (struct termios *termios-p, speed_t speed)
termios.h (POSIX.1):  Line Speed. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int cfsetspeed (struct termios *termios-p, speed_t speed)
termios.h (BSD):  Line Speed. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int chdir (const char *filename)
unistd.h (POSIX.1):  Working Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int chmod (const char *filename, mode_t mode)
sys/stat.h (POSIX.1):  Setting Permissions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int chown (const char *filename, uid_t owner, gid_t group)
unistd.h (POSIX.1):  File Owner. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double cimag (complex double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float cimagf (complex float z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN cimagfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx cimagfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double cimagl (complex long double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int clearenv (void)
stdlib.h (GNU):  Environment Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void clearerr (FILE *stream)
stdio.h (ISO):  Error Recovery. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void clearerr_unlocked (FILE *stream)
stdio.h (GNU):  Error Recovery. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- clock_t clock (void)
time.h (ISO):  CPU Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int clock_getres (clockid_t clock, struct timespec *res)
time.h (POSIX.1):  Getting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int clock_gettime (clockid_t clock, struct timespec *ts)
time.h (POSIX.1):  Getting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int clock_settime (clockid_t clock, const struct timespec *ts)
time.h (POSIX):  Setting and Adjusting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- clock_t
time.h (ISO):  Time Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- clockid_t
time.h (POSIX.1):  Getting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double clog (complex double z)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double clog10 (complex double z)
complex.h (GNU):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float clog10f (complex float z)
complex.h (GNU):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN clog10fN (complex _FloatN z)
complex.h (GNU):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx clog10fNx (complex _FloatNx z)
complex.h (GNU):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double clog10l (complex long double z)
complex.h (GNU):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float clogf (complex float z)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN clogfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx clogfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double clogl (complex long double z)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int close (int filedes)
unistd.h (POSIX.1):  Opening and Closing Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int close_range (unsigned int lowfd, unsigned int maxfd, int flags)
unistd.h (Linux):  Opening and Closing Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int closedir (DIR *dirstream)
dirent.h (POSIX.1):  Reading/Closing Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void closefrom (int lowfd)
unistd.h (GNU):  Opening and Closing Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void closelog (void)
syslog.h (BSD):  closelog. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int cnd_broadcast (cnd_t *cond)
threads.h (C11):  ISO C Condition Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void cnd_destroy (cnd_t *cond)
threads.h (C11):  ISO C Condition Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int cnd_init (cnd_t *cond)
threads.h (C11):  ISO C Condition Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int cnd_signal (cnd_t *cond)
threads.h (C11):  ISO C Condition Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- cnd_t
threads.h (C11):  ISO C Condition Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int cnd_timedwait (cnd_t *restrict cond, mtx_t *restrict mutex, const struct timespec *restrict time_point)
threads.h (C11):  ISO C Condition Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int cnd_wait (cnd_t *cond, mtx_t *mutex)
threads.h (C11):  ISO C Condition Variables. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t confstr (int parameter, char *buf, size_t len)
unistd.h (POSIX.2):  String Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double conj (complex double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float conjf (complex float z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN conjfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx conjfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double conjl (complex long double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int connect (int socket, struct sockaddr *addr, socklen_t length)
sys/socket.h (BSD):  Connecting. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- cookie_close_function_t
stdio.h (GNU):  Hook Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- cookie_io_functions_t
stdio.h (GNU):  Streams and Cookies. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- cookie_read_function_t
stdio.h (GNU):  Hook Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- cookie_seek_function_t
stdio.h (GNU):  Hook Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- cookie_write_function_t
stdio.h (GNU):  Hook Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t copy_file_range (int inputfd, off64_t *inputpos, int outputfd, off64_t *outputpos, ssize_t length, unsigned int flags)
unistd.h (GNU):  Copying File Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double copysign (double x, double y)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float copysignf (float x, float y)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN copysignfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx copysignfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double copysignl (long double x, long double y)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double cos (double x)
math.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float cosf (float x)
math.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN cosfN (_FloatN x)
math.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx cosfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double cosh (double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float coshf (float x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN coshfN (_FloatN x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx coshfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double coshl (long double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double cosl (long double x)
math.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double cpow (complex double base, complex double power)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float cpowf (complex float base, complex float power)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN cpowfN (complex _FloatN base, complex _FloatN power)
complex.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx cpowfNx (complex _FloatNx base, complex _FloatNx power)
complex.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double cpowl (complex long double base, complex long double power)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double cproj (complex double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float cprojf (complex float z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN cprojfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx cprojfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double cprojl (complex long double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- cpu_set_t
sched.h (GNU):  CPU Affinity. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double creal (complex double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float crealf (complex float z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN crealfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx crealfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double creall (complex long double z)
complex.h (ISO):  Operations on Complex. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int creat (const char *filename, mode_t mode)
fcntl.h (POSIX.1):  Opening and Closing Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int creat64 (const char *filename, mode_t mode)
fcntl.h (Unix98):  Opening and Closing Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * crypt (const char *phrase, const char *salt)
unistd.h (X/Open):  Passphrase Storage. 
crypt.h (GNU):  Passphrase Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * crypt_r (const char *phrase, const char *salt, struct crypt_data *data)
crypt.h (GNU):  Passphrase Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double csin (complex double z)
complex.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float csinf (complex float z)
complex.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN csinfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx csinfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double csinh (complex double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float csinhf (complex float z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN csinhfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx csinhfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double csinhl (complex long double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double csinl (complex long double z)
complex.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double csqrt (complex double z)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float csqrtf (complex float z)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN csqrtfN (_FloatN z)
complex.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx csqrtfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double csqrtl (complex long double z)
complex.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double ctan (complex double z)
complex.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float ctanf (complex float z)
complex.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN ctanfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx ctanfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex double ctanh (complex double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex float ctanhf (complex float z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatN ctanhfN (complex _FloatN z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex _FloatNx ctanhfNx (complex _FloatNx z)
complex.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double ctanhl (complex long double z)
complex.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- complex long double ctanl (complex long double z)
complex.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * ctermid (char *string)
stdio.h (POSIX.1):  Identifying the Terminal. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * ctime (const time_t *time)
time.h (ISO):  Formatting Calendar Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * ctime_r (const time_t *time, char *buffer)
time.h (POSIX.1c):  Formatting Calendar Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * cuserid (char *string)
stdio.h (POSIX.1):  Who Logged In. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double daddl (long double x, long double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int daylight
time.h (SVID):  Time Zone Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * dcgettext (const char *domainname, const char *msgid, int category)
libintl.h (GNU):  Translation with gettext. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * dcngettext (const char *domain, const char *msgid1, const char *msgid2, unsigned long int n, int category)
libintl.h (GNU):  Advanced gettext functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double ddivl (long double x, long double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- dev_t
sys/types.h (POSIX.1):  Attribute Meanings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * dgettext (const char *domainname, const char *msgid)
libintl.h (GNU):  Translation with gettext. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double difftime (time_t end, time_t begin)
time.h (ISO):  Calculating Elapsed Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct dirent
dirent.h (POSIX.1):  Directory Entries. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int dirfd (DIR *dirstream)
dirent.h (GNU):  Opening a Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * dirname (char *path)
libgen.h (XPG):  Finding Tokens in a String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- div_t div (int numerator, int denominator)
stdlib.h (ISO):  Integer Division. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- div_t
stdlib.h (ISO):  Integer Division. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double dmull (long double x, long double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * dngettext (const char *domain, const char *msgid1, const char *msgid2, unsigned long int n)
libintl.h (GNU):  Advanced gettext functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double drand48 (void)
stdlib.h (SVID):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int drand48_r (struct drand48_data *buffer, double *result)
stdlib.h (GNU):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double drem (double numerator, double denominator)
math.h (BSD):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float dremf (float numerator, float denominator)
math.h (BSD):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double dreml (long double numerator, long double denominator)
math.h (BSD):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double dsubl (long double x, long double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int dup (int old)
unistd.h (POSIX.1):  Duplicating Descriptors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int dup2 (int old, int new)
unistd.h (POSIX.1):  Duplicating Descriptors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * ecvt (double value, int ndigit, int *decpt, int *neg)
stdlib.h (SVID):  System V Number Conversion. 
stdlib.h (Unix98):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ecvt_r (double value, int ndigit, int *decpt, int *neg, char *buf, size_t len)
stdlib.h (GNU):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endfsent (void)
fstab.h (BSD):  fstab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endgrent (void)
grp.h (SVID):  Scanning All Groups. 
grp.h (BSD):  Scanning All Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endhostent (void)
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int endmntent (FILE *stream)
mntent.h (BSD):  mtab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endnetent (void)
netdb.h (BSD):  Networks Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endnetgrent (void)
netdb.h (BSD):  Lookup Netgroup. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endprotoent (void)
netdb.h (BSD):  Protocols Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endpwent (void)
pwd.h (SVID):  Scanning All Users. 
pwd.h (BSD):  Scanning All Users. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endservent (void)
netdb.h (BSD):  Services Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endutent (void)
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void endutxent (void)
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char ** environ
unistd.h (POSIX.1):  Environment Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t envz_add (char **envz, size_t *envz_len, const char *name, const char *value)
envz.h (GNU):  Envz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * envz_entry (const char *envz, size_t envz_len, const char *name)
envz.h (GNU):  Envz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * envz_get (const char *envz, size_t envz_len, const char *name)
envz.h (GNU):  Envz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- error_t envz_merge (char **envz, size_t *envz_len, const char *envz2, size_t envz2_len, int override)
envz.h (GNU):  Envz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void envz_remove (char **envz, size_t *envz_len, const char *name)
envz.h (GNU):  Envz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void envz_strip (char **envz, size_t *envz_len)
envz.h (GNU):  Envz Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double erand48 (unsigned short int xsubi[3])
stdlib.h (SVID):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int erand48_r (unsigned short int xsubi[3], struct drand48_data *buffer, double *result)
stdlib.h (GNU):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double erf (double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double erfc (double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float erfcf (float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN erfcfN (_FloatN x)
math.h (TS 18661-3:2015):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx erfcfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double erfcl (long double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float erff (float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN erffN (_FloatN x)
math.h (TS 18661-3:2015):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx erffNx (_FloatNx x)
math.h (TS 18661-3:2015):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double erfl (long double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void err (int status, const char *format, …)
err.h (BSD):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- volatile int errno
errno.h (ISO):  Checking for Errors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void error (int status, int errnum, const char *format, …)
error.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void error_at_line (int status, int errnum, const char *fname, unsigned int lineno, const char *format, …)
error.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned int error_message_count
error.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int error_one_per_line
error.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void (*error_print_progname) (void)
error.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void errx (int status, const char *format, …)
err.h (BSD):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int execl (const char *filename, const char *arg0, …)
unistd.h (POSIX.1):  Executing a File. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int execle (const char *filename, const char *arg0, …, char *const env[])
unistd.h (POSIX.1):  Executing a File. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int execlp (const char *filename, const char *arg0, …)
unistd.h (POSIX.1):  Executing a File. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int execv (const char *filename, char *const argv[])
unistd.h (POSIX.1):  Executing a File. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int execve (const char *filename, char *const argv[], char *const env[])
unistd.h (POSIX.1):  Executing a File. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int execvp (const char *filename, char *const argv[])
unistd.h (POSIX.1):  Executing a File. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void exit (int status)
stdlib.h (ISO):  Normal Termination. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct exit_status
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double exp (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double exp10 (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float exp10f (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN exp10fN (_FloatN x)
math.h (TS 18661-4:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx exp10fNx (_FloatNx x)
math.h (TS 18661-4:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double exp10l (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double exp2 (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float exp2f (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN exp2fN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx exp2fNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double exp2l (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float expf (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN expfN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx expfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double expl (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void explicit_bzero (void *block, size_t len)
string.h (BSD):  Erasing Sensitive Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double expm1 (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float expm1f (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN expm1fN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx expm1fNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double expm1l (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatM fMaddfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatM fMaddfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatM fMdivfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatM fMdivfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatM fMmulfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatM fMmulfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatM fMsubfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatM fMsubfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatMx fMxaddfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatMx fMxaddfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatMx fMxdivfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatMx fMxdivfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatMx fMxmulfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatMx fMxmulfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatMx fMxsubfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatMx fMxsubfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double fabs (double number)
math.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fabsf (float number)
math.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN fabsfN (_FloatN number)
math.h (TS 18661-3:2015):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx fabsfNx (_FloatNx number)
math.h (TS 18661-3:2015):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double fabsl (long double number)
math.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fadd (double x, double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float faddl (long double x, long double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fchdir (int filedes)
unistd.h (XPG):  Working Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fchmod (int filedes, mode_t mode)
sys/stat.h (BSD):  Setting Permissions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fchown (int filedes, uid_t owner, gid_t group)
unistd.h (BSD):  File Owner. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fclose (FILE *stream)
stdio.h (ISO):  Closing Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fcloseall (void)
stdio.h (GNU):  Closing Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fcntl (int filedes, int command, …)
fcntl.h (POSIX.1):  Control Operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * fcvt (double value, int ndigit, int *decpt, int *neg)
stdlib.h (SVID):  System V Number Conversion. 
stdlib.h (Unix98):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fcvt_r (double value, int ndigit, int *decpt, int *neg, char *buf, size_t len)
stdlib.h (SVID):  System V Number Conversion. 
stdlib.h (Unix98):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- fd_set
sys/types.h (BSD):  Waiting for I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fdatasync (int fildes)
unistd.h (POSIX):  Synchronizing I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double fdim (double x, double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fdimf (float x, float y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN fdimfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx fdimfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double fdiml (long double x, long double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fdiv (double x, double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fdivl (long double x, long double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * fdopen (int filedes, const char *opentype)
stdio.h (POSIX.1):  Descriptors and Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DIR * fdopendir (int fd)
dirent.h (GNU):  Opening a Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int feclearexcept (int excepts)
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fedisableexcept (int excepts)
fenv.h (GNU):  Control Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int feenableexcept (int excepts)
fenv.h (GNU):  Control Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fegetenv (fenv_t *envp)
fenv.h (ISO):  Control Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fegetexcept (void)
fenv.h (GNU):  Control Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fegetexceptflag (fexcept_t *flagp, int excepts)
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fegetmode (femode_t *modep)
fenv.h (ISO):  Control Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fegetround (void)
fenv.h (ISO):  Rounding. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int feholdexcept (fenv_t *envp)
fenv.h (ISO):  Control Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int feof (FILE *stream)
stdio.h (ISO):  EOF and Errors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int feof_unlocked (FILE *stream)
stdio.h (GNU):  EOF and Errors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int feraiseexcept (int excepts)
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ferror (FILE *stream)
stdio.h (ISO):  EOF and Errors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ferror_unlocked (FILE *stream)
stdio.h (GNU):  EOF and Errors. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fesetenv (const fenv_t *envp)
fenv.h (ISO):  Control Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fesetexcept (int excepts)
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fesetexceptflag (const fexcept_t *flagp, int excepts)
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fesetmode (const femode_t *modep)
fenv.h (ISO):  Control Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fesetround (int round)
fenv.h (ISO):  Rounding. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fetestexcept (int excepts)
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fetestexceptflag (const fexcept_t *flagp, int excepts)
fenv.h (ISO):  Status bit operations. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int feupdateenv (const fenv_t *envp)
fenv.h (ISO):  Control Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fexecve (int fd, char *const argv[], char *const env[])
unistd.h (POSIX.1):  Executing a File. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fflush (FILE *stream)
stdio.h (ISO):  Flushing Buffers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fflush_unlocked (FILE *stream)
stdio.h (POSIX):  Flushing Buffers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fgetc (FILE *stream)
stdio.h (ISO):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fgetc_unlocked (FILE *stream)
stdio.h (POSIX):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct group * fgetgrent (FILE *stream)
grp.h (SVID):  Scanning All Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fgetgrent_r (FILE *stream, struct group *result_buf, char *buffer, size_t buflen, struct group **result)
grp.h (GNU):  Scanning All Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fgetpos (FILE *stream, fpos_t *position)
stdio.h (ISO):  Portable Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fgetpos64 (FILE *stream, fpos64_t *position)
stdio.h (Unix98):  Portable Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct passwd * fgetpwent (FILE *stream)
pwd.h (SVID):  Scanning All Users. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fgetpwent_r (FILE *stream, struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result)
pwd.h (GNU):  Scanning All Users. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * fgets (char *s, int count, FILE *stream)
stdio.h (ISO):  Line Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * fgets_unlocked (char *s, int count, FILE *stream)
stdio.h (GNU):  Line Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t fgetwc (FILE *stream)
wchar.h (ISO):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t fgetwc_unlocked (FILE *stream)
wchar.h (GNU):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * fgetws (wchar_t *ws, int count, FILE *stream)
wchar.h (ISO):  Line Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * fgetws_unlocked (wchar_t *ws, int count, FILE *stream)
wchar.h (GNU):  Line Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fileno (FILE *stream)
stdio.h (POSIX.1):  Descriptors and Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fileno_unlocked (FILE *stream)
stdio.h (GNU):  Descriptors and Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int finite (double x)
math.h (BSD):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int finitef (float x)
math.h (BSD):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int finitel (long double x)
math.h (BSD):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct flock
fcntl.h (POSIX.1):  File Locks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void flockfile (FILE *stream)
stdio.h (POSIX):  Streams and Threads. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double floor (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float floorf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN floorfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx floorfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double floorl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double fma (double x, double y, double z)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fmaf (float x, float y, float z)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN fmafN (_FloatN x, _FloatN y, _FloatN z)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx fmafNx (_FloatNx x, _FloatNx y, _FloatNx z)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double fmal (long double x, long double y, long double z)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double fmax (double x, double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fmaxf (float x, float y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN fmaxfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx fmaxfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double fmaxl (long double x, long double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double fmaxmag (double x, double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fmaxmagf (float x, float y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN fmaxmagfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx fmaxmagfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double fmaxmagl (long double x, long double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * fmemopen (void *buf, size_t size, const char *opentype)
stdio.h (GNU):  String Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double fmin (double x, double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fminf (float x, float y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN fminfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx fminfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double fminl (long double x, long double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double fminmag (double x, double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fminmagf (float x, float y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN fminmagfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx fminmagfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double fminmagl (long double x, long double y)
math.h (ISO):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double fmod (double numerator, double denominator)
math.h (ISO):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fmodf (float numerator, float denominator)
math.h (ISO):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN fmodfN (_FloatN numerator, _FloatN denominator)
math.h (TS 18661-3:2015):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx fmodfNx (_FloatNx numerator, _FloatNx denominator)
math.h (TS 18661-3:2015):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double fmodl (long double numerator, long double denominator)
math.h (ISO):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fmtmsg (long int classification, const char *label, int severity, const char *text, const char *action, const char *tag)
fmtmsg.h (XPG):  Printing Formatted Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fmul (double x, double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fmull (long double x, long double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fnmatch (const char *pattern, const char *string, int flags)
fnmatch.h (POSIX.2):  Wildcard Matching. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * fopen (const char *filename, const char *opentype)
stdio.h (ISO):  Opening Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * fopen64 (const char *filename, const char *opentype)
stdio.h (Unix98):  Opening Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * fopencookie (void *cookie, const char *opentype, cookie_io_functions_t io-functions)
stdio.h (GNU):  Streams and Cookies. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t fork (void)
unistd.h (POSIX.1):  Creating a Process. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int forkpty (int *amaster, char *name, const struct termios *termp, const struct winsize *winp)
pty.h (BSD):  Pseudo-Terminal Pairs. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int fpathconf (int filedes, int parameter)
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fpclassify (float-type x)
math.h (ISO):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- fpos64_t
stdio.h (Unix98):  Portable Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- fpos_t
stdio.h (ISO):  Portable Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fprintf (FILE *stream, const char *template, …)
stdio.h (ISO):  Formatted Output Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fputc (int c, FILE *stream)
stdio.h (ISO):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fputc_unlocked (int c, FILE *stream)
stdio.h (POSIX):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fputs (const char *s, FILE *stream)
stdio.h (ISO):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fputs_unlocked (const char *s, FILE *stream)
stdio.h (GNU):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t fputwc (wchar_t wc, FILE *stream)
wchar.h (ISO):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t fputwc_unlocked (wchar_t wc, FILE *stream)
wchar.h (POSIX):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fputws (const wchar_t *ws, FILE *stream)
wchar.h (ISO):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fputws_unlocked (const wchar_t *ws, FILE *stream)
wchar.h (GNU):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t fread (void *data, size_t size, size_t count, FILE *stream)
stdio.h (ISO):  Block Input/Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t fread_unlocked (void *data, size_t size, size_t count, FILE *stream)
stdio.h (GNU):  Block Input/Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void free (void *ptr)
malloc.h (ISO):  Freeing after Malloc. 
stdlib.h (ISO):  Freeing after Malloc. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * freopen (const char *filename, const char *opentype, FILE *stream)
stdio.h (ISO):  Opening Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * freopen64 (const char *filename, const char *opentype, FILE *stream)
stdio.h (Unix98):  Opening Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double frexp (double value, int *exponent)
math.h (ISO):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float frexpf (float value, int *exponent)
math.h (ISO):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN frexpfN (_FloatN value, int *exponent)
math.h (TS 18661-3:2015):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx frexpfNx (_FloatNx value, int *exponent)
math.h (TS 18661-3:2015):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double frexpl (long double value, int *exponent)
math.h (ISO):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfp (double x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfpf (float x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfpfN (_FloatN x, int round, unsigned int width)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfpfNx (_FloatNx x, int round, unsigned int width)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfpl (long double x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfpx (double x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfpxf (float x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfpxfN (_FloatN x, int round, unsigned int width)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfpxfNx (_FloatNx x, int round, unsigned int width)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t fromfpxl (long double x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fscanf (FILE *stream, const char *template, …)
stdio.h (ISO):  Formatted Input Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fseek (FILE *stream, long int offset, int whence)
stdio.h (ISO):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fseeko (FILE *stream, off_t offset, int whence)
stdio.h (Unix98):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fseeko64 (FILE *stream, off64_t offset, int whence)
stdio.h (Unix98):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fsetpos (FILE *stream, const fpos_t *position)
stdio.h (ISO):  Portable Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fsetpos64 (FILE *stream, const fpos64_t *position)
stdio.h (Unix98):  Portable Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct fstab
fstab.h (BSD):  fstab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fstat (int filedes, struct stat *buf)
sys/stat.h (POSIX.1):  Reading Attributes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fstat64 (int filedes, struct stat64 *buf)
sys/stat.h (Unix98):  Reading Attributes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fsub (double x, double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float fsubl (long double x, long double y)
math.h (TS 18661-1:2014):  Misc FP Arithmetic. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fsync (int fildes)
unistd.h (POSIX):  Synchronizing I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int ftell (FILE *stream)
stdio.h (ISO):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- off_t ftello (FILE *stream)
stdio.h (Unix98):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- off64_t ftello64 (FILE *stream)
stdio.h (Unix98):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ftruncate (int fd, off_t length)
unistd.h (POSIX):  File Size. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ftruncate64 (int id, off64_t length)
unistd.h (Unix98):  File Size. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ftrylockfile (FILE *stream)
stdio.h (POSIX):  Streams and Threads. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ftw (const char *filename, __ftw_func_t func, int descriptors)
ftw.h (SVID):  Working with Directory Trees. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ftw64 (const char *filename, __ftw64_func_t func, int descriptors)
ftw.h (Unix98):  Working with Directory Trees. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void funlockfile (FILE *stream)
stdio.h (POSIX):  Streams and Threads. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int futimes (int fd, const struct timeval tvp[2])
sys/time.h (BSD):  File Times. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fwide (FILE *stream, int mode)
wchar.h (ISO):  Streams and I18N. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fwprintf (FILE *stream, const wchar_t *template, …)
wchar.h (ISO):  Formatted Output Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t fwrite (const void *data, size_t size, size_t count, FILE *stream)
stdio.h (ISO):  Block Input/Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t fwrite_unlocked (const void *data, size_t size, size_t count, FILE *stream)
stdio.h (GNU):  Block Input/Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int fwscanf (FILE *stream, const wchar_t *template, …)
wchar.h (ISO):  Formatted Input Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double gamma (double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float gammaf (float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double gammal (long double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * gcvt (double value, int ndigit, char *buf)
stdlib.h (SVID):  System V Number Conversion. 
stdlib.h (Unix98):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int get_avphys_pages (void)
sys/sysinfo.h (GNU):  Query Memory Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * get_current_dir_name (void)
unistd.h (GNU):  Working Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int get_nprocs (void)
sys/sysinfo.h (GNU):  Processor Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int get_nprocs_conf (void)
sys/sysinfo.h (GNU):  Processor Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int get_phys_pages (void)
sys/sysinfo.h (GNU):  Query Memory Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned long int getauxval (unsigned long int type)
sys/auxv.h (???):  Auxiliary Vector. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getc (FILE *stream)
stdio.h (ISO):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getc_unlocked (FILE *stream)
stdio.h (POSIX):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getchar (void)
stdio.h (ISO):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getchar_unlocked (void)
stdio.h (POSIX):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getcontext (ucontext_t *ucp)
ucontext.h (SVID):  System V contexts. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getcpu (unsigned int *cpu, unsigned int *node)
<sched.h> (Linux):  CPU Affinity. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * getcwd (char *buffer, size_t size)
unistd.h (POSIX.1):  Working Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct tm * getdate (const char *string)
time.h (Unix98):  General Time String Parsing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- getdate_err
time.h (Unix98):  General Time String Parsing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getdate_r (const char *string, struct tm *tp)
time.h (GNU):  General Time String Parsing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t getdelim (char **lineptr, size_t *n, int delimiter, FILE *stream)
stdio.h (GNU):  Line Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t getdents64 (int fd, void *buffer, size_t length)
dirent.h (Linux):  Low-level Directory Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getdomainnname (char *name, size_t length)
unistd.h (???):  Host Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- gid_t getegid (void)
unistd.h (POSIX.1):  Reading Persona. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getentropy (void *buffer, size_t length)
sys/random.h (GNU):  Unpredictable Bytes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * getenv (const char *name)
stdlib.h (ISO):  Environment Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uid_t geteuid (void)
unistd.h (POSIX.1):  Reading Persona. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct fstab * getfsent (void)
fstab.h (BSD):  fstab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct fstab * getfsfile (const char *name)
fstab.h (BSD):  fstab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct fstab * getfsspec (const char *name)
fstab.h (BSD):  fstab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- gid_t getgid (void)
unistd.h (POSIX.1):  Reading Persona. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct group * getgrent (void)
grp.h (SVID):  Scanning All Groups. 
grp.h (BSD):  Scanning All Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getgrent_r (struct group *result_buf, char *buffer, size_t buflen, struct group **result)
grp.h (GNU):  Scanning All Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct group * getgrgid (gid_t gid)
grp.h (POSIX.1):  Lookup Group. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getgrgid_r (gid_t gid, struct group *result_buf, char *buffer, size_t buflen, struct group **result)
grp.h (POSIX.1c):  Lookup Group. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct group * getgrnam (const char *name)
grp.h (SVID):  Lookup Group. 
grp.h (BSD):  Lookup Group. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getgrnam_r (const char *name, struct group *result_buf, char *buffer, size_t buflen, struct group **result)
grp.h (POSIX.1c):  Lookup Group. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getgrouplist (const char *user, gid_t group, gid_t *groups, int *ngroups)
grp.h (BSD):  Setting Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getgroups (int count, gid_t *groups)
unistd.h (POSIX.1):  Reading Persona. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct hostent * gethostbyaddr (const void *addr, socklen_t length, int format)
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int gethostbyaddr_r (const void *addr, socklen_t length, int format, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop)
netdb.h (GNU):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct hostent * gethostbyname (const char *name)
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct hostent * gethostbyname2 (const char *name, int af)
netdb.h (IPv6 Basic API):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int gethostbyname2_r (const char *name, int af, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop)
netdb.h (GNU):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int gethostbyname_r (const char *restrict name, struct hostent *restrict result_buf, char *restrict buf, size_t buflen, struct hostent **restrict result, int *restrict h_errnop)
netdb.h (GNU):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct hostent * gethostent (void)
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int gethostid (void)
unistd.h (BSD):  Host Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int gethostname (char *name, size_t size)
unistd.h (BSD):  Host Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getitimer (int which, struct itimerval *old)
sys/time.h (BSD):  Setting an Alarm. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t getline (char **lineptr, size_t *n, FILE *stream)
stdio.h (GNU):  Line Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getloadavg (double loadavg[], int nelem)
stdlib.h (BSD):  Processor Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * getlogin (void)
unistd.h (POSIX.1):  Who Logged In. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct mntent * getmntent (FILE *stream)
mntent.h (BSD):  mtab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct mntent * getmntent_r (FILE *stream, struct mntent *result, char *buffer, int bufsize)
mntent.h (BSD):  mtab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct netent * getnetbyaddr (uint32_t net, int type)
netdb.h (BSD):  Networks Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct netent * getnetbyname (const char *name)
netdb.h (BSD):  Networks Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct netent * getnetent (void)
netdb.h (BSD):  Networks Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getnetgrent (char **hostp, char **userp, char **domainp)
netdb.h (BSD):  Lookup Netgroup. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getnetgrent_r (char **hostp, char **userp, char **domainp, char *buffer, size_t buflen)
netdb.h (GNU):  Lookup Netgroup. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getopt (int argc, char *const *argv, const char *options)
unistd.h (POSIX.2):  Using Getopt. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getopt_long (int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *indexptr)
getopt.h (GNU):  Getopt Long Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getopt_long_only (int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *indexptr)
getopt.h (GNU):  Getopt Long Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getpagesize (void)
unistd.h (BSD):  Query Memory Parameters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * getpass (const char *prompt)
unistd.h (BSD):  getpass. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double getpayload (const double *x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float getpayloadf (const float *x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN getpayloadfN (const _FloatN *x)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx getpayloadfNx (const _FloatNx *x)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double getpayloadl (const long double *x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getpeername (int socket, struct sockaddr *addr, socklen_t *length-ptr)
sys/socket.h (BSD):  Who is Connected. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getpgid (pid_t pid)
unistd.h (POSIX.1):  Process Group Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t getpgrp (void)
unistd.h (POSIX.1):  Process Group Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t getpid (void)
unistd.h (POSIX.1):  Process Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t getppid (void)
unistd.h (POSIX.1):  Process Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getpriority (int class, int id)
sys/resource.h (BSD):  Traditional Scheduling Functions. 
sys/resource.h (POSIX):  Traditional Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct protoent * getprotobyname (const char *name)
netdb.h (BSD):  Protocols Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct protoent * getprotobynumber (int protocol)
netdb.h (BSD):  Protocols Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct protoent * getprotoent (void)
netdb.h (BSD):  Protocols Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getpt (void)
stdlib.h (GNU):  Allocation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct passwd * getpwent (void)
pwd.h (POSIX.1):  Scanning All Users. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getpwent_r (struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result)
pwd.h (GNU):  Scanning All Users. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct passwd * getpwnam (const char *name)
pwd.h (POSIX.1):  Lookup User. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getpwnam_r (const char *name, struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result)
pwd.h (POSIX.1c):  Lookup User. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct passwd * getpwuid (uid_t uid)
pwd.h (POSIX.1):  Lookup User. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getpwuid_r (uid_t uid, struct passwd *result_buf, char *buffer, size_t buflen, struct passwd **result)
pwd.h (POSIX.1c):  Lookup User. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t getrandom (void *buffer, size_t length, unsigned int flags)
sys/random.h (GNU):  Unpredictable Bytes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getrlimit (int resource, struct rlimit *rlp)
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getrlimit64 (int resource, struct rlimit64 *rlp)
sys/resource.h (Unix98):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getrusage (int processes, struct rusage *rusage)
sys/resource.h (BSD):  Resource Usage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * gets (char *s)
stdio.h (ISO):  Line Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct servent * getservbyname (const char *name, const char *proto)
netdb.h (BSD):  Services Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct servent * getservbyport (int port, const char *proto)
netdb.h (BSD):  Services Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct servent * getservent (void)
netdb.h (BSD):  Services Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t getsid (pid_t pid)
unistd.h (SVID):  Process Group Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getsockname (int socket, struct sockaddr *addr, socklen_t *length-ptr)
sys/socket.h (BSD):  Reading Address. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getsockopt (int socket, int level, int optname, void *optval, socklen_t *optlen-ptr)
sys/socket.h (BSD):  Socket Option Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getsubopt (char **optionp, char *const *tokens, char **valuep)
stdlib.h (???):  Suboptions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * gettext (const char *msgid)
libintl.h (GNU):  Translation with gettext. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t gettid (void)
unistd.h (Linux):  Process Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int gettimeofday (struct timeval *tp, void *tzp)
sys/time.h (BSD):  Getting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uid_t getuid (void)
unistd.h (POSIX.1):  Reading Persona. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- mode_t getumask (void)
sys/stat.h (GNU):  Setting Permissions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utmp * getutent (void)
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getutent_r (struct utmp *buffer, struct utmp **result)
utmp.h (GNU):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utmp * getutid (const struct utmp *id)
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getutid_r (const struct utmp *id, struct utmp *buffer, struct utmp **result)
utmp.h (GNU):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utmp * getutline (const struct utmp *line)
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getutline_r (const struct utmp *line, struct utmp *buffer, struct utmp **result)
utmp.h (GNU):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getutmp (const struct utmpx *utmpx, struct utmp *utmp)
utmp.h (GNU):  XPG Functions. 
utmpx.h (GNU):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getutmpx (const struct utmp *utmp, struct utmpx *utmpx)
utmp.h (GNU):  XPG Functions. 
utmpx.h (GNU):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utmpx * getutxent (void)
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utmpx * getutxid (const struct utmpx *id)
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utmpx * getutxline (const struct utmpx *line)
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int getw (FILE *stream)
stdio.h (SVID):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t getwc (FILE *stream)
wchar.h (ISO):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t getwc_unlocked (FILE *stream)
wchar.h (GNU):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t getwchar (void)
wchar.h (ISO):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t getwchar_unlocked (void)
wchar.h (GNU):  Character Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * getwd (char *buffer)
unistd.h (BSD):  Working Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- gid_t
sys/types.h (POSIX.1):  Reading Persona. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int glob (const char *pattern, int flags, int (*errfunc) (const char *filename, int error-code), glob_t *vector-ptr)
glob.h (POSIX.2):  Calling Glob. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int glob64 (const char *pattern, int flags, int (*errfunc) (const char *filename, int error-code), glob64_t *vector-ptr)
glob.h (GNU):  Calling Glob. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- glob64_t
glob.h (GNU):  Calling Glob. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- glob_t
glob.h (POSIX.2):  Calling Glob. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void globfree (glob_t *pglob)
glob.h (POSIX.2):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void globfree64 (glob64_t *pglob)
glob.h (GNU):  More Flags for Globbing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct tm * gmtime (const time_t *time)
time.h (ISO):  Broken-down Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct tm * gmtime_r (const time_t *time, struct tm *resultp)
time.h (POSIX.1c):  Broken-down Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int grantpt (int filedes)
stdlib.h (SVID):  Allocation. 
stdlib.h (XPG4.2):  Allocation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct group
grp.h (POSIX.1):  Group Data Structure. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int gsignal (int signum)
signal.h (SVID):  Signaling Yourself. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int gtty (int filedes, struct sgttyb *attributes)
sgtty.h (BSD):  BSD Terminal Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * hasmntopt (const struct mntent *mnt, const char *opt)
mntent.h (BSD):  mtab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int hcreate (size_t nel)
search.h (SVID):  Hash Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int hcreate_r (size_t nel, struct hsearch_data *htab)
search.h (GNU):  Hash Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void hdestroy (void)
search.h (SVID):  Hash Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void hdestroy_r (struct hsearch_data *htab)
search.h (GNU):  Hash Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct hostent
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ENTRY * hsearch (ENTRY item, ACTION action)
search.h (SVID):  Hash Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int hsearch_r (ENTRY item, ACTION action, ENTRY **retval, struct hsearch_data *htab)
search.h (GNU):  Hash Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t htonl (uint32_t hostlong)
netinet/in.h (BSD):  Byte Order. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint16_t htons (uint16_t hostshort)
netinet/in.h (BSD):  Byte Order. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double hypot (double x, double y)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float hypotf (float x, float y)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN hypotfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx hypotfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double hypotl (long double x, long double y)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t iconv (iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)
iconv.h (XPG2):  Generic Conversion Interface. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iconv_close (iconv_t cd)
iconv.h (XPG2):  Generic Conversion Interface. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- iconv_t iconv_open (const char *tocode, const char *fromcode)
iconv.h (XPG2):  Generic Conversion Interface. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- iconv_t
iconv.h (XPG2):  Generic Conversion Interface. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void if_freenameindex (struct if_nameindex *ptr)
net/if.h (IPv6 basic API):  Interface Naming. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * if_indextoname (unsigned int ifindex, char *ifname)
net/if.h (IPv6 basic API):  Interface Naming. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct if_nameindex
net/if.h (IPv6 basic API):  Interface Naming. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct if_nameindex * if_nameindex (void)
net/if.h (IPv6 basic API):  Interface Naming. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned int if_nametoindex (const char *ifname)
net/if.h (IPv6 basic API):  Interface Naming. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ilogb (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ilogbf (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ilogbfN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ilogbfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ilogbl (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t imaxabs (intmax_t number)
inttypes.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- imaxdiv_t imaxdiv (intmax_t numerator, intmax_t denominator)
inttypes.h (ISO):  Integer Division. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- imaxdiv_t
inttypes.h (ISO):  Integer Division. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct in6_addr
netinet/in.h (IPv6 basic API):  Host Address Data Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct in6_addr in6addr_any
netinet/in.h (IPv6 basic API):  Host Address Data Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct in6_addr in6addr_loopback
netinet/in.h (IPv6 basic API):  Host Address Data Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct in_addr
netinet/in.h (BSD):  Host Address Data Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * index (const char *string, int c)
string.h (BSD):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t inet_addr (const char *name)
arpa/inet.h (BSD):  Host Address Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int inet_aton (const char *name, struct in_addr *addr)
arpa/inet.h (BSD):  Host Address Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t inet_lnaof (struct in_addr addr)
arpa/inet.h (BSD):  Host Address Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct in_addr inet_makeaddr (uint32_t net, uint32_t local)
arpa/inet.h (BSD):  Host Address Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t inet_netof (struct in_addr addr)
arpa/inet.h (BSD):  Host Address Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t inet_network (const char *name)
arpa/inet.h (BSD):  Host Address Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * inet_ntoa (struct in_addr addr)
arpa/inet.h (BSD):  Host Address Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- const char * inet_ntop (int af, const void *cp, char *buf, socklen_t len)
arpa/inet.h (IPv6 basic API):  Host Address Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int inet_pton (int af, const char *cp, void *buf)
arpa/inet.h (IPv6 basic API):  Host Address Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int initgroups (const char *user, gid_t group)
grp.h (BSD):  Setting Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * initstate (unsigned int seed, char *state, size_t size)
stdlib.h (BSD):  BSD Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int initstate_r (unsigned int seed, char *restrict statebuf, size_t statelen, struct random_data *restrict buf)
stdlib.h (GNU):  BSD Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int innetgr (const char *netgroup, const char *host, const char *user, const char *domain)
netdb.h (BSD):  Netgroup Membership. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ino64_t
sys/types.h (Unix98):  Attribute Meanings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ino_t
sys/types.h (POSIX.1):  Attribute Meanings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ioctl (int filedes, int command, …)
sys/ioctl.h (BSD):  IOCTLs. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct iovec
sys/uio.h (BSD):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isalnum (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isalpha (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isascii (int c)
ctype.h (SVID):  Classification of Characters. 
ctype.h (BSD):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isatty (int filedes)
unistd.h (POSIX.1):  Is It a Terminal. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isblank (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iscanonical (float-type x)
math.h (ISO):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iscntrl (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isdigit (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iseqsig (real-floating x, real-floating y)
math.h (ISO):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isfinite (float-type x)
math.h (ISO):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isgraph (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isgreater (real-floating x, real-floating y)
math.h (ISO):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isgreaterequal (real-floating x, real-floating y)
math.h (ISO):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isinf (double x)
math.h (BSD):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isinff (float x)
math.h (BSD):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isinfl (long double x)
math.h (BSD):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isless (real-floating x, real-floating y)
math.h (ISO):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int islessequal (real-floating x, real-floating y)
math.h (ISO):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int islessgreater (real-floating x, real-floating y)
math.h (ISO):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int islower (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isnan (float-type x)
math.h (ISO):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isnan (double x)
math.h (BSD):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isnanf (float x)
math.h (BSD):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isnanl (long double x)
math.h (BSD):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isnormal (float-type x)
math.h (ISO):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isprint (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ispunct (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int issignaling (float-type x)
math.h (ISO):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isspace (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int issubnormal (float-type x)
math.h (ISO):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isunordered (real-floating x, real-floating y)
math.h (ISO):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isupper (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswalnum (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswalpha (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswblank (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswcntrl (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswctype (wint_t wc, wctype_t desc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswdigit (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswgraph (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswlower (wint_t wc)
ctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswprint (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswpunct (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswspace (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswupper (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iswxdigit (wint_t wc)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int isxdigit (int c)
ctype.h (ISO):  Classification of Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int iszero (float-type x)
math.h (ISO):  Floating Point Classes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct itimerval
sys/time.h (BSD):  Setting an Alarm. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double j0 (double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float j0f (float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN j0fN (_FloatN x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx j0fNx (_FloatNx x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double j0l (long double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double j1 (double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float j1f (float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN j1fN (_FloatN x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx j1fNx (_FloatNx x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double j1l (long double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- jmp_buf
setjmp.h (ISO):  Non-Local Details. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double jn (int n, double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float jnf (int n, float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN jnfN (int n, _FloatN x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx jnfNx (int n, _FloatNx x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double jnl (int n, long double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int jrand48 (unsigned short int xsubi[3])
stdlib.h (SVID):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int jrand48_r (unsigned short int xsubi[3], struct drand48_data *buffer, long int *result)
stdlib.h (GNU):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int kill (pid_t pid, int signum)
signal.h (POSIX.1):  Signaling Another Process. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int killpg (int pgid, int signum)
signal.h (BSD):  Signaling Another Process. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * l64a (long int n)
stdlib.h (XPG):  Encode Binary Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int labs (long int number)
stdlib.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void lcong48 (unsigned short int param[7])
stdlib.h (SVID):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int lcong48_r (unsigned short int param[7], struct drand48_data *buffer)
stdlib.h (GNU):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct lconv
locale.h (ISO):  The Lame Way to Locale Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double ldexp (double value, int exponent)
math.h (ISO):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float ldexpf (float value, int exponent)
math.h (ISO):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN ldexpfN (_FloatN value, int exponent)
math.h (TS 18661-3:2015):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx ldexpfNx (_FloatNx value, int exponent)
math.h (TS 18661-3:2015):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double ldexpl (long double value, int exponent)
math.h (ISO):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ldiv_t ldiv (long int numerator, long int denominator)
stdlib.h (ISO):  Integer Division. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ldiv_t
stdlib.h (ISO):  Integer Division. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * lfind (const void *key, const void *base, size_t *nmemb, size_t size, comparison_fn_t compar)
search.h (SVID):  Array Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double lgamma (double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double lgamma_r (double x, int *signp)
math.h (XPG):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float lgammaf (float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN lgammafN (_FloatN x)
math.h (TS 18661-3:2015):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN lgammafN_r (_FloatN x, int *signp)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx lgammafNx (_FloatNx x)
math.h (TS 18661-3:2015):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx lgammafNx_r (_FloatNx x, int *signp)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float lgammaf_r (float x, int *signp)
math.h (XPG):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double lgammal (long double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double lgammal_r (long double x, int *signp)
math.h (XPG):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct linger
sys/socket.h (BSD):  Socket-Level Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int link (const char *oldname, const char *newname)
unistd.h (POSIX.1):  Hard Links. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int linkat (int oldfd, const char *oldname, int newfd, const char *newname, int flags)
unistd.h (POSIX.1):  Hard Links. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int lio_listio (int mode, struct aiocb *const list[], int nent, struct sigevent *sig)
aio.h (POSIX.1b):  Asynchronous Reads/Writes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int lio_listio64 (int mode, struct aiocb64 *const list[], int nent, struct sigevent *sig)
aio.h (Unix98):  Asynchronous Reads/Writes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int listen (int socket, int n)
sys/socket.h (BSD):  Listening. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llabs (long long int number)
stdlib.h (ISO):  Absolute Value. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- lldiv_t lldiv (long long int numerator, long long int denominator)
stdlib.h (ISO):  Integer Division. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- lldiv_t
stdlib.h (ISO):  Integer Division. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int llogb (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int llogbf (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int llogbfN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int llogbfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int llogbl (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llrint (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llrintf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llrintfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llrintfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llrintl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llround (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llroundf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llroundfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llroundfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int llroundl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct lconv * localeconv (void)
locale.h (ISO):  The Lame Way to Locale Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct tm * localtime (const time_t *time)
time.h (ISO):  Broken-down Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct tm * localtime_r (const time_t *time, struct tm *resultp)
time.h (POSIX.1c):  Broken-down Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double log (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double log10 (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float log10f (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN log10fN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx log10fNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double log10l (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double log1p (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float log1pf (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN log1pfN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx log1pfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double log1pl (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double log2 (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float log2f (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN log2fN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx log2fNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double log2l (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double logb (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float logbf (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN logbfN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx logbfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double logbl (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float logf (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN logfN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx logfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void login (const struct utmp *entry)
utmp.h (BSD):  Logging In and Out. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int login_tty (int filedes)
utmp.h (BSD):  Logging In and Out. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double logl (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int logout (const char *ut_line)
utmp.h (BSD):  Logging In and Out. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void logwtmp (const char *ut_line, const char *ut_name, const char *ut_host)
utmp.h (BSD):  Logging In and Out. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void longjmp (jmp_buf state, int value)
setjmp.h (ISO):  Non-Local Details. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lrand48 (void)
stdlib.h (SVID):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int lrand48_r (struct drand48_data *buffer, long int *result)
stdlib.h (GNU):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lrint (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lrintf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lrintfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lrintfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lrintl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lround (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lroundf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lroundfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lroundfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int lroundl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * lsearch (const void *key, void *base, size_t *nmemb, size_t size, comparison_fn_t compar)
search.h (SVID):  Array Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- off_t lseek (int filedes, off_t offset, int whence)
unistd.h (POSIX.1):  File Position Primitive. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- off64_t lseek64 (int filedes, off64_t offset, int whence)
unistd.h (Unix98):  File Position Primitive. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int lstat (const char *filename, struct stat *buf)
sys/stat.h (BSD):  Reading Attributes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int lstat64 (const char *filename, struct stat64 *buf)
sys/stat.h (Unix98):  Reading Attributes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int lutimes (const char *filename, const struct timeval tvp[2])
sys/time.h (BSD):  File Times. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int madvise (void *addr, size_t length, int advice)
sys/mman.h (POSIX):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void makecontext (ucontext_t *ucp, void (*func) (void), int argc, …)
ucontext.h (SVID):  System V contexts. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct mallinfo2
malloc.h (GNU):  Statistics of Malloc. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct mallinfo2 mallinfo2 (void)
malloc.h (SVID):  Statistics of Malloc. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * malloc (size_t size)
malloc.h (ISO):  Basic Allocation. 
stdlib.h (ISO):  Basic Allocation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mblen (const char *string, size_t size)
stdlib.h (ISO):  Non-reentrant Character Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t mbrlen (const char *restrict s, size_t n, mbstate_t *ps)
wchar.h (ISO):  Converting a Character. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t mbrtowc (wchar_t *restrict pwc, const char *restrict s, size_t n, mbstate_t *restrict ps)
wchar.h (ISO):  Converting a Character. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mbsinit (const mbstate_t *ps)
wchar.h (ISO):  Keeping the state. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t mbsnrtowcs (wchar_t *restrict dst, const char **restrict src, size_t nmc, size_t len, mbstate_t *restrict ps)
wchar.h (GNU):  Converting Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t mbsrtowcs (wchar_t *restrict dst, const char **restrict src, size_t len, mbstate_t *restrict ps)
wchar.h (ISO):  Converting Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- mbstate_t
wchar.h (ISO):  Keeping the state. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t mbstowcs (wchar_t *wstring, const char *string, size_t size)
stdlib.h (ISO):  Non-reentrant String Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mbtowc (wchar_t *restrict result, const char *restrict string, size_t size)
stdlib.h (ISO):  Non-reentrant Character Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mcheck (void (*abortfn) (enum mcheck_status status))
mcheck.h (GNU):  Heap Consistency Checking. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * memalign (size_t boundary, size_t size)
malloc.h (BSD):  Aligned Memory Blocks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * memccpy (void *restrict to, const void *restrict from, int c, size_t size)
string.h (SVID):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * memchr (const void *block, int c, size_t size)
string.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int memcmp (const void *a1, const void *a2, size_t size)
string.h (ISO):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * memcpy (void *restrict to, const void *restrict from, size_t size)
string.h (ISO):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int memfd_create (const char *name, unsigned int flags)
sys/mman.h (Linux):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * memfrob (void *mem, size_t length)
string.h (GNU):  Obfuscating Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * memmem (const void *haystack, size_t haystack-len,const void *needle, size_t needle-len)
string.h (GNU):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * memmove (void *to, const void *from, size_t size)
string.h (ISO):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * mempcpy (void *restrict to, const void *restrict from, size_t size)
string.h (GNU):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * memrchr (const void *block, int c, size_t size)
string.h (GNU):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * memset (void *block, int c, size_t size)
string.h (ISO):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mkdir (const char *filename, mode_t mode)
sys/stat.h (POSIX.1):  Creating Directories. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * mkdtemp (char *template)
stdlib.h (BSD):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mkfifo (const char *filename, mode_t mode)
sys/stat.h (POSIX.1):  FIFO Special Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mknod (const char *filename, mode_t mode, dev_t dev)
sys/stat.h (BSD):  Making Special Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mkstemp (char *template)
stdlib.h (BSD):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * mktemp (char *template)
stdlib.h (Unix):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- time_t mktime (struct tm *brokentime)
time.h (ISO):  Broken-down Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mlock (const void *addr, size_t len)
sys/mman.h (POSIX.1b):  Page Lock Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mlock2 (const void *addr, size_t len, unsigned int flags)
sys/mman.h (Linux):  Page Lock Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mlockall (int flags)
sys/mman.h (POSIX.1b):  Page Lock Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * mmap (void *address, size_t length, int protect, int flags, int filedes, off_t offset)
sys/mman.h (POSIX):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * mmap64 (void *address, size_t length, int protect, int flags, int filedes, off64_t offset)
sys/mman.h (LFS):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct mntent
mntent.h (BSD):  mtab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- mode_t
sys/types.h (POSIX.1):  Attribute Meanings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double modf (double value, double *integer-part)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float modff (float value, float *integer-part)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN modffN (_FloatN value, _FloatN *integer-part)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx modffNx (_FloatNx value, _FloatNx *integer-part)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double modfl (long double value, long double *integer-part)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mount (const char *special_file, const char *dir, const char *fstype, unsigned long int options, const void *data)
sys/mount.h (SVID):  Mount-Unmount-Remount. 
sys/mount.h (BSD):  Mount-Unmount-Remount. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mprotect (void *address, size_t length, int protection)
sys/mman.h (POSIX):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int mrand48 (void)
stdlib.h (SVID):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mrand48_r (struct drand48_data *buffer, long int *result)
stdlib.h (GNU):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * mremap (void *address, size_t length, size_t new_length, int flag)
sys/mman.h (GNU):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int msync (void *address, size_t length, int flags)
sys/mman.h (POSIX):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void mtrace (void)
mcheck.h (GNU):  Tracing malloc. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void mtx_destroy (mtx_t *mutex)
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mtx_init (mtx_t *mutex, int type)
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mtx_lock (mtx_t *mutex)
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- mtx_plain
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- mtx_recursive
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- mtx_t
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- mtx_timed
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mtx_timedlock (mtx_t *restrict mutex, const struct timespec *restrict time_point)
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mtx_trylock (mtx_t *mutex)
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int mtx_unlock (mtx_t *mutex)
threads.h (C11):  ISO C Mutexes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int munlock (const void *addr, size_t len)
sys/mman.h (POSIX.1b):  Page Lock Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int munlockall (void)
sys/mman.h (POSIX.1b):  Page Lock Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int munmap (void *addr, size_t length)
sys/mman.h (POSIX):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void muntrace (void)
mcheck.h (GNU):  Tracing malloc. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double nan (const char *tagp)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float nanf (const char *tagp)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN nanfN (const char *tagp)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx nanfNx (const char *tagp)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double nanl (const char *tagp)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int nanosleep (const struct timespec *requested_time, struct timespec *remaining)
time.h (POSIX.1):  Sleeping. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double nearbyint (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float nearbyintf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN nearbyintfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx nearbyintfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double nearbyintl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct netent
netdb.h (BSD):  Networks Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double nextafter (double x, double y)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float nextafterf (float x, float y)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN nextafterfN (_FloatN x, _FloatN y)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx nextafterfNx (_FloatNx x, _FloatNx y)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double nextafterl (long double x, long double y)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double nextdown (double x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float nextdownf (float x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN nextdownfN (_FloatN x)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx nextdownfNx (_FloatNx x)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double nextdownl (long double x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double nexttoward (double x, long double y)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float nexttowardf (float x, long double y)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double nexttowardl (long double x, long double y)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double nextup (double x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float nextupf (float x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN nextupfN (_FloatN x)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx nextupfNx (_FloatNx x)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double nextupl (long double x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int nftw (const char *filename, __nftw_func_t func, int descriptors, int flag)
ftw.h (XPG4.2):  Working with Directory Trees. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int nftw64 (const char *filename, __nftw64_func_t func, int descriptors, int flag)
ftw.h (Unix98):  Working with Directory Trees. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * ngettext (const char *msgid1, const char *msgid2, unsigned long int n)
libintl.h (GNU):  Advanced gettext functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int nice (int increment)
unistd.h (BSD):  Traditional Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * nl_langinfo (nl_item item)
langinfo.h (XOPEN):  The Elegant and Fast Way. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- nlink_t
sys/types.h (POSIX.1):  Attribute Meanings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int nrand48 (unsigned short int xsubi[3])
stdlib.h (SVID):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int nrand48_r (unsigned short int xsubi[3], struct drand48_data *buffer, long int *result)
stdlib.h (GNU):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint32_t ntohl (uint32_t netlong)
netinet/in.h (BSD):  Byte Order. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uint16_t ntohs (uint16_t netshort)
netinet/in.h (BSD):  Byte Order. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ntp_adjtime (struct timex *tptr)
sys/timex.h (GNU):  Setting and Adjusting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ntp_gettime (struct ntptimeval *tptr)
sys/timex.h (GNU):  Setting and Adjusting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct obstack
obstack.h (GNU):  Creating Obstacks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_1grow (struct obstack *obstack-ptr, char c)
obstack.h (GNU):  Growing Objects. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_1grow_fast (struct obstack *obstack-ptr, char c)
obstack.h (GNU):  Extra Fast Growing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int obstack_alignment_mask (struct obstack *obstack-ptr)
obstack.h (GNU):  Obstacks Data Alignment. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * obstack_alloc (struct obstack *obstack-ptr, int size)
obstack.h (GNU):  Allocation in an Obstack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- obstack_alloc_failed_handler
obstack.h (GNU):  Preparing for Obstacks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * obstack_base (struct obstack *obstack-ptr)
obstack.h (GNU):  Status of an Obstack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_blank (struct obstack *obstack-ptr, int size)
obstack.h (GNU):  Growing Objects. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_blank_fast (struct obstack *obstack-ptr, int size)
obstack.h (GNU):  Extra Fast Growing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int obstack_chunk_size (struct obstack *obstack-ptr)
obstack.h (GNU):  Obstack Chunks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * obstack_copy (struct obstack *obstack-ptr, void *address, int size)
obstack.h (GNU):  Allocation in an Obstack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * obstack_copy0 (struct obstack *obstack-ptr, void *address, int size)
obstack.h (GNU):  Allocation in an Obstack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * obstack_finish (struct obstack *obstack-ptr)
obstack.h (GNU):  Growing Objects. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_free (struct obstack *obstack-ptr, void *object)
obstack.h (GNU):  Freeing Obstack Objects. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_grow (struct obstack *obstack-ptr, void *data, int size)
obstack.h (GNU):  Growing Objects. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_grow0 (struct obstack *obstack-ptr, void *data, int size)
obstack.h (GNU):  Growing Objects. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int obstack_init (struct obstack *obstack-ptr)
obstack.h (GNU):  Preparing for Obstacks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_int_grow (struct obstack *obstack-ptr, int data)
obstack.h (GNU):  Growing Objects. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_int_grow_fast (struct obstack *obstack-ptr, int data)
obstack.h (GNU):  Extra Fast Growing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * obstack_next_free (struct obstack *obstack-ptr)
obstack.h (GNU):  Status of an Obstack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int obstack_object_size (struct obstack *obstack-ptr)
obstack.h (GNU):  Growing Objects. 
obstack.h (GNU):  Status of an Obstack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int obstack_printf (struct obstack *obstack, const char *template, …)
stdio.h (GNU):  Dynamic Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_ptr_grow (struct obstack *obstack-ptr, void *data)
obstack.h (GNU):  Growing Objects. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void obstack_ptr_grow_fast (struct obstack *obstack-ptr, void *data)
obstack.h (GNU):  Extra Fast Growing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int obstack_room (struct obstack *obstack-ptr)
obstack.h (GNU):  Extra Fast Growing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int obstack_vprintf (struct obstack *obstack, const char *template, va_list ap)
stdio.h (GNU):  Variable Arguments Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- off64_t
sys/types.h (Unix98):  File Position Primitive. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- off_t
sys/types.h (POSIX.1):  File Position Primitive. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t offsetof (type, member)
stddef.h (ISO):  Structure Measurement. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int on_exit (void (*function)(int status, void *arg), void *arg)
stdlib.h (SunOS):  Cleanups on Exit. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- once_flag
threads.h (C11):  Call Once. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int open (const char *filename, int flags[, mode_t mode])
fcntl.h (POSIX.1):  Opening and Closing Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int open64 (const char *filename, int flags[, mode_t mode])
fcntl.h (Unix98):  Opening and Closing Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * open_memstream (char **ptr, size_t *sizeloc)
stdio.h (GNU):  String Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- DIR * opendir (const char *dirname)
dirent.h (POSIX.1):  Opening a Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void openlog (const char *ident, int option, int facility)
syslog.h (BSD):  openlog. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int openpty (int *amaster, int *aslave, char *name, const struct termios *termp, const struct winsize *winp)
pty.h (BSD):  Pseudo-Terminal Pairs. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * optarg
unistd.h (POSIX.2):  Using Getopt. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int opterr
unistd.h (POSIX.2):  Using Getopt. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int optind
unistd.h (POSIX.2):  Using Getopt. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct option
getopt.h (GNU):  Getopt Long Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int optopt
unistd.h (POSIX.2):  Using Getopt. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t parse_printf_format (const char *template, size_t n, int *argtypes)
printf.h (GNU):  Parsing a Template String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct passwd
pwd.h (POSIX.1):  User Data Structure. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int pathconf (const char *filename, int parameter)
unistd.h (POSIX.1):  Pathconf. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pause (void)
unistd.h (POSIX.1):  Using Pause. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pclose (FILE *stream)
stdio.h (POSIX.2):  Pipe to a Subprocess. 
stdio.h (SVID):  Pipe to a Subprocess. 
stdio.h (BSD):  Pipe to a Subprocess. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void perror (const char *message)
stdio.h (ISO):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t
sys/types.h (POSIX.1):  Process Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pipe (int filedes[2])
unistd.h (POSIX.1):  Creating a Pipe. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pkey_alloc (unsigned int flags, unsigned int restrictions)
sys/mman.h (Linux):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pkey_free (int key)
sys/mman.h (Linux):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pkey_get (int key)
sys/mman.h (Linux):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pkey_mprotect (void *address, size_t length, int protection, int key)
sys/mman.h (Linux):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pkey_set (int key, unsigned int rights)
sys/mman.h (Linux):  Memory Protection. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * popen (const char *command, const char *mode)
stdio.h (POSIX.2):  Pipe to a Subprocess. 
stdio.h (SVID):  Pipe to a Subprocess. 
stdio.h (BSD):  Pipe to a Subprocess. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int posix_memalign (void **memptr, size_t alignment, size_t size)
stdlib.h (POSIX):  Aligned Memory Blocks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double pow (double base, double power)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float powf (float base, float power)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN powfN (_FloatN base, _FloatN power)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx powfNx (_FloatNx base, _FloatNx power)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double powl (long double base, long double power)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t pread (int filedes, void *buffer, size_t size, off_t offset)
unistd.h (Unix98):  I/O Primitives. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t pread64 (int filedes, void *buffer, size_t size, off64_t offset)
unistd.h (Unix98):  I/O Primitives. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t preadv (int fd, const struct iovec *iov, int iovcnt, off_t offset)
sys/uio.h (BSD):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t preadv2 (int fd, const struct iovec *iov, int iovcnt, off_t offset, int flags)
sys/uio.h (GNU):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t preadv64 (int fd, const struct iovec *iov, int iovcnt, off64_t offset)
unistd.h (BSD):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t preadv64v2 (int fd, const struct iovec *iov, int iovcnt, off64_t offset, int flags)
unistd.h (GNU):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int printf (const char *template, …)
stdio.h (ISO):  Formatted Output Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- printf_arginfo_function
printf.h (GNU):  Defining the Output Handler. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- printf_function
printf.h (GNU):  Defining the Output Handler. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct printf_info
printf.h (GNU):  Conversion Specifier Options. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int printf_size (FILE *fp, const struct printf_info *info, const void *const *args)
printf.h (GNU):  Predefined Printf Handlers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int printf_size_info (const struct printf_info *info, size_t n, int *argtypes)
printf.h (GNU):  Predefined Printf Handlers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * program_invocation_name
errno.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * program_invocation_short_name
errno.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct protoent
netdb.h (BSD):  Protocols Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void psignal (int signum, const char *message)
signal.h (BSD):  Signal Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pthread_attr_getsigmask_np (const pthread_attr_t *attr, sigset_t *sigmask)
pthread.h (GNU):  Initial Thread Signal Mask. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pthread_attr_setsigmask_np (pthread_attr_t *attr, const sigset_t *sigmask)
pthread.h (GNU):  Initial Thread Signal Mask. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pthread_getattr_default_np (pthread_attr_t *attr)
pthread.h (GNU):  Default Thread Attributes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void *pthread_getspecific (pthread_key_t key)
pthread.h (POSIX):  Thread-specific Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pthread_key_create (pthread_key_t *key, void (*destructor)(void*))
pthread.h (POSIX):  Thread-specific Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pthread_key_delete (pthread_key_t key)
pthread.h (POSIX):  Thread-specific Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pthread_setattr_default_np (pthread_attr_t *attr)
pthread.h (GNU):  Default Thread Attributes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int pthread_setspecific (pthread_key_t key, const void *value)
pthread.h (POSIX):  Thread-specific Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ptrdiff_t
stddef.h (ISO):  Important Data Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * ptsname (int filedes)
stdlib.h (SVID):  Allocation. 
stdlib.h (XPG4.2):  Allocation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ptsname_r (int filedes, char *buf, size_t len)
stdlib.h (GNU):  Allocation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int putc (int c, FILE *stream)
stdio.h (ISO):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int putc_unlocked (int c, FILE *stream)
stdio.h (POSIX):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int putchar (int c)
stdio.h (ISO):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int putchar_unlocked (int c)
stdio.h (POSIX):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int putenv (char *string)
stdlib.h (SVID):  Environment Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int putpwent (const struct passwd *p, FILE *stream)
pwd.h (SVID):  Writing a User Entry. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int puts (const char *s)
stdio.h (ISO):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utmp * pututline (const struct utmp *utmp)
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utmpx * pututxline (const struct utmpx *utmp)
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int putw (int w, FILE *stream)
stdio.h (SVID):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t putwc (wchar_t wc, FILE *stream)
wchar.h (ISO):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t putwc_unlocked (wchar_t wc, FILE *stream)
wchar.h (GNU):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t putwchar (wchar_t wc)
wchar.h (ISO):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t putwchar_unlocked (wchar_t wc)
wchar.h (GNU):  Simple Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t pwrite (int filedes, const void *buffer, size_t size, off_t offset)
unistd.h (Unix98):  I/O Primitives. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t pwrite64 (int filedes, const void *buffer, size_t size, off64_t offset)
unistd.h (Unix98):  I/O Primitives. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t pwritev (int fd, const struct iovec *iov, int iovcnt, off_t offset)
sys/uio.h (BSD):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t pwritev2 (int fd, const struct iovec *iov, int iovcnt, off_t offset, int flags)
sys/uio.h (GNU):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t pwritev64 (int fd, const struct iovec *iov, int iovcnt, off64_t offset)
unistd.h (BSD):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t pwritev64v2 (int fd, const struct iovec *iov, int iovcnt, off64_t offset, int flags)
unistd.h (GNU):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * qecvt (long double value, int ndigit, int *decpt, int *neg)
stdlib.h (GNU):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int qecvt_r (long double value, int ndigit, int *decpt, int *neg, char *buf, size_t len)
stdlib.h (GNU):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * qfcvt (long double value, int ndigit, int *decpt, int *neg)
stdlib.h (GNU):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int qfcvt_r (long double value, int ndigit, int *decpt, int *neg, char *buf, size_t len)
stdlib.h (GNU):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * qgcvt (long double value, int ndigit, char *buf)
stdlib.h (GNU):  System V Number Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void qsort (void *array, size_t count, size_t size, comparison_fn_t compare)
stdlib.h (ISO):  Array Sort Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int raise (int signum)
signal.h (ISO):  Signaling Yourself. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int rand (void)
stdlib.h (ISO):  ISO Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int rand_r (unsigned int *seed)
stdlib.h (POSIX.1):  ISO Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int random (void)
stdlib.h (BSD):  BSD Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct random_data
stdlib.h (GNU):  BSD Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int random_r (struct random_data *restrict buf, int32_t *restrict result)
stdlib.h (GNU):  BSD Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * rawmemchr (const void *block, int c)
string.h (GNU):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t read (int filedes, void *buffer, size_t size)
unistd.h (POSIX.1):  I/O Primitives. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct dirent * readdir (DIR *dirstream)
dirent.h (POSIX.1):  Reading/Closing Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct dirent64 * readdir64 (DIR *dirstream)
dirent.h (LFS):  Reading/Closing Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int readdir64_r (DIR *dirstream, struct dirent64 *entry, struct dirent64 **result)
dirent.h (LFS):  Reading/Closing Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int readdir_r (DIR *dirstream, struct dirent *entry, struct dirent **result)
dirent.h (GNU):  Reading/Closing Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t readlink (const char *filename, char *buffer, size_t size)
unistd.h (BSD):  Symbolic Links. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t readv (int filedes, const struct iovec *vector, int count)
sys/uio.h (BSD):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * realloc (void *ptr, size_t newsize)
malloc.h (ISO):  Changing Block Size. 
stdlib.h (ISO):  Changing Block Size. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * reallocarray (void *ptr, size_t nmemb, size_t size)
malloc.h (BSD):  Changing Block Size. 
stdlib.h (BSD):  Changing Block Size. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * realpath (const char *restrict name, char *restrict resolved)
stdlib.h (XPG):  Symbolic Links. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t recv (int socket, void *buffer, size_t size, int flags)
sys/socket.h (BSD):  Receiving Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t recvfrom (int socket, void *buffer, size_t size, int flags, struct sockaddr *addr, socklen_t *length-ptr)
sys/socket.h (BSD):  Receiving Datagrams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int regcomp (regex_t *restrict compiled, const char *restrict pattern, int cflags)
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t regerror (int errcode, const regex_t *restrict compiled, char *restrict buffer, size_t length)
regex.h (POSIX.2):  Regexp Cleanup. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- regex_t
regex.h (POSIX.2):  POSIX Regexp Compilation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int regexec (const regex_t *restrict compiled, const char *restrict string, size_t nmatch, regmatch_t matchptr[restrict], int eflags)
regex.h (POSIX.2):  Matching POSIX Regexps. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void regfree (regex_t *compiled)
regex.h (POSIX.2):  Regexp Cleanup. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int register_printf_function (int spec, printf_function handler-function, printf_arginfo_function arginfo-function)
printf.h (GNU):  Registering New Conversions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- regmatch_t
regex.h (POSIX.2):  Regexp Subexpressions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- regoff_t
regex.h (POSIX.2):  Regexp Subexpressions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double remainder (double numerator, double denominator)
math.h (ISO):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float remainderf (float numerator, float denominator)
math.h (ISO):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN remainderfN (_FloatN numerator, _FloatN denominator)
math.h (TS 18661-3:2015):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx remainderfNx (_FloatNx numerator, _FloatNx denominator)
math.h (TS 18661-3:2015):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double remainderl (long double numerator, long double denominator)
math.h (ISO):  Remainder Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int remove (const char *filename)
stdio.h (ISO):  Deleting Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int rename (const char *oldname, const char *newname)
stdio.h (ISO):  Renaming Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void rewind (FILE *stream)
stdio.h (ISO):  File Positioning. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void rewinddir (DIR *dirstream)
dirent.h (POSIX.1):  Random Access Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * rindex (const char *string, int c)
string.h (BSD):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double rint (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float rintf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN rintfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx rintfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double rintl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct rlimit
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct rlimit64
sys/resource.h (Unix98):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int rmdir (const char *filename)
unistd.h (POSIX.1):  Deleting Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double round (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double roundeven (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float roundevenf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN roundevenfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx roundevenfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double roundevenl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float roundf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN roundfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx roundfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double roundl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int rpmatch (const char *response)
stdlib.h (GNU):  Yes-or-No Questions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct rusage
sys/resource.h (BSD):  Resource Usage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void *sbrk (ptrdiff_t delta)
unistd.h (BSD):  Resizing the Data Segment. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double scalb (double value, double exponent)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float scalbf (float value, float exponent)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double scalbl (long double value, long double exponent)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double scalbln (double x, long int n)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float scalblnf (float x, long int n)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN scalblnfN (_FloatN x, long int n)
math.h (TS 18661-3:2015):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx scalblnfNx (_FloatNx x, long int n)
math.h (TS 18661-3:2015):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double scalblnl (long double x, long int n)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double scalbn (double x, int n)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float scalbnf (float x, int n)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN scalbnfN (_FloatN x, int n)
math.h (TS 18661-3:2015):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx scalbnfNx (_FloatNx x, int n)
math.h (TS 18661-3:2015):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double scalbnl (long double x, int n)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int scandir (const char *dir, struct dirent ***namelist, int (*selector) (const struct dirent *), int (*cmp) (const struct dirent **, const struct dirent **))
dirent.h (BSD):  Scanning Directory Content. 
dirent.h (SVID):  Scanning Directory Content. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int scandir64 (const char *dir, struct dirent64 ***namelist, int (*selector) (const struct dirent64 *), int (*cmp) (const struct dirent64 **, const struct dirent64 **))
dirent.h (GNU):  Scanning Directory Content. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int scanf (const char *template, …)
stdio.h (ISO):  Formatted Input Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_get_priority_max (int policy)
sched.h (POSIX):  Basic Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_get_priority_min (int policy)
sched.h (POSIX):  Basic Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_getaffinity (pid_t pid, size_t cpusetsize, cpu_set_t *cpuset)
sched.h (GNU):  CPU Affinity. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_getparam (pid_t pid, struct sched_param *param)
sched.h (POSIX):  Basic Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_getscheduler (pid_t pid)
sched.h (POSIX):  Basic Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct sched_param
sched.h (POSIX):  Basic Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_rr_get_interval (pid_t pid, struct timespec *interval)
sched.h (POSIX):  Basic Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_setaffinity (pid_t pid, size_t cpusetsize, const cpu_set_t *cpuset)
sched.h (GNU):  CPU Affinity. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_setparam (pid_t pid, const struct sched_param *param)
sched.h (POSIX):  Basic Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param)
sched.h (POSIX):  Basic Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sched_yield (void)
sched.h (POSIX):  Basic Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * secure_getenv (const char *name)
stdlib.h (GNU):  Environment Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned short int * seed48 (unsigned short int seed16v[3])
stdlib.h (SVID):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int seed48_r (unsigned short int seed16v[3], struct drand48_data *buffer)
stdlib.h (GNU):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void seekdir (DIR *dirstream, long int pos)
dirent.h (BSD):  Random Access Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int select (int nfds, fd_set *read-fds, fd_set *write-fds, fd_set *except-fds, struct timeval *timeout)
sys/types.h (BSD):  Waiting for I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t send (int socket, const void *buffer, size_t size, int flags)
sys/socket.h (BSD):  Sending Data. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t sendto (int socket, const void *buffer, size_t size, int flags, struct sockaddr *addr, socklen_t length)
sys/socket.h (BSD):  Sending Datagrams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct servent
netdb.h (BSD):  Services Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setbuf (FILE *stream, char *buf)
stdio.h (ISO):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setbuffer (FILE *stream, char *buf, size_t size)
stdio.h (BSD):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setcontext (const ucontext_t *ucp)
ucontext.h (SVID):  System V contexts. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setdomainname (const char *name, size_t length)
unistd.h (???):  Host Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setegid (gid_t newgid)
unistd.h (POSIX.1):  Setting Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setenv (const char *name, const char *value, int replace)
stdlib.h (BSD):  Environment Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int seteuid (uid_t neweuid)
unistd.h (POSIX.1):  Setting User ID. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setfsent (void)
fstab.h (BSD):  fstab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setgid (gid_t newgid)
unistd.h (POSIX.1):  Setting Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setgrent (void)
grp.h (SVID):  Scanning All Groups. 
grp.h (BSD):  Scanning All Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setgroups (size_t count, const gid_t *groups)
grp.h (BSD):  Setting Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void sethostent (int stayopen)
netdb.h (BSD):  Host Names. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sethostid (long int id)
unistd.h (BSD):  Host Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sethostname (const char *name, size_t length)
unistd.h (BSD):  Host Identification. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setitimer (int which, const struct itimerval *new, struct itimerval *old)
sys/time.h (BSD):  Setting an Alarm. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setjmp (jmp_buf state)
setjmp.h (ISO):  Non-Local Details. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setlinebuf (FILE *stream)
stdio.h (BSD):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * setlocale (int category, const char *locale)
locale.h (ISO):  Setting the Locale. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setlogmask (int mask)
syslog.h (BSD):  setlogmask. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * setmntent (const char *file, const char *mode)
mntent.h (BSD):  mtab. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setnetent (int stayopen)
netdb.h (BSD):  Networks Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setnetgrent (const char *netgroup)
netdb.h (BSD):  Lookup Netgroup. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayload (double *x, double payload)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayloadf (float *x, float payload)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayloadfN (_FloatN *x, _FloatN payload)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayloadfNx (_FloatNx *x, _FloatNx payload)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayloadl (long double *x, long double payload)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayloadsig (double *x, double payload)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayloadsigf (float *x, float payload)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayloadsigfN (_FloatN *x, _FloatN payload)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayloadsigfNx (_FloatNx *x, _FloatNx payload)
math.h (TS 18661-3:2015):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpayloadsigl (long double *x, long double payload)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpgid (pid_t pid, pid_t pgid)
unistd.h (POSIX.1):  Process Group Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpgrp (pid_t pid, pid_t pgid)
unistd.h (BSD):  Process Group Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setpriority (int class, int id, int niceval)
sys/resource.h (BSD):  Traditional Scheduling Functions. 
sys/resource.h (POSIX):  Traditional Scheduling Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setprotoent (int stayopen)
netdb.h (BSD):  Protocols Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setpwent (void)
pwd.h (SVID):  Scanning All Users. 
pwd.h (BSD):  Scanning All Users. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setregid (gid_t rgid, gid_t egid)
unistd.h (BSD):  Setting Groups. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setreuid (uid_t ruid, uid_t euid)
unistd.h (BSD):  Setting User ID. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setrlimit (int resource, const struct rlimit *rlp)
sys/resource.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setrlimit64 (int resource, const struct rlimit64 *rlp)
sys/resource.h (Unix98):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setservent (int stayopen)
netdb.h (BSD):  Services Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t setsid (void)
unistd.h (POSIX.1):  Process Group Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setsockopt (int socket, int level, int optname, const void *optval, socklen_t optlen)
sys/socket.h (BSD):  Socket Option Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * setstate (char *state)
stdlib.h (BSD):  BSD Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setstate_r (char *restrict statebuf, struct random_data *restrict buf)
stdlib.h (GNU):  BSD Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int settimeofday (const struct timeval *tp, const void *tzp)
sys/time.h (BSD):  Setting and Adjusting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setuid (uid_t newuid)
unistd.h (POSIX.1):  Setting User ID. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setutent (void)
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void setutxent (void)
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int setvbuf (FILE *stream, char *buf, int mode, size_t size)
stdio.h (ISO):  Controlling Buffering. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct sgttyb
termios.h (BSD):  BSD Terminal Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int shm_open (const char *name, int oflag, mode_t mode)
sys/mman.h (POSIX):  Memory-mapped I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int shutdown (int socket, int how)
sys/socket.h (BSD):  Closing a Socket. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- sig_atomic_t
signal.h (ISO):  Atomic Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- const char * sigabbrev_np (int signum)
string.h (GNU):  Signal Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigaction (int signum, const struct sigaction *restrict action, struct sigaction *restrict old-action)
signal.h (POSIX.1):  Advanced Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct sigaction
signal.h (POSIX.1):  Advanced Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigaddset (sigset_t *set, int signum)
signal.h (POSIX.1):  Signal Sets. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigaltstack (const stack_t *restrict stack, stack_t *restrict oldstack)
signal.h (XPG):  Signal Stack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigblock (int mask)
signal.h (BSD):  BSD Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigdelset (sigset_t *set, int signum)
signal.h (POSIX.1):  Signal Sets. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- const char * sigdescr_np (int signum)
string.h (GNU):  Signal Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigemptyset (sigset_t *set)
signal.h (POSIX.1):  Signal Sets. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigfillset (sigset_t *set)
signal.h (POSIX.1):  Signal Sets. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- sighandler_t
signal.h (GNU):  Basic Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int siginterrupt (int signum, int failflag)
signal.h (XPG):  BSD Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigismember (const sigset_t *set, int signum)
signal.h (POSIX.1):  Signal Sets. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- sigjmp_buf
setjmp.h (POSIX.1):  Non-Local Exits and Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void siglongjmp (sigjmp_buf state, int value)
setjmp.h (POSIX.1):  Non-Local Exits and Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigmask (int signum)
signal.h (BSD):  BSD Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- sighandler_t signal (int signum, sighandler_t action)
signal.h (ISO):  Basic Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int signbit (float-type x)
math.h (ISO):  FP Bit Twiddling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double significand (double x)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float significandf (float x)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double significandl (long double x)
math.h (BSD):  Normalization Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigpause (int mask)
signal.h (BSD):  BSD Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigpending (sigset_t *set)
signal.h (POSIX.1):  Checking for Pending Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigprocmask (int how, const sigset_t *restrict set, sigset_t *restrict oldset)
signal.h (POSIX.1):  Process Signal Mask. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- sigset_t
signal.h (POSIX.1):  Signal Sets. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigsetjmp (sigjmp_buf state, int savesigs)
setjmp.h (POSIX.1):  Non-Local Exits and Signals. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigsetmask (int mask)
signal.h (BSD):  BSD Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigstack (struct sigstack *stack, struct sigstack *oldstack)
signal.h (BSD):  Signal Stack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct sigstack
signal.h (BSD):  Signal Stack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sigsuspend (const sigset_t *set)
signal.h (POSIX.1):  Sigsuspend. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double sin (double x)
math.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void sincos (double x, double *sinx, double *cosx)
math.h (GNU):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void sincosf (float x, float *sinx, float *cosx)
math.h (GNU):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN sincosfN (_FloatN x, _FloatN *sinx, _FloatN *cosx)
math.h (GNU):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx sincosfNx (_FloatNx x, _FloatNx *sinx, _FloatNx *cosx)
math.h (GNU):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void sincosl (long double x, long double *sinx, long double *cosx)
math.h (GNU):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float sinf (float x)
math.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN sinfN (_FloatN x)
math.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx sinfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double sinh (double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float sinhf (float x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN sinhfN (_FloatN x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx sinhfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double sinhl (long double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double sinl (long double x)
math.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t
stddef.h (ISO):  Important Data Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned int sleep (unsigned int seconds)
unistd.h (POSIX.1):  Sleeping. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int snprintf (char *s, size_t size, const char *template, …)
stdio.h (GNU):  Formatted Output Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct sockaddr
sys/socket.h (BSD):  Address Formats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct sockaddr_in
netinet/in.h (BSD):  Internet Address Formats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct sockaddr_un
sys/un.h (BSD):  Local Namespace Details. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int socket (int namespace, int style, int protocol)
sys/socket.h (BSD):  Creating a Socket. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int socketpair (int namespace, int style, int protocol, int filedes[2])
sys/socket.h (BSD):  Socket Pairs. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- speed_t
termios.h (POSIX.1):  Line Speed. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sprintf (char *s, const char *template, …)
stdio.h (ISO):  Formatted Output Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double sqrt (double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float sqrtf (float x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN sqrtfN (_FloatN x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx sqrtfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double sqrtl (long double x)
math.h (ISO):  Exponents and Logarithms. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void srand (unsigned int seed)
stdlib.h (ISO):  ISO Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void srand48 (long int seedval)
stdlib.h (SVID):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int srand48_r (long int seedval, struct drand48_data *buffer)
stdlib.h (GNU):  SVID Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void srandom (unsigned int seed)
stdlib.h (BSD):  BSD Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int srandom_r (unsigned int seed, struct random_data *buf)
stdlib.h (GNU):  BSD Random. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int sscanf (const char *s, const char *template, …)
stdio.h (ISO):  Formatted Input Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- sighandler_t ssignal (int signum, sighandler_t action)
signal.h (SVID):  Basic Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t
unistd.h (POSIX.1):  I/O Primitives. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- stack_t
signal.h (XPG):  Signal Stack. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int stat (const char *filename, struct stat *buf)
sys/stat.h (POSIX.1):  Reading Attributes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct stat
sys/stat.h (POSIX.1):  Attribute Meanings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int stat64 (const char *filename, struct stat64 *buf)
sys/stat.h (Unix98):  Reading Attributes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct stat64
sys/stat.h (LFS):  Attribute Meanings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * stderr
stdio.h (ISO):  Standard Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * stdin
stdio.h (ISO):  Standard Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * stdout
stdio.h (ISO):  Standard Streams. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int stime (const time_t *newtime)
time.h (SVID):  Setting and Adjusting the Time. 
time.h (XPG):  Setting and Adjusting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * stpcpy (char *restrict to, const char *restrict from)
string.h (Unknown origin):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * stpncpy (char *restrict to, const char *restrict from, size_t size)
string.h (GNU):  Truncating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strcasecmp (const char *s1, const char *s2)
string.h (BSD):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strcasestr (const char *haystack, const char *needle)
string.h (GNU):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strcat (char *restrict to, const char *restrict from)
string.h (ISO):  Concatenating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strchr (const char *string, int c)
string.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strchrnul (const char *string, int c)
string.h (GNU):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strcmp (const char *s1, const char *s2)
string.h (ISO):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strcoll (const char *s1, const char *s2)
string.h (ISO):  Collation Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strcpy (char *restrict to, const char *restrict from)
string.h (ISO):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t strcspn (const char *string, const char *stopset)
string.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strdup (const char *s)
string.h (SVID):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strdupa (const char *s)
string.h (GNU):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strerror (int errnum)
string.h (ISO):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strerror_r (int errnum, char *buf, size_t n)
string.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- const char * strerrordesc_np (int errnum)
string.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- const char * strerrorname_np (int errnum)
string.h (GNU):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strfromd (char *restrict string, size_t size, const char *restrict format, double value)
stdlib.h (ISO/IEC TS 18661-1):  Printing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strfromf (char *restrict string, size_t size, const char *restrict format, float value)
stdlib.h (ISO/IEC TS 18661-1):  Printing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strfromfN (char *restrict string, size_t size, const char *restrict format, _FloatN value)
stdlib.h (ISO/IEC TS 18661-3):  Printing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strfromfNx (char *restrict string, size_t size, const char *restrict format, _FloatNx value)
stdlib.h (ISO/IEC TS 18661-3):  Printing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strfroml (char *restrict string, size_t size, const char *restrict format, long double value)
stdlib.h (ISO/IEC TS 18661-1):  Printing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strfry (char *string)
string.h (GNU):  Shuffling Bytes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t strftime (char *s, size_t size, const char *template, const struct tm *brokentime)
time.h (ISO):  Formatting Calendar Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t strlen (const char *s)
string.h (ISO):  String Length. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strncasecmp (const char *s1, const char *s2, size_t n)
string.h (BSD):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strncat (char *restrict to, const char *restrict from, size_t size)
string.h (ISO):  Truncating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strncmp (const char *s1, const char *s2, size_t size)
string.h (ISO):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strncpy (char *restrict to, const char *restrict from, size_t size)
string.h (C90):  Truncating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strndup (const char *s, size_t size)
string.h (GNU):  Truncating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strndupa (const char *s, size_t size)
string.h (GNU):  Truncating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t strnlen (const char *s, size_t maxlen)
string.h (GNU):  String Length. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strpbrk (const char *string, const char *stopset)
string.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strptime (const char *s, const char *fmt, struct tm *tp)
time.h (XPG4):  Low-Level Time String Parsing. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strrchr (const char *string, int c)
string.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strsep (char **string_ptr, const char *delimiter)
string.h (BSD):  Finding Tokens in a String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strsignal (int signum)
string.h (GNU):  Signal Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t strspn (const char *string, const char *skipset)
string.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strstr (const char *haystack, const char *needle)
string.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double strtod (const char *restrict string, char **restrict tailptr)
stdlib.h (ISO):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float strtof (const char *string, char **tailptr)
stdlib.h (ISO):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN strtofN (const char *string, char **tailptr)
stdlib.h (ISO/IEC TS 18661-3):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx strtofNx (const char *string, char **tailptr)
stdlib.h (ISO/IEC TS 18661-3):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t strtoimax (const char *restrict string, char **restrict tailptr, int base)
inttypes.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strtok (char *restrict newstring, const char *restrict delimiters)
string.h (ISO):  Finding Tokens in a String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * strtok_r (char *newstring, const char *delimiters, char **save_ptr)
string.h (POSIX):  Finding Tokens in a String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int strtol (const char *restrict string, char **restrict tailptr, int base)
stdlib.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double strtold (const char *string, char **tailptr)
stdlib.h (ISO):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int strtoll (const char *restrict string, char **restrict tailptr, int base)
stdlib.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int strtoq (const char *restrict string, char **restrict tailptr, int base)
stdlib.h (BSD):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned long int strtoul (const char *restrict string, char **restrict tailptr, int base)
stdlib.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned long long int strtoull (const char *restrict string, char **restrict tailptr, int base)
stdlib.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t strtoumax (const char *restrict string, char **restrict tailptr, int base)
inttypes.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned long long int strtouq (const char *restrict string, char **restrict tailptr, int base)
stdlib.h (BSD):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int strverscmp (const char *s1, const char *s2)
string.h (GNU):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t strxfrm (char *restrict to, const char *restrict from, size_t size)
string.h (ISO):  Collation Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int stty (int filedes, const struct sgttyb *attributes)
sgtty.h (BSD):  BSD Terminal Modes. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int swapcontext (ucontext_t *restrict oucp, const ucontext_t *restrict ucp)
ucontext.h (SVID):  System V contexts. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int swprintf (wchar_t *ws, size_t size, const wchar_t *template, …)
wchar.h (GNU):  Formatted Output Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int swscanf (const wchar_t *ws, const wchar_t *template, …)
wchar.h (ISO):  Formatted Input Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int symlink (const char *oldname, const char *newname)
unistd.h (BSD):  Symbolic Links. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void sync (void)
unistd.h (X/Open):  Synchronizing I/O. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int syscall (long int sysno, …)
unistd.h (???):  System Calls. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int sysconf (int parameter)
unistd.h (POSIX.1):  Sysconf Definition. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void syslog (int facility_priority, const char *format, …)
syslog.h (BSD):  syslog; vsyslog. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int system (const char *command)
stdlib.h (ISO):  Running a Command. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- sighandler_t sysv_signal (int signum, sighandler_t action)
signal.h (GNU):  Basic Signal Handling. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double tan (double x)
math.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float tanf (float x)
math.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN tanfN (_FloatN x)
math.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx tanfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double tanh (double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float tanhf (float x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN tanhfN (_FloatN x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx tanhfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double tanhl (long double x)
math.h (ISO):  Hyperbolic Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double tanl (long double x)
math.h (ISO):  Trig Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tcdrain (int filedes)
termios.h (POSIX.1):  Line Control. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tcflag_t
termios.h (POSIX.1):  Mode Data Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tcflow (int filedes, int action)
termios.h (POSIX.1):  Line Control. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tcflush (int filedes, int queue)
termios.h (POSIX.1):  Line Control. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tcgetattr (int filedes, struct termios *termios-p)
termios.h (POSIX.1):  Mode Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t tcgetpgrp (int filedes)
unistd.h (POSIX.1):  Terminal Access Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t tcgetsid (int fildes)
termios.h (Unix98):  Terminal Access Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tcsendbreak (int filedes, int duration)
termios.h (POSIX.1):  Line Control. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tcsetattr (int filedes, int when, const struct termios *termios-p)
termios.h (POSIX.1):  Mode Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tcsetpgrp (int filedes, pid_t pgid)
unistd.h (POSIX.1):  Terminal Access Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * tdelete (const void *key, void **rootp, comparison_fn_t compar)
search.h (SVID):  Tree Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void tdestroy (void *vroot, __free_fn_t freefct)
search.h (GNU):  Tree Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int telldir (DIR *dirstream)
dirent.h (BSD):  Random Access Directory. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * tempnam (const char *dir, const char *prefix)
stdio.h (SVID):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct termios
termios.h (POSIX.1):  Mode Data Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * textdomain (const char *domainname)
libintl.h (GNU):  Locating gettext catalog. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * tfind (const void *key, void *const *rootp, comparison_fn_t compar)
search.h (SVID):  Tree Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double tgamma (double x)
math.h (XPG):  Special Functions. 
math.h (ISO):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float tgammaf (float x)
math.h (XPG):  Special Functions. 
math.h (ISO):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN tgammafN (_FloatN x)
math.h (TS 18661-3:2015):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx tgammafNx (_FloatNx x)
math.h (TS 18661-3:2015):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double tgammal (long double x)
math.h (XPG):  Special Functions. 
math.h (ISO):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tgkill (pid_t pid, pid_t tid, int signum)
signal.h (Linux):  Signaling Another Process. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- thrd_busy
threads.h (C11):  ISO C Threads Return Values. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int thrd_create (thrd_t *thr, thrd_start_t func, void *arg)
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- thrd_t thrd_current (void)
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int thrd_detach (thrd_t thr)
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int thrd_equal (thrd_t lhs, thrd_t rhs)
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- thrd_error
threads.h (C11):  ISO C Threads Return Values. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _Noreturn void thrd_exit (int res)
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int thrd_join (thrd_t thr, int *res)
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- thrd_nomem
threads.h (C11):  ISO C Threads Return Values. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int thrd_sleep (const struct timespec *time_point, struct timespec *remaining)
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- thrd_start_t
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- thrd_success
threads.h (C11):  ISO C Threads Return Values. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- thrd_t
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- thrd_timedout
threads.h (C11):  ISO C Threads Return Values. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void thrd_yield (void)
threads.h (C11):  ISO C Thread Management. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- thread_local
threads.h (C11):  ISO C Thread-local Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- time_t time (time_t *result)
time.h (ISO):  Getting the Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- time_t
time.h (ISO):  Time Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- time_t timegm (struct tm *brokentime)
time.h (???):  Broken-down Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- time_t timelocal (struct tm *brokentime)
time.h (???):  Broken-down Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- clock_t times (struct tms *buffer)
sys/times.h (POSIX.1):  Processor Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct timespec
time.h (POSIX.1):  Time Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct timeval
sys/time.h (BSD):  Time Types. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int timezone
time.h (SVID):  Time Zone Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct tm
time.h (ISO):  Time Types. 
time.h (ISO):  Broken-down Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * tmpfile (void)
stdio.h (ISO):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- FILE * tmpfile64 (void)
stdio.h (Unix98):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * tmpnam (char *result)
stdio.h (ISO):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * tmpnam_r (char *result)
stdio.h (GNU):  Temporary Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct tms
sys/times.h (POSIX.1):  Processor Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int toascii (int c)
ctype.h (SVID):  Case Conversion. 
ctype.h (BSD):  Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tolower (int c)
ctype.h (ISO):  Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalorder (const double *x, const double *y)
math.h (TS 18661-1:2014):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalorderf (const float *x, const float *y)
math.h (TS 18661-1:2014):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalorderfN (const _FloatN *x, const _FloatN *y)
math.h (TS 18661-3:2015):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalorderfNx (const _FloatNx *x, const _FloatNx *y)
math.h (TS 18661-3:2015):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalorderl (const long double *x, const long double *y)
math.h (TS 18661-1:2014):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalordermag (const double *x, const double *y)
math.h (TS 18661-1:2014):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalordermagf (const float *x, const float *y)
math.h (TS 18661-1:2014):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalordermagfN (const _FloatN *x, const _FloatN *y)
math.h (TS 18661-3:2015):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalordermagfNx (const _FloatNx *x, const _FloatNx *y)
math.h (TS 18661-3:2015):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int totalordermagl (const long double *x, const long double *y)
math.h (TS 18661-1:2014):  FP Comparison Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int toupper (int c)
ctype.h (ISO):  Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t towctrans (wint_t wc, wctrans_t desc)
wctype.h (ISO):  Wide Character Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t towlower (wint_t wc)
wctype.h (ISO):  Wide Character Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t towupper (wint_t wc)
wctype.h (ISO):  Wide Character Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double trunc (double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int truncate (const char *filename, off_t length)
unistd.h (X/Open):  File Size. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int truncate64 (const char *name, off64_t length)
unistd.h (Unix98):  File Size. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float truncf (float x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN truncfN (_FloatN x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx truncfNx (_FloatNx x)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double truncl (long double x)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * tsearch (const void *key, void **rootp, comparison_fn_t compar)
search.h (SVID):  Tree Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tss_create (tss_t *tss_key, tss_dtor_t destructor)
threads.h (C11):  ISO C Thread-local Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void tss_delete (tss_t tss_key)
threads.h (C11):  ISO C Thread-local Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tss_dtor_t
threads.h (C11):  ISO C Thread-local Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * tss_get (tss_t tss_key)
threads.h (C11):  ISO C Thread-local Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int tss_set (tss_t tss_key, void *val)
threads.h (C11):  ISO C Thread-local Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- tss_t
threads.h (C11):  ISO C Thread-local Storage. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * ttyname (int filedes)
unistd.h (POSIX.1):  Is It a Terminal. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ttyname_r (int filedes, char *buf, size_t len)
unistd.h (POSIX.1):  Is It a Terminal. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void twalk (const void *root, __action_fn_t action)
search.h (SVID):  Tree Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void twalk_r (const void *root, void (*action) (const void *key, VISIT which, void *closure), void *closure)
search.h (GNU):  Tree Search Function. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- char * tzname [2]
time.h (POSIX.1):  Time Zone Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void tzset (void)
time.h (POSIX.1):  Time Zone Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ucontext_t
ucontext.h (SVID):  System V contexts. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfp (double x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfpf (float x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfpfN (_FloatN x, int round, unsigned int width)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfpfNx (_FloatNx x, int round, unsigned int width)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfpl (long double x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfpx (double x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfpxf (float x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfpxfN (_FloatN x, int round, unsigned int width)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfpxfNx (_FloatNx x, int round, unsigned int width)
math.h (TS 18661-3:2015):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t ufromfpxl (long double x, int round, unsigned int width)
math.h (ISO):  Rounding Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uid_t
sys/types.h (POSIX.1):  Reading Persona. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int ulimit (int cmd, …)
ulimit.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- mode_t umask (mode_t mask)
sys/stat.h (POSIX.1):  Setting Permissions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int umount (const char *file)
sys/mount.h (SVID):  Mount-Unmount-Remount. 
sys/mount.h (GNU):  Mount-Unmount-Remount. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int umount2 (const char *file, int flags)
sys/mount.h (GNU):  Mount-Unmount-Remount. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int uname (struct utsname *info)
sys/utsname.h (POSIX.1):  Platform Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int ungetc (int c, FILE *stream)
stdio.h (ISO):  How Unread. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t ungetwc (wint_t wc, FILE *stream)
wchar.h (ISO):  How Unread. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int unlink (const char *filename)
unistd.h (POSIX.1):  Deleting Files. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int unlockpt (int filedes)
stdlib.h (SVID):  Allocation. 
stdlib.h (XPG4.2):  Allocation. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int unsetenv (const char *name)
stdlib.h (BSD):  Environment Access. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void updwtmp (const char *wtmp_file, const struct utmp *utmp)
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utimbuf
utime.h (POSIX.1):  File Times. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int utime (const char *filename, const struct utimbuf *times)
utime.h (POSIX.1):  File Times. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int utimes (const char *filename, const struct timeval tvp[2])
sys/time.h (BSD):  File Times. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int utmpname (const char *file)
utmp.h (SVID):  Manipulating the Database. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int utmpxname (const char *file)
utmpx.h (XPG4.2):  XPG Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- struct utsname
sys/utsname.h (POSIX.1):  Platform Type. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- type va_arg (va_list ap, type)
stdarg.h (ISO):  Argument Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void va_copy (va_list dest, va_list src)
stdarg.h (C99):  Argument Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void va_end (va_list ap)
stdarg.h (ISO):  Argument Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- va_list
stdarg.h (ISO):  Argument Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void va_start (va_list ap, last-required)
stdarg.h (ISO):  Argument Macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void * valloc (size_t size)
malloc.h (BSD):  Aligned Memory Blocks. 
stdlib.h (BSD):  Aligned Memory Blocks. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vasprintf (char **ptr, const char *template, va_list ap)
stdio.h (GNU):  Variable Arguments Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void verr (int status, const char *format, va_list ap)
err.h (BSD):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void verrx (int status, const char *format, va_list ap)
err.h (BSD):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int versionsort (const struct dirent **a, const struct dirent **b)
dirent.h (GNU):  Scanning Directory Content. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int versionsort64 (const struct dirent64 **a, const struct dirent64 **b)
dirent.h (GNU):  Scanning Directory Content. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t vfork (void)
unistd.h (BSD):  Creating a Process. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vfprintf (FILE *stream, const char *template, va_list ap)
stdio.h (ISO):  Variable Arguments Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vfscanf (FILE *stream, const char *template, va_list ap)
stdio.h (ISO):  Variable Arguments Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vfwprintf (FILE *stream, const wchar_t *template, va_list ap)
wchar.h (ISO):  Variable Arguments Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vfwscanf (FILE *stream, const wchar_t *template, va_list ap)
wchar.h (ISO):  Variable Arguments Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vlimit (int resource, int limit)
sys/vlimit.h (BSD):  Limits on Resources. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vprintf (const char *template, va_list ap)
stdio.h (ISO):  Variable Arguments Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vscanf (const char *template, va_list ap)
stdio.h (ISO):  Variable Arguments Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vsnprintf (char *s, size_t size, const char *template, va_list ap)
stdio.h (GNU):  Variable Arguments Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vsprintf (char *s, const char *template, va_list ap)
stdio.h (ISO):  Variable Arguments Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vsscanf (const char *s, const char *template, va_list ap)
stdio.h (ISO):  Variable Arguments Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vswprintf (wchar_t *ws, size_t size, const wchar_t *template, va_list ap)
wchar.h (GNU):  Variable Arguments Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vswscanf (const wchar_t *s, const wchar_t *template, va_list ap)
wchar.h (ISO):  Variable Arguments Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void vsyslog (int facility_priority, const char *format, va_list arglist)
syslog.h (BSD):  syslog; vsyslog. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void vwarn (const char *format, va_list ap)
err.h (BSD):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void vwarnx (const char *format, va_list ap)
err.h (BSD):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vwprintf (const wchar_t *template, va_list ap)
wchar.h (ISO):  Variable Arguments Output. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int vwscanf (const wchar_t *template, va_list ap)
wchar.h (ISO):  Variable Arguments Input. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t wait (int *status-ptr)
sys/wait.h (POSIX.1):  Process Completion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t wait3 (int *status-ptr, int options, struct rusage *usage)
sys/wait.h (BSD):  BSD Wait Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t wait4 (pid_t pid, int *status-ptr, int options, struct rusage *usage)
sys/wait.h (BSD):  Process Completion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- pid_t waitpid (pid_t pid, int *status-ptr, int options)
sys/wait.h (POSIX.1):  Process Completion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void warn (const char *format, …)
err.h (BSD):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void warnx (const char *format, …)
err.h (BSD):  Error Messages. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t
stddef.h (ISO):  Extended Char Intro. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcpcpy (wchar_t *restrict wto, const wchar_t *restrict wfrom)
wchar.h (GNU):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcpncpy (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wchar.h (GNU):  Truncating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcrtomb (char *restrict s, wchar_t wc, mbstate_t *restrict ps)
wchar.h (ISO):  Converting a Character. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wcscasecmp (const wchar_t *ws1, const wchar_t *ws2)
wchar.h (GNU):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcscat (wchar_t *restrict wto, const wchar_t *restrict wfrom)
wchar.h (ISO):  Concatenating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcschr (const wchar_t *wstring, wchar_t wc)
wchar.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcschrnul (const wchar_t *wstring, wchar_t wc)
wchar.h (GNU):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wcscmp (const wchar_t *ws1, const wchar_t *ws2)
wchar.h (ISO):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wcscoll (const wchar_t *ws1, const wchar_t *ws2)
wchar.h (ISO):  Collation Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcscpy (wchar_t *restrict wto, const wchar_t *restrict wfrom)
wchar.h (ISO):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcscspn (const wchar_t *wstring, const wchar_t *stopset)
wchar.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcsdup (const wchar_t *ws)
wchar.h (GNU):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcsftime (wchar_t *s, size_t size, const wchar_t *template, const struct tm *brokentime)
time.h (ISO/Amend1):  Formatting Calendar Time. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcslen (const wchar_t *ws)
wchar.h (ISO):  String Length. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wcsncasecmp (const wchar_t *ws1, const wchar_t *s2, size_t n)
wchar.h (GNU):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcsncat (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wchar.h (ISO):  Truncating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wcsncmp (const wchar_t *ws1, const wchar_t *ws2, size_t size)
wchar.h (ISO):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcsncpy (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wchar.h (ISO):  Truncating Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcsnlen (const wchar_t *ws, size_t maxlen)
wchar.h (GNU):  String Length. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcsnrtombs (char *restrict dst, const wchar_t **restrict src, size_t nwc, size_t len, mbstate_t *restrict ps)
wchar.h (GNU):  Converting Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcspbrk (const wchar_t *wstring, const wchar_t *stopset)
wchar.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcsrchr (const wchar_t *wstring, wchar_t wc)
wchar.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcsrtombs (char *restrict dst, const wchar_t **restrict src, size_t len, mbstate_t *restrict ps)
wchar.h (ISO):  Converting Strings. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcsspn (const wchar_t *wstring, const wchar_t *skipset)
wchar.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcsstr (const wchar_t *haystack, const wchar_t *needle)
wchar.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double wcstod (const wchar_t *restrict string, wchar_t **restrict tailptr)
wchar.h (ISO):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float wcstof (const wchar_t *string, wchar_t **tailptr)
wchar.h (ISO):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN wcstofN (const wchar_t *string, wchar_t **tailptr)
wchar.h (GNU):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx wcstofNx (const wchar_t *string, wchar_t **tailptr)
wchar.h (GNU):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- intmax_t wcstoimax (const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wchar.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcstok (wchar_t *newstring, const wchar_t *delimiters, wchar_t **save_ptr)
wchar.h (ISO):  Finding Tokens in a String. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long int wcstol (const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wchar.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double wcstold (const wchar_t *string, wchar_t **tailptr)
wchar.h (ISO):  Parsing of Floats. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int wcstoll (const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wchar.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcstombs (char *string, const wchar_t *wstring, size_t size)
stdlib.h (ISO):  Non-reentrant String Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long long int wcstoq (const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wchar.h (GNU):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned long int wcstoul (const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wchar.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned long long int wcstoull (const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wchar.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- uintmax_t wcstoumax (const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wchar.h (ISO):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- unsigned long long int wcstouq (const wchar_t *restrict string, wchar_t **restrict tailptr, int base)
wchar.h (GNU):  Parsing of Integers. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wcswcs (const wchar_t *haystack, const wchar_t *needle)
wchar.h (XPG):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- size_t wcsxfrm (wchar_t *restrict wto, const wchar_t *wfrom, size_t size)
wchar.h (ISO):  Collation Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wctob (wint_t c)
wchar.h (ISO):  Converting a Character. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wctomb (char *string, wchar_t wchar)
stdlib.h (ISO):  Non-reentrant Character Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wctrans_t wctrans (const char *property)
wctype.h (ISO):  Wide Character Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wctrans_t
wctype.h (ISO):  Wide Character Case Conversion. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wctype_t wctype (const char *property)
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wctype_t
wctype.h (ISO):  Classification of Wide Characters. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wint_t
wchar.h (ISO):  Extended Char Intro. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wmemchr (const wchar_t *block, wchar_t wc, size_t size)
wchar.h (ISO):  Search Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wmemcmp (const wchar_t *a1, const wchar_t *a2, size_t size)
wchar.h (ISO):  String/Array Comparison. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wmemcpy (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wchar.h (ISO):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wmemmove (wchar_t *wto, const wchar_t *wfrom, size_t size)
wchar.h (ISO):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wmempcpy (wchar_t *restrict wto, const wchar_t *restrict wfrom, size_t size)
wchar.h (GNU):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wchar_t * wmemset (wchar_t *block, wchar_t wc, size_t size)
wchar.h (ISO):  Copying Strings and Arrays. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wordexp (const char *words, wordexp_t *word-vector-ptr, int flags)
wordexp.h (POSIX.2):  Calling Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- wordexp_t
wordexp.h (POSIX.2):  Calling Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- void wordfree (wordexp_t *word-vector-ptr)
wordexp.h (POSIX.2):  Calling Wordexp. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wprintf (const wchar_t *template, …)
wchar.h (ISO):  Formatted Output Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t write (int filedes, const void *buffer, size_t size)
unistd.h (POSIX.1):  I/O Primitives. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- ssize_t writev (int filedes, const struct iovec *vector, int count)
sys/uio.h (BSD):  Scatter-Gather. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- int wscanf (const wchar_t *template, …)
wchar.h (ISO):  Formatted Input Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double y0 (double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float y0f (float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN y0fN (_FloatN x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx y0fNx (_FloatNx x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double y0l (long double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double y1 (double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float y1f (float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN y1fN (_FloatN x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx y1fNx (_FloatNx x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double y1l (long double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- double yn (int n, double x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- float ynf (int n, float x)
math.h (SVID):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatN ynfN (int n, _FloatN x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- _FloatNx ynfNx (int n, _FloatNx x)
math.h (GNU):  Special Functions. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- long double ynl (int n, long double x)
math.h (SVID):  Special Functions. 
