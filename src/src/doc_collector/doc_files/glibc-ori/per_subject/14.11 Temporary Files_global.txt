If you need to use a temporary file in your program, you can use the tmpfile function to open it.  Or you can use the tmpnam (better: tmpnam_r) function to provide a name for a temporary file and then you can open it in the usual way with fopen. 
The tempnam function is like tmpnam but lets you choose what directory temporary files will go in, and something about what their file names will look like.  Important for multi-threaded programs is that tempnam is reentrant, while tmpnam is not since it returns a pointer to a static buffer. 
These facilities are declared in the header file stdio.h.  
Older Unix systems did not have the functions just described.  Instead they used mktemp and mkstemp.  Both of these functions work by modifying a file name template string you pass.  The last six characters of this string must be ‘XXXXXX’.  These six ‘X’s are replaced with six characters which make the whole string a unique file name.  Usually the template string is something like ‘/tmp/prefixXXXXXX’, and each program uses a unique prefix. 
NB: Because mktemp and mkstemp modify the template string, you must not pass string constants to them. String constants are normally in read-only storage, so your program would crash when mktemp or mkstemp tried to modify the string.  These functions are declared in the header file stdlib.h.  
Unlike mktemp, mkstemp is actually guaranteed to create a unique file that cannot possibly clash with any other program trying to create a temporary file.  This is because it works by calling open with the O_EXCL flag, which says you want to create a new file and get an error if the file already exists. 
The directory created by mkdtemp cannot clash with temporary files or directories created by other users.  This is because directory creation always works like open with O_EXCL. See Creating Directories. 
The mkdtemp function comes from OpenBSD. 
