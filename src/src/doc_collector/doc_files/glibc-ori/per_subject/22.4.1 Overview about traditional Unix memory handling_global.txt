Unix systems normally provide processes virtual address spaces.  This means that the addresses of the memory regions do not have to correspond directly to the addresses of the actual physical memory which stores the data.  An extra level of indirection is introduced which translates virtual addresses into physical addresses.  This is normally done by the hardware of the processor. 
Using a virtual address space has several advantages.  The most important is process isolation.  The different processes running on the system cannot interfere directly with each other.  No process can write into the address space of another process (except when shared memory is used but then it is wanted and controlled). 
Another advantage of virtual memory is that the address space the processes see can actually be larger than the physical memory available. The physical memory can be extended by storage on an external media where the content of currently unused memory regions is stored.  The address translation can then intercept accesses to these memory regions and make memory content available again by loading the data back into memory.  This concept makes it necessary that programs which have to use lots of memory know the difference between available virtual address space and available physical memory.  If the working set of virtual memory of all the processes is larger than the available physical memory the system will slow down dramatically due to constant swapping of memory content from the memory to the storage media and back.  This is called “thrashing”.  
A final aspect of virtual memory which is important and follows from what is said in the last paragraph is the granularity of the virtual address space handling.  When we said that the virtual address handling stores memory content externally it cannot do this on a byte-by-byte basis.  The administrative overhead does not allow this (leaving alone the processor hardware).  Instead several thousand bytes are handled together and form a page.  The size of each page is always a power of two bytes.  The smallest page size in use today is 4096, with 8192, 16384, and 65536 being other popular sizes. 
