Cryptographic applications often need some random data that will be as difficult as possible for a hostile eavesdropper to guess.  For instance, encryption keys should be chosen at random, and the “salt” strings used by crypt (see Passphrase Storage) should also be chosen at random. 
Some pseudo-random number generators do not provide unpredictable-enough output for cryptographic applications; see Pseudo-Random Numbers. Such applications need to use a cryptographic random number generator (CRNG), also sometimes called a cryptographically strong pseudo-random number generator (CSPRNG) or deterministic random bit generator (DRBG). 
Currently, the GNU C Library does not provide a cryptographic random number generator, but it does provide functions that read random data from a randomness source supplied by the operating system.  The randomness source is a CRNG at heart, but it also continually “re-seeds” itself from physical sources of randomness, such as electronic noise and clock jitter.  This means applications do not need to do anything to ensure that the random numbers it produces are different on each run. 
The catch, however, is that these functions will only produce relatively short random strings in any one call.  Often this is not a problem, but applications that need more than a few kilobytes of cryptographically strong random data should call these functions once and use their output to seed a CRNG. 
Most applications should use getentropy.  The getrandom function is intended for low-level applications which need additional control over blocking behavior. 
