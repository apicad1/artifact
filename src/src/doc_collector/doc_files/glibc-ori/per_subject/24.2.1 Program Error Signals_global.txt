The following signals are generated when a serious program error is detected by the operating system or the computer itself.  In general, all of these signals are indications that your program is seriously broken in some way, and thereâ€™s usually no way to continue the computation which encountered the error. 
Some programs handle program error signals in order to tidy up before terminating; for example, programs that turn off echoing of terminal input should handle program error signals in order to turn echoing back on.  The handler should end by specifying the default action for the signal that happened and then reraising it; this will cause the program to terminate with that signal, as if it had not had a handler. (See Termination in Handler.) 
Termination is the sensible ultimate outcome from a program error in most programs.  However, programming systems such as Lisp that can load compiled user programs might need to keep executing even if a user program incurs an error.  These programs have handlers which use longjmp to return control to the command level. 
The default action for all of these signals is to cause the process to terminate.  If you block or ignore these signals or establish handlers for them that return normally, your program will probably break horribly when such signals happen, unless they are generated by raise or kill instead of a real error. 
When one of these program error signals terminates a process, it also writes a core dump file which records the state of the process at the time of termination.  The core dump file is named core and is written in whichever directory is current in the process at the time. (On GNU/Hurd systems, you can specify the file name for core dumps with the environment variable COREFILE.)  The purpose of core dump files is so that you can examine them with a debugger to investigate what caused the error. 
BSD systems provide the SIGFPE handler with an extra argument that distinguishes various causes of the exception.  In order to access this argument, you must define the handler to accept two arguments, which means you must cast it to a one-argument function type in order to establish the handler.  The GNU C Library does provide this extra argument, but the value is meaningful only on operating systems that provide the information (BSD systems and GNU systems). 
