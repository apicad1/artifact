You can ask malloc to check the consistency of dynamic memory by using the mcheck function and preloading the malloc debug library libc_malloc_debug using the LD_PRELOAD environment variable. This function is a GNU extension, declared in mcheck.h.  
Another possibility to check for and guard against bugs in the use of malloc, realloc and free is to set the environment variable MALLOC_CHECK_.  When MALLOC_CHECK_ is set to a non-zero value less than 4, a special (less efficient) implementation is used which is designed to be tolerant against simple errors, such as double calls of free with the same argument, or overruns of a single byte (off-by-one bugs).  Not all such errors can be protected against, however, and memory leaks can result.  Like in the case of mcheck, one would need to preload the libc_malloc_debug library to enable MALLOC_CHECK_ functionality.  Without this preloaded library, setting MALLOC_CHECK_ will have no effect. 
Any detected heap corruption results in immediate termination of the process. 
There is one problem with MALLOC_CHECK_: in SUID or SGID binaries it could possibly be exploited since diverging from the normal programs behavior it now writes something to the standard error descriptor. Therefore the use of MALLOC_CHECK_ is disabled by default for SUID and SGID binaries.  It can be enabled again by the system administrator by adding a file /etc/suid-debug (the content is not important it could be empty). 
So, what’s the difference between using MALLOC_CHECK_ and linking with ‘-lmcheck’?  MALLOC_CHECK_ is orthogonal with respect to ‘-lmcheck’.  ‘-lmcheck’ has been added for backward compatibility.  Both MALLOC_CHECK_ and ‘-lmcheck’ should uncover the same bugs - but using MALLOC_CHECK_ you don’t need to recompile your application. 
