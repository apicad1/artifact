This section explains how to identify the particular system on which your program is running.  First, let’s review the various ways computer systems are named, which is a little complicated because of the history of the development of the Internet. 
Every Unix system (also known as a host) has a host name, whether it’s connected to a network or not.  In its simplest form, as used before computer networks were an issue, it’s just a word like ‘chicken’.  
But any system attached to the Internet or any network like it conforms to a more rigorous naming convention as part of the Domain Name System (DNS).  In the DNS, every host name is composed of two parts:   
You will note that “hostname” looks a lot like “host name”, but is not the same thing, and that people often incorrectly refer to entire host names as “domain names.” 
In the DNS, the full host name is properly called the FQDN (Fully Qualified Domain Name) and consists of the hostname, then a period, then the domain name.  The domain name itself usually has multiple components separated by periods.  So for example, a system’s hostname may be ‘chicken’ and its domain name might be ‘ai.mit.edu’, so its FQDN (which is its host name) is ‘chicken.ai.mit.edu’.  
Adding to the confusion, though, is that the DNS is not the only name space in which a computer needs to be known.  Another name space is the NIS (aka YP) name space.  For NIS purposes, there is another domain name, which is called the NIS domain name or the YP domain name.  It need not have anything to do with the DNS domain name.     
Confusing things even more is the fact that in the DNS, it is possible for multiple FQDNs to refer to the same system.  However, there is always exactly one of them that is the true host name, and it is called the canonical FQDN. 
In some contexts, the host name is called a “node name.” 
For more information on DNS host naming, see Host Names. 
Prototypes for these functions appear in unistd.h. 
The programs hostname, hostid, and domainname work by calling these functions. 
