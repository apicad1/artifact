With respect to time handling, GNU C Library configurations fall in two classes depending on the value of __TIMESIZE: 
Note: at this point, 64-bit time support in dual-time configurations is work-in-progress, so for these configurations, the public API only makes the 32-bit time support available.  In a later change, the public API will allow user code to choose the time size for a given compilation unit. 
64-bit variants of time-related types or functions are defined for all configurations and use 64-bit-time symbol names (for dual-time configurations) or macros (for single-time configurations). 
32-bit variants of time-related types or functions are defined only for dual-time configurations. 
Here is an example with localtime: 
Function localtime is declared in time/time.h as 

EXAMPLE_BEGIN
extern struct tm *localtime (const time_t *__timer) __THROW;
libc_hidden_proto (localtime)
EXAMPLE_END

For single-time configurations, __localtime64 is a macro which evaluates to localtime; for dual-time configurations, __localtime64 is a function similar to localtime except it uses Y2038-proof types: 

EXAMPLE_BEGIN
#if __TIMESIZE == 64
# define __localtime64 localtime
#else
extern struct tm *__localtime64 (const __time64_t *__timer) __THROW;
libc_hidden_proto (__localtime64)
#endif
EXAMPLE_END

(note: type time_t is replaced with __time64_t because time_t is not Y2038-proof, but struct tm is not replaced because it is already Y2038-proof.) 
The 64-bit-time implementation of localtime is written as follows and is compiled for both dual-time and single-time configuration classes. 

EXAMPLE_BEGIN
struct tm *
__localtime64 (const __time64_t *t)
{
  return __tz_convert (*t, 1, &_tmbuf);
}
libc_hidden_def (__localtime64)
EXAMPLE_END

The 32-bit-time implementation is a wrapper and is only compiled for dual-time configurations: 

EXAMPLE_BEGIN
#if __TIMESIZE != 64

struct tm *
localtime (const time_t *t)
{
  __time64_t t64 = *t;
  return __localtime64 (&t64);
}
libc_hidden_def (localtime)

#endif
EXAMPLE_END

