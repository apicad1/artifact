When dealing with asynchronous operations it is sometimes necessary to get into a consistent state.  This would mean for AIO that one wants to know whether a certain request or a group of requests were processed. This could be done by waiting for the notification sent by the system after the operation terminated, but this sometimes would mean wasting resources (mainly computation time).  Instead POSIX.1b defines two functions which will help with most kinds of consistency. 
The aio_fsync and aio_fsync64 functions are only available if the symbol _POSIX_SYNCHRONIZED_IO is defined in unistd.h. 
Another method of synchronization is to wait until one or more requests of a specific set terminated.  This could be achieved by the aio_* functions to notify the initiating process about the termination but in some situations this is not the ideal solution.  In a program which constantly updates clients somehow connected to the server it is not always the best solution to go round robin since some connections might be slow.  On the other hand letting the aio_* functions notify the caller might also be not the best solution since whenever the process works on preparing data for a client it makes no sense to be interrupted by a notification since the new client will not be handled before the current client is served.  For situations like this aio_suspend should be used. 
