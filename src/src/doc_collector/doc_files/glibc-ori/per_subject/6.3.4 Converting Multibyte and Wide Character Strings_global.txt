The functions described in the previous section only convert a single character at a time.  Most operations to be performed in real-world programs include strings and therefore the ISO C standard also defines conversions on entire strings.  However, the defined set of functions is quite limited; therefore, the GNU C Library contains a few extensions that can help in some important situations. 
The definition of the mbsrtowcs function has one important limitation.  The requirement that dst has to be a NUL-terminated string provides problems if one wants to convert buffers with text.  A buffer is not normally a collection of NUL-terminated strings but instead a continuous collection of lines, separated by newline characters.  Now assume that a function to convert one line from a buffer is needed.  Since the line is not NUL-terminated, the source pointer cannot directly point into the unmodified text buffer.  This means, either one inserts the NUL byte at the appropriate place for the time of the mbsrtowcs function call (which is not doable for a read-only buffer or in a multi-threaded application) or one copies the line in an extra buffer where it can be terminated by a NUL byte.  Note that it is not in general possible to limit the number of characters to convert by setting the parameter len to any specific value.  Since it is not known how many bytes each multibyte character sequence is in length, one can only guess. 
There is still a problem with the method of NUL-terminating a line right after the newline character, which could lead to very strange results. As said in the description of the mbsrtowcs function above, the conversion state is guaranteed to be in the initial shift state after processing the NUL byte at the end of the input string.  But this NUL byte is not really part of the text (i.e., the conversion state after the newline in the original text could be something different than the initial shift state and therefore the first character of the next line is encoded using this state).  But the state in question is never accessible to the user since the conversion stops after the NUL byte (which resets the state).  Most stateful character sets in use today require that the shift state after a newline be the initial state–but this is not a strict guarantee.  Therefore, simply NUL-terminating a piece of a running text is not always an adequate solution and, therefore, should never be used in generally used code. 
The generic conversion interface (see Generic Charset Conversion) does not have this limitation (it simply works on buffers, not strings), and the GNU C Library contains a set of functions that take additional parameters specifying the maximal number of bytes that are consumed from the input string.  This way the problem of mbsrtowcs’s example above could be solved by determining the line length and passing this length to the function. 
The restriction mentioned above for the mbsrtowcs function applies here also.  There is no possibility of directly controlling the number of input characters.  One has to place the NUL wide character at the correct place or control the consumed input indirectly via the available output array size (the len parameter). 
A function to convert a multibyte string into a wide character string and display it could be written like this (this is not a really useful example): 

EXAMPLE_BEGIN
void
showmbs (const char *src, FILE *fp)
{
  mbstate_t state;
  int cnt = 0;
  memset (&state, '\0', sizeof (state));
  while (1)
    {
      wchar_t linebuf[100];
      const char *endp = strchr (src, '\n');
      size_t n;

      /* Exit if there is no more line.  */
      if (endp == NULL)
        break;

      n = mbsnrtowcs (linebuf, &src, endp - src, 99, &state);
      linebuf[n] = L'\0';
      fprintf (fp, "line %d: \"%S\"\n", linebuf);
    }
}
EXAMPLE_END

There is no problem with the state after a call to mbsnrtowcs. Since we don’t insert characters in the strings that were not in there right from the beginning and we use state only for the conversion of the given buffer, there is no problem with altering the state. 
