
>>>>>>>>>>>>>>>>>>>>
- Function: void * obstack_alloc (struct obstack *obstack-ptr, int size)
Preliminary: | MT-Safe race:obstack-ptr | AS-Safe  | AC-Unsafe corrupt mem | See POSIX Safety Concepts. 
This allocates an uninitialized block of size bytes in an obstack and returns its address.  Here obstack-ptr specifies which obstack to allocate the block in; it is the address of the struct obstack object which represents the obstack.  Each obstack function or macro requires you to specify an obstack-ptr as the first argument. 
This function calls the obstackâ€™s obstack_chunk_alloc function if it needs to allocate a new chunk of memory; it calls obstack_alloc_failed_handler if allocation of memory by obstack_chunk_alloc failed. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Function: void * obstack_copy (struct obstack *obstack-ptr, void *address, int size)
Preliminary: | MT-Safe race:obstack-ptr | AS-Safe  | AC-Unsafe corrupt mem | See POSIX Safety Concepts. 
This allocates a block and initializes it by copying size bytes of data starting at address.  It calls obstack_alloc_failed_handler if allocation of memory by obstack_chunk_alloc failed. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Function: void * obstack_copy0 (struct obstack *obstack-ptr, void *address, int size)
Preliminary: | MT-Safe race:obstack-ptr | AS-Safe  | AC-Unsafe corrupt mem | See POSIX Safety Concepts. 
Like obstack_copy, but appends an extra byte containing a null character.  This extra byte is not counted in the argument size. 
