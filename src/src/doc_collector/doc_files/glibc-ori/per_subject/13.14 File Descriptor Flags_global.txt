File descriptor flags are miscellaneous attributes of a file descriptor.  These flags are associated with particular file descriptors, so that if you have created duplicate file descriptors from a single opening of a file, each descriptor has its own set of flags. 
Currently there is just one file descriptor flag: FD_CLOEXEC, which causes the descriptor to be closed if you use any of the exec… functions (see Executing a File). 
The symbols in this section are defined in the header file fcntl.h.  
The following macro is defined for use as a file descriptor flag with the fcntl function.  The value is an integer constant usable as a bit mask value. 
If you want to modify the file descriptor flags, you should get the current flags with F_GETFD and modify the value.  Don’t assume that the flags listed here are the only ones that are implemented; your program may be run years from now and more flags may exist then.  For example, here is a function to set or clear the flag FD_CLOEXEC without altering any other flags: 

EXAMPLE_BEGIN
/* Set the FD_CLOEXEC flag of desc if value is nonzero,
   or clear the flag if value is 0.
   Return 0 on success, or -1 on error with errno set. */

int
set_cloexec_flag (int desc, int value)
{
  int oldflags = fcntl (desc, F_GETFD, 0);
  /* If reading the flags failed, return error indication now. */
  if (oldflags < 0)
    return oldflags;
  /* Set just the flag we want to set. */
  if (value != 0)
    oldflags |= FD_CLOEXEC;
  else
    oldflags &= ~FD_CLOEXEC;
  /* Store modified flag word in the descriptor. */
  return fcntl (desc, F_SETFD, oldflags);
}
EXAMPLE_END

