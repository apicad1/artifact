Here is the client program corresponding to the server above. 
It sends a datagram to the server and then waits for a reply.  Notice that the socket for the client (as well as for the server) in this example has to be given a name.  This is so that the server can direct a message back to the client.  Since the socket has no associated connection state, the only way the server can do this is by referencing the name of the client. 

EXAMPLE_BEGIN


#include <stdio.h>
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/un.h>

#define SERVER  "/tmp/serversocket"
#define CLIENT  "/tmp/mysocket"
#define MAXMSG  512
#define MESSAGE "Yow!!! Are we having fun yet?!?"

int
main (void)
{
  extern int make_named_socket (const char *name);
  int sock;
  char message[MAXMSG];
  struct sockaddr_un name;
  size_t size;
  int nbytes;

  /* Make the socket. */
  sock = make_named_socket (CLIENT);

  /* Initialize the server socket address. */
  name.sun_family = AF_LOCAL;
  strcpy (name.sun_path, SERVER);
  size = strlen (name.sun_path) + sizeof (name.sun_family);

  /* Send the datagram. */
  nbytes = sendto (sock, MESSAGE, strlen (MESSAGE) + 1, 0,
                   (struct sockaddr *) & name, size);
  if (nbytes < 0)
    {
      perror ("sendto (client)");
      exit (EXIT_FAILURE);
    }

  /* Wait for a reply. */
  nbytes = recvfrom (sock, message, MAXMSG, 0, NULL, 0);
  if (nbytes < 0)
    {
      perror ("recfrom (client)");
      exit (EXIT_FAILURE);
    }

  /* Print a diagnostic message. */
  fprintf (stderr, "Client: got message: %s\n", message);

  /* Clean up. */
  remove (CLIENT);
  close (sock);
}
EXAMPLE_END

Keep in mind that datagram socket communications are unreliable.  In this example, the client program waits indefinitely if the message never reaches the server or if the server’s response never comes back.  It’s up to the user running the program to kill and restart it if desired.  A more automatic solution could be to use select (see Waiting for I/O) to establish a timeout period for the reply, and in case of timeout either re-send the message or shut down the socket and exit. 
