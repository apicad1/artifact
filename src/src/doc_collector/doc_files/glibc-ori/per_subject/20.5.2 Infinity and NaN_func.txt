
>>>>>>>>>>>>>>>>>>>>
- Macro: float INFINITY
An expression representing positive infinity.  It is equal to the value produced  by mathematical operations like 1.0 / 0.0. -INFINITY represents negative infinity. 
You can test whether a floating-point value is infinite by comparing it to this macro.  However, this is not recommended; you should use the isfinite macro instead.  See Floating Point Classes. 
This macro was introduced in the ISO C99 standard. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: float NAN
An expression representing a value which is “not a number”.  This macro is a GNU extension, available only on machines that support the “not a number” value—that is to say, on all machines that support IEEE floating point. 
You can use ‘#ifdef NAN’ to test whether the machine supports NaN.  (Of course, you must arrange for GNU extensions to be visible, such as by defining _GNU_SOURCE, and then you must include math.h.) 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: float SNANF
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: double SNAN
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: long double SNANL
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _FloatN SNANFN
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _FloatNx SNANFNx
These macros, defined by TS 18661-1:2014 and TS 18661-3:2015, are constant expressions for signaling NaNs. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: int FE_SNANS_ALWAYS_SIGNAL
This macro, defined by TS 18661-1:2014, is defined to 1 in fenv.h to indicate that functions and operations with signaling NaN inputs and floating-point results always raise the invalid exception and return a quiet NaN, even in cases (such as fmax, hypot and pow) where a quiet NaN input can produce a non-NaN result.  Because some compiler optimizations may not handle signaling NaNs correctly, this macro is only defined if compiler support for signaling NaNs is enabled.  That support can be enabled with the GCC option -fsignaling-nans. 
