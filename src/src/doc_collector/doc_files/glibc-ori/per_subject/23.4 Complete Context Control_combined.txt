The Unix standard provides one more set of functions to control the execution path and these functions are more powerful than those discussed in this chapter so far.  These functions were part of the original System V API and by this route were added to the Unix API.  Besides on branded Unix implementations these interfaces are not widely available.  Not all platforms and/or architectures the GNU C Library is available on provide this interface.  Use configure to detect the availability. 
Similar to the jmp_buf and sigjmp_buf types used for the variables to contain the state of the longjmp functions the interfaces of interest here have an appropriate type as well.  Objects of this type are normally much larger since more information is contained.  The type is also used in a few more places as we will see. The types and functions described in this section are all defined and declared respectively in the ucontext.h header file. 

>>>>>>>>>>>>>>>>>>>>
- Data Type: ucontext_t
The ucontext_t type is defined as a structure with at least the following elements: 
	ucontext_t *uc_link
This is a pointer to the next context structure which is used if the context described in the current structure returns.  
	sigset_t uc_sigmask
Set of signals which are blocked when this context is used.  
	stack_t uc_stack
Stack used for this context.  The value need not be (and normally is not) the stack pointer.  See Signal Stack.  
	mcontext_t uc_mcontext
This element contains the actual state of the process.  The mcontext_t type is also defined in this header but the definition should be treated as opaque.  Any use of knowledge of the type makes applications less portable.  
<<<<<<<<<<<<<<<<<<<<

Objects of this type have to be created by the user.  The initialization and modification happens through one of the following functions: 

>>>>>>>>>>>>>>>>>>>>
- Function: int getcontext (ucontext_t *ucp)
Preliminary: | MT-Safe race:ucp | AS-Safe  | AC-Safe  | See POSIX Safety Concepts. 
The getcontext function initializes the variable pointed to by ucp with the context of the calling thread.  The context contains the content of the registers, the signal mask, and the current stack. Executing the contents would start at the point where the getcontext call just returned. 
Compatibility Note: Depending on the operating system, information about the current context’s stack may be in the uc_stack field of ucp, or it may instead be in architecture-specific subfields of the uc_mcontext field. 
The function returns 0 if successful.  Otherwise it returns -1 and sets errno accordingly. 
<<<<<<<<<<<<<<<<<<<<

The getcontext function is similar to setjmp but it does not provide an indication of whether getcontext is returning for the first time or whether an initialized context has just been restored. If this is necessary the user has to determine this herself.  This must be done carefully since the context contains registers which might contain register variables.  This is a good situation to define variables with volatile. 
Once the context variable is initialized it can be used as is or it can be modified using the makecontext function.  The latter is normally done when implementing co-routines or similar constructs. 

>>>>>>>>>>>>>>>>>>>>
- Function: void makecontext (ucontext_t *ucp, void (*func) (void), int argc, …)
Preliminary: | MT-Safe race:ucp | AS-Safe  | AC-Safe  | See POSIX Safety Concepts. 
The ucp parameter passed to makecontext shall be initialized by a call to getcontext.  The context will be modified in a way such that if the context is resumed it will start by calling the function func which gets argc integer arguments passed.  The integer arguments which are to be passed should follow the argc parameter in the call to makecontext. 
Before the call to this function the uc_stack and uc_link element of the ucp structure should be initialized.  The uc_stack element describes the stack which is used for this context.  No two contexts which are used at the same time should use the same memory region for a stack. 
The uc_link element of the object pointed to by ucp should be a pointer to the context to be executed when the function func returns or it should be a null pointer.  See setcontext for more information about the exact use. 
<<<<<<<<<<<<<<<<<<<<

While allocating the memory for the stack one has to be careful.  Most modern processors keep track of whether a certain memory region is allowed to contain code which is executed or not.  Data segments and heap memory are normally not tagged to allow this.  The result is that programs would fail.  Examples for such code include the calling sequences the GNU C compiler generates for calls to nested functions. Safe ways to allocate stacks correctly include using memory on the original thread’s stack or explicitly allocating memory tagged for execution using (see Memory-mapped I/O). 
Compatibility note: The current Unix standard is very imprecise about the way the stack is allocated.  All implementations seem to agree that the uc_stack element must be used but the values stored in the elements of the stack_t value are unclear.  The GNU C Library and most other Unix implementations require the ss_sp value of the uc_stack element to point to the base of the memory region allocated for the stack and the size of the memory region is stored in ss_size.  There are implementations out there which require ss_sp to be set to the value the stack pointer will have (which can, depending on the direction the stack grows, be different).  This difference makes the makecontext function hard to use and it requires detection of the platform at compile time. 

>>>>>>>>>>>>>>>>>>>>
- Function: int setcontext (const ucontext_t *ucp)
Preliminary: | MT-Safe race:ucp | AS-Unsafe corrupt | AC-Unsafe corrupt | See POSIX Safety Concepts. 
The setcontext function restores the context described by ucp.  The context is not modified and can be reused as often as wanted. 
If the context was created by getcontext execution resumes with the registers filled with the same values and the same stack as if the getcontext call just returned. 
If the context was modified with a call to makecontext execution continues with the function passed to makecontext which gets the specified parameters passed.  If this function returns execution is resumed in the context which was referenced by the uc_link element of the context structure passed to makecontext at the time of the call.  If uc_link was a null pointer the application terminates normally with an exit status value of EXIT_SUCCESS (see Program Termination). 
If the context was created by a call to a signal handler or from any other source then the behaviour of setcontext is unspecified. 
Since the context contains information about the stack no two threads should use the same context at the same time.  The result in most cases would be disastrous. 
The setcontext function does not return unless an error occurred in which case it returns -1. 
<<<<<<<<<<<<<<<<<<<<

The setcontext function simply replaces the current context with the one described by the ucp parameter.  This is often useful but there are situations where the current context has to be preserved. 

>>>>>>>>>>>>>>>>>>>>
- Function: int swapcontext (ucontext_t *restrict oucp, const ucontext_t *restrict ucp)
Preliminary: | MT-Safe race:oucp race:ucp | AS-Unsafe corrupt | AC-Unsafe corrupt | See POSIX Safety Concepts. 
The swapcontext function is similar to setcontext but instead of just replacing the current context the latter is first saved in the object pointed to by oucp as if this was a call to getcontext.  The saved context would resume after the call to swapcontext. 
Once the current context is saved the context described in ucp is installed and execution continues as described in this context. 
If swapcontext succeeds the function does not return unless the context oucp is used without prior modification by makecontext.  The return value in this case is 0.  If the function fails it returns -1 and sets errno accordingly. 
<<<<<<<<<<<<<<<<<<<<

The easiest way to use the context handling functions is as a replacement for setjmp and longjmp.  The context contains on most platforms more information which may lead to fewer surprises but this also means using these functions is more expensive (besides being less portable). 

EXAMPLE_BEGIN
int
random_search (int n, int (*fp) (int, ucontext_t *))
{
  volatile int cnt = 0;
  ucontext_t uc;

  /* Safe current context.  */
  if (getcontext (&uc) < 0)
    return -1;

  /* If we have not tried n times try again.  */
  if (cnt++ < n)
    /* Call the function with a new random number
       and the context.  */
    if (fp (rand (), &uc) != 0)
      /* We found what we were looking for.  */
      return 1;

  /* Not found.  */
  return 0;
}
EXAMPLE_END

Using contexts in such a way enables emulating exception handling.  The search functions passed in the fp parameter could be very large, nested, and complex which would make it complicated (or at least would require a lot of code) to leave the function with an error value which has to be passed down to the caller.  By using the context it is possible to leave the search function in one step and allow restarting the search which also has the nice side effect that it can be significantly faster. 
Something which is harder to implement with setjmp and longjmp is to switch temporarily to a different execution path and then resume where execution was stopped. 

EXAMPLE_BEGIN


#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <ucontext.h>
#include <sys/time.h>

/* Set by the signal handler. */
static volatile int expired;

/* The contexts. */
static ucontext_t uc[3];

/* We do only a certain number of switches. */
static int switches;


/* This is the function doing the work.  It is just a
   skeleton, real code has to be filled in. */
static void
f (int n)
{
  int m = 0;
  while (1)
    {
      /* This is where the work would be done. */
      if (++m % 100 == 0)
        {
          putchar ('.');
          fflush (stdout);
        }

      /* Regularly the expire variable must be checked. */
      if (expired)
        {
          /* We do not want the program to run forever. */
          if (++switches == 20)
            return;

          printf ("\nswitching from %d to %d\n", n, 3 - n);
          expired = 0;
          /* Switch to the other context, saving the current one. */
          swapcontext (&uc[n], &uc[3 - n]);
        }
    }
}

/* This is the signal handler which simply set the variable. */
void
handler (int signal)
{
  expired = 1;
}


int
main (void)
{
  struct sigaction sa;
  struct itimerval it;
  char st1[8192];
  char st2[8192];

  /* Initialize the data structures for the interval timer. */
  sa.sa_flags = SA_RESTART;
  sigfillset (&sa.sa_mask);
  sa.sa_handler = handler;
  it.it_interval.tv_sec = 0;
  it.it_interval.tv_usec = 1;
  it.it_value = it.it_interval;

  /* Install the timer and get the context we can manipulate. */
  if (sigaction (SIGPROF, &sa, NULL) < 0
      || setitimer (ITIMER_PROF, &it, NULL) < 0
      || getcontext (&uc[1]) == -1
      || getcontext (&uc[2]) == -1)
    abort ();

  /* Create a context with a separate stack which causes the
     function f to be call with the parameter 1.
     Note that the uc_link points to the main context
     which will cause the program to terminate once the function
     return. */
  uc[1].uc_link = &uc[0];
  uc[1].uc_stack.ss_sp = st1;
  uc[1].uc_stack.ss_size = sizeof st1;
  makecontext (&uc[1], (void (*) (void)) f, 1, 1);

  /* Similarly, but 2 is passed as the parameter to f. */
  uc[2].uc_link = &uc[0];
  uc[2].uc_stack.ss_sp = st2;
  uc[2].uc_stack.ss_size = sizeof st2;
  makecontext (&uc[2], (void (*) (void)) f, 1, 2);

  /* Start running. */
  swapcontext (&uc[0], &uc[1]);
  putchar ('\n');

  return 0;
}
EXAMPLE_END

This an example how the context functions can be used to implement co-routines or cooperative multi-threading.  All that has to be done is to call every once in a while swapcontext to continue running a different context.  It is not recommended to do the context switching from the signal handler directly since leaving the signal handler via setcontext if the signal was delivered during code that was not asynchronous signal safe could lead to problems. Setting a variable in the signal handler and checking it in the body of the functions which are executed is a safer approach.  Since swapcontext is saving the current context it is possible to have multiple different scheduling points in the code.  Execution will always resume where it was left. 
