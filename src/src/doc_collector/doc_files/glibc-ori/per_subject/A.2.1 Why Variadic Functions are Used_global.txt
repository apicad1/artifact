Ordinary C functions take a fixed number of arguments.  When you define a function, you specify the data type for each argument.  Every call to the function should supply the expected number of arguments, with types that can be converted to the specified ones.  Thus, if the function ‘foo’ is declared with int foo (int, char *); then you must call it with two arguments, a number (any kind will do) and a string pointer. 
But some functions perform operations that can meaningfully accept an unlimited number of arguments. 
In some cases a function can handle any number of values by operating on all of them as a block.  For example, consider a function that allocates a one-dimensional array with malloc to hold a specified set of values.  This operation makes sense for any number of values, as long as the length of the array corresponds to that number.  Without facilities for variable arguments, you would have to define a separate function for each possible array size. 
The library function printf (see Formatted Output) is an example of another class of function where variable arguments are useful.  This function prints its arguments (which can vary in type as well as number) under the control of a format template string. 
These are good reasons to define a variadic function which can handle as many arguments as the caller chooses to pass. 
Some functions such as open take a fixed set of arguments, but occasionally ignore the last few.  Strict adherence to ISO C requires these functions to be defined as variadic; in practice, however, the GNU C compiler and most other C compilers let you define such a function to take a fixed set of arguments—the most it can ever use—and then only declare the function as variadic (or not declare its arguments at all!). 
