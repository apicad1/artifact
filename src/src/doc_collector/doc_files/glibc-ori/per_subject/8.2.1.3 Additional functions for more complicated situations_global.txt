The functions of the gettext family described so far (and all the catgets functions as well) have one problem in the real world which has been neglected completely in all existing approaches.  What is meant here is the handling of plural forms. 
Looking through Unix source code before the time anybody thought about internationalization (and, sadly, even afterwards) one can often find code similar to the following: 

EXAMPLE_BEGIN
   printf ("%d file%s deleted", n, n == 1 ? "" : "s");
EXAMPLE_END

After the first complaints from people internationalizing the code people either completely avoided formulations like this or used strings like "file(s)".  Both look unnatural and should be avoided.  First tries to solve the problem correctly looked like this: 

EXAMPLE_BEGIN
   if (n == 1)
     printf ("%d file deleted", n);
   else
     printf ("%d files deleted", n);
EXAMPLE_END

But this does not solve the problem.  It helps languages where the plural form of a noun is not simply constructed by adding an ‘s’ but that is all.  Once again people fell into the trap of believing the rules their language uses are universal.  But the handling of plural forms differs widely between the language families.  There are two things we can differ between (and even inside language families); 
  The form how plural forms are build differs.  This is a problem with language which have many irregularities.  German, for instance, is a drastic case.  Though English and German are part of the same language family (Germanic), the almost regular forming of plural noun forms (appending an ‘s’) is hardly found in German.   The number of plural forms differ.  This is somewhat surprising for those who only have experiences with Romanic and Germanic languages since here the number is the same (there are two).  But other language families have only one form or many forms.  More information on this in an extra section. 
The consequence of this is that application writers should not try to solve the problem in their code.  This would be localization since it is only usable for certain, hardcoded language environments.  Instead the extended gettext interface should be used. 
These extra functions are taking instead of the one key string two strings and a numerical argument.  The idea behind this is that using the numerical argument and the first string as a key, the implementation can select using rules specified by the translator the right plural form.  The two string arguments then will be used to provide a return value in case no message catalog is found (similar to the normal gettext behavior).  In this case the rules for Germanic language are used and it is assumed that the first string argument is the singular form, the second the plural form. 
This has the consequence that programs without language catalogs can display the correct strings only if the program itself is written using a Germanic language.  This is a limitation but since the GNU C Library (as well as the GNU gettext package) is written as part of the GNU package and the coding standards for the GNU project require programs to be written in English, this solution nevertheless fulfills its purpose. 
A description of the problem can be found at the beginning of the last section.  Now there is the question how to solve it.  Without the input of linguists (which was not available) it was not possible to determine whether there are only a few different forms in which plural forms are formed or whether the number can increase with every new supported language. 
Therefore the solution implemented is to allow the translator to specify the rules of how to select the plural form.  Since the formula varies with every language this is the only viable solution except for hardcoding the information in the code (which still would require the possibility of extensions to not prevent the use of new languages).  The details are explained in the GNU gettext manual.  Here only a bit of information is provided. 
The information about the plural form selection has to be stored in the header entry (the one with the empty msgid string).  It looks like this: 

EXAMPLE_BEGIN
Plural-Forms: nplurals=2; plural=n == 1 ? 0 : 1;
EXAMPLE_END

The nplurals value must be a decimal number which specifies how many different plural forms exist for this language.  The string following plural is an expression using the C language syntax.  Exceptions are that no negative numbers are allowed, numbers must be decimal, and the only variable allowed is n.  This expression will be evaluated whenever one of the functions ngettext, dngettext, or dcngettext is called.  The numeric value passed to these functions is then substituted for all uses of the variable n in the expression.  The resulting value then must be greater or equal to zero and smaller than the value given as the value of nplurals. 
The following rules are known at this point.  The language with families are listed.  But this does not necessarily mean the information can be generalized for the whole family (as can be easily seen in the table below).2 
