This section describes functions in the GNU C Library for setting the absolute priority and scheduling policy of a process. 
Portability Note:  On systems that have the functions in this section, the macro _POSIX_PRIORITY_SCHEDULING is defined in <unistd.h>. 
For the case that the scheduling policy is traditional scheduling, more functions to fine tune the scheduling are in Traditional Scheduling. 
Don’t try to make too much out of the naming and structure of these functions.  They don’t match the concepts described in this manual because the functions are as defined by POSIX.1b, but the implementation on systems that use the GNU C Library is the inverse of what the POSIX structure contemplates.  The POSIX scheme assumes that the primary scheduling parameter is the scheduling policy and that the priority value, if any, is a parameter of the scheduling policy.  In the implementation, though, the priority value is king and the scheduling policy, if anything, only fine tunes the effect of that priority. 
The symbols in this section are declared by including file sched.h. 
Portability Note: In POSIX, the pid_t arguments of the functions below refer to process IDs.  On Linux, they are actually thread IDs, and control how specific threads are scheduled with regards to the entire system.  The resulting behavior does not conform to POSIX.  This is why the following description refers to tasks and tasks IDs, and not processes and process IDs. 
