The functions to retrieve the translations for a given message have a remarkable simple interface.  But to provide the user of the program still the opportunity to select exactly the translation s/he wants and also to provide the programmer the possibility to influence the way to locate the search for catalogs files there is a quite complicated underlying mechanism which controls all this.  The code is complicated the use is easy. 
Basically we have two different tasks to perform which can also be performed by the catgets functions: 
This is the functionality required by the specifications for gettext and this is also what the catgets functions are able to do.  But there are some problems unresolved: 
  The language to be used can be specified in several different ways. There is no generally accepted standard for this and the user always expects the program to understand what s/he means.  E.g., to select the German translation one could write de, german, or deutsch and the program should always react the same.   Sometimes the specification of the user is too detailed.  If s/he, e.g., specifies de_DE.ISO-8859-1 which means German, spoken in Germany, coded using the ISO 8859-1 character set there is the possibility that a message catalog matching this exactly is not available.  But there could be a catalog matching de and if the character set used on the machine is always ISO 8859-1 there is no reason why this later message catalog should not be used.  (We call this message inheritance.)   If a catalog for a wanted language is not available it is not always the second best choice to fall back on the language of the developer and simply not translate any message.  Instead a user might be better able to read the messages in another language and so the user of the program should be able to define a precedence order of languages. 
We can divide the configuration actions in two parts: the one is performed by the programmer, the other by the user.  We will start with the functions the programmer can use since the user configuration will be based on this. 
As the functions described in the last sections already mention separate sets of messages can be selected by a domain name.  This is a simple string which should be unique for each program part that uses a separate domain.  It is possible to use in one program arbitrarily many domains at the same time.  E.g., the GNU C Library itself uses a domain named libc while the program using the C Library could use a domain named foo.  The important point is that at any time exactly one domain is active.  This is controlled with the following function. 
