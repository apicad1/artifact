The GNU C Library cannot be compiled in the source directory.  You must build it in a separate build directory.  For example, if you have unpacked the GNU C Library sources in /src/gnu/glibc-version, create a directory /src/gnu/glibc-build to put the object files in.  This allows removing the whole build directory in case an error occurs, which is the safest way to get a fresh start and should always be done. 
From your object directory, run the shell script configure located at the top level of the source tree.  In the scenario above, you’d type 

EXAMPLE_BEGIN
$ ../glibc-version/configure args…
EXAMPLE_END

Please note that even though you’re building in a separate build directory, the compilation may need to create or modify files and directories in the source directory. 
configure takes many options, but the only one that is usually mandatory is ‘--prefix’.  This option tells configure where you want the GNU C Library installed.  This defaults to /usr/local, but the normal setting to install as the standard system library is ‘--prefix=/usr’ for GNU/Linux systems and ‘--prefix=’ (an empty prefix) for GNU/Hurd systems. 
It may also be useful to pass ‘CC=compiler’ and CFLAGS=flags arguments to configure.  CC selects the C compiler that will be used, and CFLAGS sets optimization options for the compiler.  Any compiler options required for all compilations, such as options selecting an ABI or a processor for which to generate code, should be included in CC.  Options that may be overridden by the GNU C Library build system for particular files, such as for optimization and debugging, should go in CFLAGS.  The default value of CFLAGS is ‘-g -O2’, and the GNU C Library cannot be compiled without optimization, so if CFLAGS is specified it must enable optimization.  For example: 

EXAMPLE_BEGIN
$ ../glibc-version/configure CC="gcc -m32" CFLAGS="-O3"
EXAMPLE_END

The following list describes all of the available options for  configure: 
To build the library and related programs, type make.  This will produce a lot of output, some of which may look like errors from make but aren’t.  Look for error messages from make containing ‘***’.  Those indicate that something is seriously wrong. 
The compilation process can take a long time, depending on the configuration and the speed of your machine.  Some complex modules may take a very long time to compile, as much as several minutes on slower machines.  Do not panic if the compiler appears to hang. 
If you want to run a parallel make, simply pass the ‘-j’ option with an appropriate numeric parameter to make.  You need a recent GNU make version, though. 
To build and run test programs which exercise some of the library facilities, type make check.  If it does not complete successfully, do not use the built library, and report a bug after verifying that the problem is not already known.  See Reporting Bugs, for instructions on reporting bugs.  Note that some of the tests assume they are not being run by root.  We recommend you compile and test the GNU C Library as an unprivileged user. 
Before reporting bugs make sure there is no problem with your system. The tests (and later installation) use some pre-existing files of the system such as /etc/passwd, /etc/nsswitch.conf and others. These files must all contain correct and sensible content. 
Normally, make check will run all the tests before reporting all problems found and exiting with error status if any problems occurred.  You can specify ‘stop-on-test-failure=y’ when running make check to make the test run stop and exit with an error status immediately when a failure occurs. 
To format the GNU C Library Reference Manual for printing, type make dvi.  You need a working TeX installation to do this.  The distribution builds the on-line formatted version of the manual, as Info files, as part of the build process.  You can build them manually with make info. 
The library has a number of special-purpose configuration parameters which you can find in Makeconfig.  These can be overwritten with the file configparms.  To change them, create a configparms in your build directory and add values as appropriate for your system.  The file is included and parsed by make and has to follow the conventions for makefiles. 
It is easy to configure the GNU C Library for cross-compilation by setting a few variables in configparms.  Set CC to the cross-compiler for the target you configured the library for; it is important to use this same CC value when running configure, like this: ‘configure target CC=target-gcc’.  Set BUILD_CC to the compiler to use for programs run on the build system as part of compiling the library.  You may need to set AR to cross-compiling versions of ar if the native tools are not configured to work with object files for the target you configured for.  When cross-compiling the GNU C Library, it may be tested using ‘make check test-wrapper="srcdir/scripts/cross-test-ssh.sh hostname"’, where srcdir is the absolute directory name for the main source directory and hostname is the host name of a system that can run the newly built binaries of the GNU C Library.  The source and build directories must be visible at the same locations on both the build system and hostname. The ‘cross-test-ssh.sh’ script requires ‘flock’ from ‘util-linux’ to work when glibc_test_allow_time_setting environment variable is set. 
It is also possible to execute tests, which require setting the date on the target machine.  Following use cases are supported: 
  GLIBC_TEST_ALLOW_TIME_SETTING is set in the environment in which eligible tests are executed and have the privilege to run clock_settime.  In this case, nothing prevents those tests from running in parallel, so the caller shall assure that those tests are serialized or provide a proper wrapper script for them.   The cross-test-ssh.sh script is used and one passes the --allow-time-setting flag.  In this case, both sets GLIBC_TEST_ALLOW_TIME_SETTING and serialization of test execution are assured automatically. 
In general, when testing the GNU C Library, ‘test-wrapper’ may be set to the name and arguments of any program to run newly built binaries. This program must preserve the arguments to the binary being run, its working directory and the standard input, output and error file descriptors.  If ‘test-wrapper env’ will not work to run a program with environment variables set, then ‘test-wrapper-env’ must be set to a program that runs a newly built program with environment variable assignments in effect, those assignments being specified as ‘var=value’ before the name of the program to be run.  If multiple assignments to the same variable are specified, the last assignment specified must take precedence. Similarly, if ‘test-wrapper env -i’ will not work to run a program with an environment completely empty of variables except those directly assigned, then ‘test-wrapper-env-only’ must be set; its use has the same syntax as ‘test-wrapper-env’, the only difference in its semantics being starting with an empty set of environment variables rather than the ambient set. 
For AArch64 with SVE, when testing the GNU C Library, ‘test-wrapper’ may be set to "srcdir/sysdeps/unix/sysv/linux/aarch64/vltest.py vector-length" to change Vector Length. 
