The functions described in this section copy or concatenate the possibly-truncated contents of a string or array to another, and similarly for wide strings.  They follow the string-copying functions in their header conventions.  See Copying Strings and Arrays.  The ‘str’ functions are declared in the header file string.h and the ‘wc’ functions are declared in the file wchar.h. 
Because these functions can abruptly truncate strings or wide strings, they are generally poor choices for processing text.  When coping or concatening multibyte strings, they can truncate within a multibyte character so that the result is not a valid multibyte string.  When combining or concatenating multibyte or wide strings, they may truncate the output after a combining character, resulting in a corrupted grapheme.  They can cause bugs even when processing single-byte strings: for example, when calculating an ASCII-only user name, a truncated name can identify the wrong user. 
Although some buffer overruns can be prevented by manually replacing calls to copying functions with calls to truncation functions, there are often easier and safer automatic techniques that cause buffer overruns to reliably terminate a program, such as GCC’s -fcheck-pointer-bounds and -fsanitize=address options.  See Options for Debugging Your Program or GCC in Using GCC.  Because truncation functions can mask application bugs that would otherwise be caught by the automatic techniques, these functions should be used only when the application’s underlying logic requires truncation. 
Note: GNU programs should not truncate strings or wide strings to fit arbitrary size limits.  See Writing Robust Programs in The GNU Coding Standards.  Instead of string-truncation functions, it is usually better to use dynamic memory allocation (see Unconstrained Allocation) and functions such as strdup or asprintf to construct strings. 
