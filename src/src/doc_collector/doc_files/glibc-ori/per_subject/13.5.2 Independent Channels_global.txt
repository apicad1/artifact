When you open channels (streams or descriptors) separately on a seekable file, each channel has its own file position.  These are called independent channels. 
The system handles each channel independently.  Most of the time, this is quite predictable and natural (especially for input): each channel can read or write sequentially at its own place in the file.  However, if some of the channels are streams, you must take these precautions: 
  You should clean an output stream after use, before doing anything else that might read or write from the same part of the file.   You should clean an input stream before reading data that may have been modified using an independent channel.  Otherwise, you might read obsolete data that had been in the stream’s buffer. 
If you do output to one channel at the end of the file, this will certainly leave the other independent channels positioned somewhere before the new end.  You cannot reliably set their file positions to the new end of file before writing, because the file can always be extended by another process between when you set the file position and when you write the data.  Instead, use an append-type descriptor or stream; they always output at the current end of the file.  In order to make the end-of-file position accurate, you must clean the output channel you were using, if it is a stream. 
It’s impossible for two channels to have separate file pointers for a file that doesn’t support random access.  Thus, channels for reading or writing such files are always linked, never independent.  Append-type channels are also always linked.  For these channels, follow the rules for linked channels; see Linked Channels. 
