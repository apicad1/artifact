Besides the standard numbers-and-dots notation for Internet addresses, you can also refer to a host by a symbolic name.  The advantage of a symbolic name is that it is usually easier to remember.  For example, the machine with Internet address ‘158.121.106.19’ is also known as ‘alpha.gnu.org’; and other machines in the ‘gnu.org’ domain can refer to it simply as ‘alpha’. 
Internally, the system uses a database to keep track of the mapping between host names and host numbers.  This database is usually either the file /etc/hosts or an equivalent provided by a name server. The functions and other symbols for accessing this database are declared in netdb.h.  They are BSD features, defined unconditionally if you include netdb.h. 
As far as the host database is concerned, each address is just a block of memory h_length bytes long.  But in other contexts there is an implicit assumption that you can convert IPv4 addresses to a struct in_addr or an uint32_t.  Host addresses in a struct hostent structure are always given in network byte order; see Byte Order. 
You can use gethostbyname, gethostbyname2 or gethostbyaddr to search the hosts database for information about a particular host.  The information is returned in a statically-allocated structure; you must copy the information if you need to save it across calls.  You can also use getaddrinfo and getnameinfo to obtain this information. 
If the name lookup by gethostbyname or gethostbyaddr fails, you can find out the reason by looking at the value of the variable h_errno.  (It would be cleaner design for these functions to set errno, but use of h_errno is compatible with other systems.) 
Here are the error codes that you may find in h_errno: 
The lookup functions above all have one thing in common: they are not reentrant and therefore unusable in multi-threaded applications. Therefore provides the GNU C Library a new set of functions which can be used in this context. 
You can also scan the entire hosts database one entry at a time using sethostent, gethostent and endhostent.  Be careful when using these functions because they are not reentrant. 
