Most file systems support allocating large files in a non-contiguous fashion: the file is split into fragments which are allocated sequentially, but the fragments themselves can be scattered across the disk.  File systems generally try to avoid such fragmentation because it decreases performance, but if a file gradually increases in size, there might be no other option than to fragment it.  In addition, many file systems support sparse files with holes: regions of null bytes for which no backing storage has been allocated by the file system.  When the holes are finally overwritten with data, fragmentation can occur as well. 
Explicit allocation of storage for yet-unwritten parts of the file can help the system to avoid fragmentation.  Additionally, if storage pre-allocation fails, it is possible to report the out-of-disk error early, often without filling up the entire disk.  However, due to deduplication, copy-on-write semantics, and file compression, such pre-allocation may not reliably prevent the out-of-disk-space error from occurring later.  Checking for write errors is still required, and writes to memory-mapped regions created with mmap can still result in SIGBUS. 
