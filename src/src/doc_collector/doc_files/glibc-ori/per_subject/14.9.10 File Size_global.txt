Normally file sizes are maintained automatically.  A file begins with a size of 0 and is automatically extended when data is written past its end.  It is also possible to empty a file completely by an open or fopen call. 
However, sometimes it is necessary to reduce the size of a file. This can be done with the truncate and ftruncate functions. They were introduced in BSD Unix.  ftruncate was later added to POSIX.1. 
Some systems allow you to extend a file (creating holes) with these functions.  This is useful when using memory-mapped I/O (see Memory-mapped I/O), where files are not automatically extended. However, it is not portable but must be implemented if mmap allows mapping of files (i.e., _POSIX_MAPPED_FILES is defined). 
Using these functions on anything other than a regular file gives undefined results.  On many systems, such a call will appear to succeed, without actually accomplishing anything. 
As announced here is a little example of how to use ftruncate in combination with mmap: 

EXAMPLE_BEGIN
int fd;
void *start;
size_t len;

int
add (off_t at, void *block, size_t size)
{
  if (at + size > len)
    {
      /* Resize the file and remap.  */
      size_t ps = sysconf (_SC_PAGESIZE);
      size_t ns = (at + size + ps - 1) & ~(ps - 1);
      void *np;
      if (ftruncate (fd, ns) < 0)
        return -1;
      np = mmap (NULL, ns, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
      if (np == MAP_FAILED)
        return -1;
      start = np;
      len = ns;
    }
  memcpy ((char *) start + at, block, size);
  return 0;
}
EXAMPLE_END

The function add writes a block of memory at an arbitrary position in the file.  If the current size of the file is too small it is extended.  Note that it is extended by a whole number of pages.  This is a requirement of mmap.  The program has to keep track of the real size, and when it has finished a final ftruncate call should set the real size of the file. 
