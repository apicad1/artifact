In contrast to process-associated record locks (see File Locks), open file description record locks are associated with an open file description rather than a process. 
Using fcntl to apply an open file description lock on a region that already has an existing open file description lock that was created via the same file descriptor will never cause a lock conflict. 
Open file description locks are also inherited by child processes across fork, or clone with CLONE_FILES set (see Creating a Process), along with the file descriptor. 
It is important to distinguish between the open file description (an instance of an open file, usually created by a call to open) and an open file descriptor, which is a numeric value that refers to the open file description.  The locks described here are associated with the open file description and not the open file descriptor. 
Using dup (see Duplicating Descriptors) to copy a file descriptor does not give you a new open file description, but rather copies a reference to an existing open file description and assigns it to a new file descriptor.  Thus, open file description locks set on a file descriptor cloned by dup will never conflict with open file description locks set on the original descriptor since they refer to the same open file description.  Depending on the range and type of lock involved, the original lock may be modified by a F_OFD_SETLK or F_OFD_SETLKW command in this situation however. 
Open file description locks always conflict with process-associated locks, even if acquired by the same process or on the same open file descriptor. 
Open file description locks use the same struct flock as process-associated locks as an argument (see File Locks) and the macros for the command values are also declared in the header file fcntl.h. To use them, the macro _GNU_SOURCE must be defined prior to including any header file. 
In contrast to process-associated locks, any struct flock used as an argument to open file description lock commands must have the l_pid value set to 0.  Also, when returning information about an open file description lock in a F_GETLK or F_OFD_GETLK request, the l_pid field in struct flock will be set to -1 to indicate that the lock is not associated with a process. 
When the same struct flock is reused as an argument to a F_OFD_SETLK or F_OFD_SETLKW request after being used for an F_OFD_GETLK request, it is necessary to inspect and reset the l_pid field to 0. 
Open file description locks are useful in the same sorts of situations as process-associated locks. They can also be used to synchronize file access between threads within the same process by having each thread perform its own open of the file, to obtain its own open file description. 
Because open file description locks are automatically freed only upon closing the last file descriptor that refers to the open file description, this locking mechanism avoids the possibility that locks are inadvertently released due to a library routine opening and closing a file without the application being aware. 
As with process-associated locks, open file description locks are advisory. 
