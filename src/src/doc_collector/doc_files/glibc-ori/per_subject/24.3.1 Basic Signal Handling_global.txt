The signal function provides a simple interface for establishing an action for a particular signal.  The function and associated macros are declared in the header file signal.h.  
Compatibility Note: A problem encountered when working with the signal function is that it has different semantics on BSD and SVID systems.  The difference is that on SVID systems the signal handler is deinstalled after signal delivery.  On BSD systems the handler must be explicitly deinstalled.  In the GNU C Library we use the BSD version by default.  To use the SVID version you can either use the function sysv_signal (see below) or use the _XOPEN_SOURCE feature select macro (see Feature Test Macros).  In general, use of these functions should be avoided because of compatibility problems.  It is better to use sigaction if it is available since the results are much more reliable. 
Here is a simple example of setting up a handler to delete temporary files when certain fatal signals happen: 

EXAMPLE_BEGIN
#include <signal.h>

void
termination_handler (int signum)
{
  struct temp_file *p;

  for (p = temp_file_list; p; p = p->next)
    unlink (p->name);
}

int
main (void)
{
  …
  if (signal (SIGINT, termination_handler) == SIG_IGN)
    signal (SIGINT, SIG_IGN);
  if (signal (SIGHUP, termination_handler) == SIG_IGN)
    signal (SIGHUP, SIG_IGN);
  if (signal (SIGTERM, termination_handler) == SIG_IGN)
    signal (SIGTERM, SIG_IGN);
  …
}
EXAMPLE_END

Note that if a given signal was previously set to be ignored, this code avoids altering that setting.  This is because non-job-control shells often ignore certain signals when starting children, and it is important for the children to respect this. 
We do not handle SIGQUIT or the program error signals in this example because these are designed to provide information for debugging (a core dump), and the temporary files may give useful information. 
