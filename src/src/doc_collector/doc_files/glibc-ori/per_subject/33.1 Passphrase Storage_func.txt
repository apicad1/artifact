
>>>>>>>>>>>>>>>>>>>>
- Function: char * crypt (const char *phrase, const char *salt)
Preliminary: | MT-Unsafe race:crypt | AS-Unsafe corrupt lock heap dlopen | AC-Unsafe lock mem | See POSIX Safety Concepts. 
The function crypt converts a passphrase string, phrase, into a one-way hash suitable for storage in the user database.  The string that it returns will consist entirely of printable ASCII characters.  It will not contain whitespace, nor any of the characters ‘:’, ‘;’, ‘*’, ‘!’, or ‘\’. 
The salt parameter controls which one-way function is used, and it also ensures that the output of the one-way function is different for every user, even if they have the same passphrase.  This makes it harder to guess passphrases from a large user database.  Without salt, the attacker could make a guess, run crypt on it once, and compare the result with all the hashes.  Salt forces the attacker to make separate calls to crypt for each user. 
To verify a passphrase, pass the previously hashed passphrase as the salt.  To hash a new passphrase for storage, set salt to a string consisting of a prefix plus a sequence of randomly chosen characters, according to this table: 

TABLE_BEGIN
 SHA-2-512 ‘$6$’ 16 characters
 SHA-2-256 ‘$5$’ 16 characters
 MD5 ‘$1$’ 8 characters
 DES ‘’ 2 characters
TABLE_END

In all cases, the random characters should be chosen from the alphabet ./0-9A-Za-z. 
With all of the hash functions except DES, phrase can be arbitrarily long, and all eight bits of each byte are significant. With DES, only the first eight characters of phrase affect the output, and the eighth bit of each byte is also ignored. 
crypt can fail.  Some implementations return NULL on failure, and others return an invalid hashed passphrase, which will begin with a ‘*’ and will not be the same as salt.  In either case, errno will be set to indicate the problem.  Some of the possible error codes are: 
	EINVAL
salt is invalid; neither a previously hashed passphrase, nor a well-formed new salt for any of the supported hash functions.  
	EPERM
The system configuration forbids use of the hash function selected by salt.  
	ENOMEM
Failed to allocate internal scratch storage.  
	ENOSYS
	EOPNOTSUPP
Hashing passphrases is not supported at all, or the hash function selected by salt is not supported.  The GNU C Library does not use these error codes, but they may be encountered on other operating systems. 
crypt uses static storage for both internal scratchwork and the string it returns.  It is not safe to call crypt from multiple threads simultaneously, and the string it returns will be overwritten by any subsequent call to crypt. 
crypt is specified in the X/Open Portability Guide and is present on nearly all historical Unix systems.  However, the XPG does not specify any one-way functions. 
crypt is declared in unistd.h.  The GNU C Library also declares this function in crypt.h. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Function: char * crypt_r (const char *phrase, const char *salt, struct crypt_data *data)
Preliminary: | MT-Safe  | AS-Unsafe corrupt lock heap dlopen | AC-Unsafe lock mem | See POSIX Safety Concepts. 

The function crypt_r is a thread-safe version of crypt. Instead of static storage, it uses the memory pointed to by its data argument for both scratchwork and the string it returns. It can safely be used from multiple threads, as long as different data objects are used in each thread.  The string it returns will still be overwritten by another call with the same data. 
data must point to a struct crypt_data object allocated by the caller.  All of the fields of struct crypt_data are private, but before one of these objects is used for the first time, it must be initialized to all zeroes, using memset or similar. After that, it can be reused for many calls to crypt_r without erasing it again.  struct crypt_data is very large, so it is best to allocate it with malloc rather than as a local variable.  See Memory Allocation. 
crypt_r is a GNU extension.  It is declared in crypt.h, as is struct crypt_data. 
