The C library on SVID systems contains yet another kind of random number generator functions.  They use a state of 48 bits of data.  The user can choose among a collection of functions which return the random bits in different forms. 
Generally there are two kinds of function.  The first uses a state of the random number generator which is shared among several functions and by all threads of the process.  The second requires the user to handle the state. 
All functions have in common that they use the same congruential formula with the same constants.  The formula is 

EXAMPLE_BEGIN
Y = (a * X + c) mod m
EXAMPLE_END

where X is the state of the generator at the beginning and Y the state at the end.  a and c are constants determining the way the generator works.  By default they are 

EXAMPLE_BEGIN
a = 0x5DEECE66D = 25214903917
c = 0xb = 11
EXAMPLE_END

but they can also be changed by the user.  m is of course 2^48 since the state consists of a 48-bit array. 
The prototypes for these functions are in stdlib.h.  
The internal state of the random number generator can be initialized in several ways.  The methods differ in the completeness of the information provided. 
There is one more function to initialize the random number generator which enables you to specify even more information by allowing you to change the parameters in the congruential formula. 
All the above functions have in common that they use the global parameters for the congruential formula.  In multi-threaded programs it might sometimes be useful to have different parameters in different threads.  For this reason all the above functions have a counterpart which works on a description of the random number generator in the user-supplied buffer instead of the global state. 
Please note that it is no problem if several threads use the global state if all threads use the functions which take a pointer to an array containing the state.  The random numbers are computed following the same loop but if the state in the array is different all threads will obtain an individual random number generator. 
The user-supplied buffer must be of type struct drand48_data. This type should be regarded as opaque and not manipulated directly. 
Before any of the above functions are used the buffer of type struct drand48_data should be initialized.  The easiest way to do this is to fill the whole buffer with null bytes, e.g. by 

EXAMPLE_BEGIN
memset (buffer, '\0', sizeof (struct drand48_data));
EXAMPLE_END

Using any of the reentrant functions of this family now will automatically initialize the random number generator to the default values for the state and the parameters of the congruential formula. 
The other possibility is to use any of the functions which explicitly initialize the buffer.  Though it might be obvious how to initialize the buffer from looking at the parameter to the function, it is highly recommended to use these functions since the result might not always be what you expect. 
