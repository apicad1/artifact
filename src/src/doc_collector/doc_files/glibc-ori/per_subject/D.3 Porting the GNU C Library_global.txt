The GNU C Library is written to be easily portable to a variety of machines and operating systems.  Machine- and operating system-dependent functions are well separated to make it easy to add implementations for new machines or operating systems.  This section describes the layout of the library source tree and explains the mechanisms used to select machine-dependent code to use. 
All the machine-dependent and operating system-dependent files in the library are in the subdirectory sysdeps under the top-level library source directory.  This directory contains a hierarchy of subdirectories (see Hierarchy Conventions). 
Each subdirectory of sysdeps contains source files for a particular machine or operating system, or for a class of machine or operating system (for example, systems by a particular vendor, or all machines that use IEEE 754 floating-point format).  A configuration specifies an ordered list of these subdirectories.  Each subdirectory implicitly appends its parent directory to the list.  For example, specifying the list unix/bsd/vax is equivalent to specifying the list unix/bsd/vax unix/bsd unix.  A subdirectory can also specify that it implies other subdirectories which are not directly above it in the directory hierarchy.  If the file Implies exists in a subdirectory, it lists other subdirectories of sysdeps which are appended to the list, appearing after the subdirectory containing the Implies file.  Lines in an Implies file that begin with a ‘#’ character are ignored as comments.  For example, unix/bsd/Implies contains: 

EXAMPLE_BEGIN
# BSD has Internet-related things.
unix/inet
EXAMPLE_END

and unix/Implies contains: 

EXAMPLE_BEGIN
posix
EXAMPLE_END

So the final list is unix/bsd/vax unix/bsd unix/inet unix posix. 
sysdeps has a “special” subdirectory called generic.  It is always implicitly appended to the list of subdirectories, so you needn’t put it in an Implies file, and you should not create any subdirectories under it intended to be new specific categories. generic serves two purposes.  First, the makefiles do not bother to look for a system-dependent version of a file that’s not in generic.  This means that any system-dependent source file must have an analogue in generic, even if the routines defined by that file are not implemented on other platforms.  Second, the generic version of a system-dependent file is used if the makefiles do not find a version specific to the system you’re compiling for. 
If it is possible to implement the routines in a generic file in machine-independent C, using only other machine-independent functions in the C library, then you should do so.  Otherwise, make them stubs.  A stub function is a function which cannot be implemented on a particular machine or operating system.  Stub functions always return an error, and set errno to ENOSYS (Function not implemented). See Error Reporting.  If you define a stub function, you must place the statement stub_warning(function), where function is the name of your function, after its definition.  This causes the function to be listed in the installed <gnu/stubs.h>, and makes GNU ld warn when the function is used. 
Some rare functions are only useful on specific systems and aren’t defined at all on others; these do not appear anywhere in the system-independent source code or makefiles (including the generic directory), only in the system-dependent Makefile in the specific system’s subdirectory. 
If you come across a file that is in one of the main source directories (string, stdio, etc.), and you want to write a machine- or operating system-dependent version of it, move the file into sysdeps/generic and write your new implementation in the appropriate system-specific subdirectory.  Note that if a file is to be system-dependent, it must not appear in one of the main source directories. 
There are a few special files that may exist in each subdirectory of sysdeps: 
That is the general system for how system-dependencies are isolated. 

TABLE_BEGIN
 • Hierarchy Conventions    The layout of the sysdeps hierarchy.

 • Porting to Unix    Porting the library to an average
                                   Unix-like system.

TABLE_END

