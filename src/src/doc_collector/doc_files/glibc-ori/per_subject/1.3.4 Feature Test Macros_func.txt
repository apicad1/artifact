
>>>>>>>>>>>>>>>>>>>>
- Macro: _POSIX_SOURCE
If you define this macro, then the functionality from the POSIX.1 standard (IEEE Standard 1003.1) is available, as well as all of the ISO C facilities. 
The state of _POSIX_SOURCE is irrelevant if you define the macro _POSIX_C_SOURCE to a positive integer. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _POSIX_C_SOURCE
Define this macro to a positive integer to control which POSIX functionality is made available.  The greater the value of this macro, the more functionality is made available. 
If you define this macro to a value greater than or equal to 1, then the functionality from the 1990 edition of the POSIX.1 standard (IEEE Standard 1003.1-1990) is made available. 
If you define this macro to a value greater than or equal to 2, then the functionality from the 1992 edition of the POSIX.2 standard (IEEE Standard 1003.2-1992) is made available. 
If you define this macro to a value greater than or equal to 199309L, then the functionality from the 1993 edition of the POSIX.1b standard (IEEE Standard 1003.1b-1993) is made available. 
If you define this macro to a value greater than or equal to 199506L, then the functionality from the 1995 edition of the POSIX.1c standard (IEEE Standard 1003.1c-1995) is made available. 
If you define this macro to a value greater than or equal to 200112L, then the functionality from the 2001 edition of the POSIX standard (IEEE Standard 1003.1-2001) is made available. 
If you define this macro to a value greater than or equal to 200809L, then the functionality from the 2008 edition of the POSIX standard (IEEE Standard 1003.1-2008) is made available. 
Greater values for _POSIX_C_SOURCE will enable future extensions. The POSIX standards process will define these values as necessary, and the GNU C Library should support them some time after they become standardized. The 1996 edition of POSIX.1 (ISO/IEC 9945-1: 1996) states that if you define _POSIX_C_SOURCE to a value greater than or equal to 199506L, then the functionality from the 1996 edition is made available.  In general, in the GNU C Library, bugfixes to the standards are included when specifying the base version; e.g., POSIX.1-2004 will always be included with a value of 200112L. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _XOPEN_SOURCE
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _XOPEN_SOURCE_EXTENDED
If you define this macro, functionality described in the X/Open Portability Guide is included.  This is a superset of the POSIX.1 and POSIX.2 functionality and in fact _POSIX_SOURCE and _POSIX_C_SOURCE are automatically defined. 
As the unification of all Unices, functionality only available in BSD and SVID is also included. 
If the macro _XOPEN_SOURCE_EXTENDED is also defined, even more functionality is available.  The extra functions will make all functions available which are necessary for the X/Open Unix brand. 
If the macro _XOPEN_SOURCE has the value 500 this includes all functionality described so far plus some new definitions from the Single Unix Specification, version 2.  The value 600 (corresponding to the sixth revision) includes definitions from SUSv3, and using 700 (the seventh revision) includes definitions from SUSv4. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _LARGEFILE_SOURCE
If this macro is defined some extra functions are available which rectify a few shortcomings in all previous standards.  Specifically, the functions fseeko and ftello are available.  Without these functions the difference between the ISO C interface (fseek, ftell) and the low-level POSIX interface (lseek) would lead to problems. 
This macro was introduced as part of the Large File Support extension (LFS). 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _LARGEFILE64_SOURCE
If you define this macro an additional set of functions is made available which enables 32 bit systems to use files of sizes beyond the usual limit of 2GB.  This interface is not available if the system does not support files that large.  On systems where the natural file size limit is greater than 2GB (i.e., on 64 bit systems) the new functions are identical to the replaced functions. 
The new functionality is made available by a new set of types and functions which replace the existing ones.  The names of these new objects contain 64 to indicate the intention, e.g., off_t vs. off64_t and fseeko vs. fseeko64. 
This macro was introduced as part of the Large File Support extension (LFS).  It is a transition interface for the period when 64 bit offsets are not generally used (see _FILE_OFFSET_BITS). 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _FILE_OFFSET_BITS
This macro determines which file system interface shall be used, one replacing the other.  Whereas _LARGEFILE64_SOURCE makes the 64 bit interface available as an additional interface, _FILE_OFFSET_BITS allows the 64 bit interface to replace the old interface. 
If _FILE_OFFSET_BITS is defined to the value 32, the 32 bit interface is used and types like off_t have a size of 32 bits on 32 bit systems. 
If the macro is defined to the value 64, the large file interface replaces the old interface.  I.e., the functions are not made available under different names (as they are with _LARGEFILE64_SOURCE). Instead the old function names now reference the new functions, e.g., a call to fseeko now indeed calls fseeko64. 
If the macro is not defined it currently defaults to 32, but this default is planned to change due to a need to update time_t for Y2038 safety, and applications should not rely on the default. 
This macro should only be selected if the system provides mechanisms for handling large files.  On 64 bit systems this macro has no effect since the *64 functions are identical to the normal functions. 
This macro was introduced as part of the Large File Support extension (LFS). 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _TIME_BITS
This macro determines the bit size of time_t, and therefore the bit size of all time_t-derived types and the prototypes of all related functions. 
  If _TIME_BITS is undefined, the bit size of time_t is architecture dependent.  Currently it defaults to 64 bits on most architectures.  Although it defaults to 32 bits on some traditional architectures (i686, ARM), this is planned to change and applications should not rely on this.   If _TIME_BITS is defined to be 64, time_t is defined to be a 64-bit integer.  On platforms where time_t was traditionally 32 bits, calls to proper syscalls depend on the Linux kernel version on which the system is running. For Linux kernel version above 5.1 syscalls supporting 64-bit time are used. Otherwise, a fallback code is used with legacy (i.e. 32-bit) syscalls.   If _TIME_BITS is defined to be 32, time_t is defined to be a 32-bit integer where that is supported.  This is not recommended, as 32-bit time_t stops working in the year 2038.   For any other use case a compile-time error is emitted. 
_TIME_BITS=64 can be defined only when _FILE_OFFSET_BITS=64 is also defined. 
By using this macro certain ports gain support for 64-bit time and as a result become immune to the Y2038 problem. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _ISOC99_SOURCE
If this macro is defined, features from ISO C99 are included.  Since these features are included by default, this macro is mostly relevant when the compiler uses an earlier language version. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _ISOC11_SOURCE
If this macro is defined, ISO C11 extensions to ISO C99 are included. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _ISOC2X_SOURCE
If this macro is defined, ISO C2X extensions to ISO C11 are included. Only some features from this draft standard are supported by the GNU C Library. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: __STDC_WANT_LIB_EXT2__
If you define this macro to the value 1, features from ISO/IEC TR 24731-2:2010 (Dynamic Allocation Functions) are enabled.  Only some of the features from this TR are supported by the GNU C Library. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: __STDC_WANT_IEC_60559_BFP_EXT__
If you define this macro, features from ISO/IEC TS 18661-1:2014 (Floating-point extensions for C: Binary floating-point arithmetic) are enabled.  Only some of the features from this TS are supported by the GNU C Library. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: __STDC_WANT_IEC_60559_FUNCS_EXT__
If you define this macro, features from ISO/IEC TS 18661-4:2015 (Floating-point extensions for C: Supplementary functions) are enabled.  Only some of the features from this TS are supported by the GNU C Library. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: __STDC_WANT_IEC_60559_TYPES_EXT__
If you define this macro, features from ISO/IEC TS 18661-3:2015 (Floating-point extensions for C: Interchange and extended types) are enabled.  Only some of the features from this TS are supported by the GNU C Library. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: __STDC_WANT_IEC_60559_EXT__
If you define this macro, ISO C2X features defined in Annex F of that standard are enabled.  This affects declarations of the totalorder functions and functions related to NaN payloads. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _GNU_SOURCE
If you define this macro, everything is included: ISO C89, ISO C99, POSIX.1, POSIX.2, BSD, SVID, X/Open, LFS, and GNU extensions.  In the cases where POSIX.1 conflicts with BSD, the POSIX definitions take precedence. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _DEFAULT_SOURCE
If you define this macro, most features are included apart from X/Open, LFS and GNU extensions: the effect is to enable features from the 2008 edition of POSIX, as well as certain BSD and SVID features without a separate feature test macro to control them. 
Be aware that compiler options also affect included features: 
  If you use a strict conformance option, features beyond those from the compiler’s language version will be disabled, though feature test macros may be used to enable them.   Features enabled by compiler options are not overridden by feature test macros. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _ATFILE_SOURCE
If this macro is defined, additional *at interfaces are included. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _FORTIFY_SOURCE
If this macro is defined to 1, security hardening is added to various library functions.  If defined to 2, even stricter checks are applied. If defined to 3, the GNU C Library may also use checks that may have an additional performance overhead. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _DYNAMIC_STACK_SIZE_SOURCE
If this macro is defined, correct (but non compile-time constant) MINSIGSTKSZ, SIGSTKSZ and PTHREAD_STACK_MIN are defined. 
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _REENTRANT
<<<<<<<<<<<<<<<<<<<<


>>>>>>>>>>>>>>>>>>>>
- Macro: _THREAD_SAFE
These macros are obsolete.  They have the same effect as defining _POSIX_C_SOURCE with the value 199506L. 
Some very old C libraries required one of these macros to be defined for basic functionality (e.g. getchar) to be thread-safe. 
