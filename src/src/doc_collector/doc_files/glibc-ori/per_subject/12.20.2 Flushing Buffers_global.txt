Flushing output on a buffered stream means transmitting all accumulated characters to the file.  There are many circumstances when buffered output on a stream is flushed automatically: 
  When you try to do output and the output buffer is full.   When the stream is closed.  See Closing Streams.   When the program terminates by calling exit. See Normal Termination.   When a newline is written, if the stream is line buffered.   Whenever an input operation on any stream actually reads data from its file. 
If you want to flush the buffered output at another time, call fflush, which is declared in the header file stdio.h.  
The fflush function can be used to flush all streams currently opened.  While this is useful in some situations it does often more than necessary since it might be done in situations when terminal input is required and the program wants to be sure that all output is visible on the terminal.  But this means that only line buffered streams have to be flushed.  Solaris introduced a function especially for this.  It was always available in the GNU C Library in some form but never officially exported. 
Compatibility Note: Some brain-damaged operating systems have been known to be so thoroughly fixated on line-oriented input and output that flushing a line buffered stream causes a newline to be written! Fortunately, this “feature” seems to be becoming less common.  You do not need to worry about this with the GNU C Library. 
In some situations it might be useful to not flush the output pending for a stream but instead simply forget it.  If transmission is costly and the output is not needed anymore this is valid reasoning.  In this situation a non-standard function introduced in Solaris and available in the GNU C Library can be used. 
