A C program inherits its locale environment variables when it starts up. This happens automatically.  However, these variables do not automatically control the locale used by the library functions, because ISO C says that all programs start by default in the standard ‘C’ locale.  To use the locales specified by the environment, you must call setlocale.  Call it as follows: 

EXAMPLE_BEGIN
setlocale (LC_ALL, "");
EXAMPLE_END

to select a locale based on the user choice of the appropriate environment variables. 
You can also use setlocale to specify a particular locale, for general use or for a specific category. 
The symbols in this section are defined in the header file locale.h. 
Here is an example showing how you might use setlocale to temporarily switch to a new locale. 

EXAMPLE_BEGIN
#include <stddef.h>
#include <locale.h>
#include <stdlib.h>
#include <string.h>

void
with_other_locale (char *new_locale,
                   void (*subroutine) (int),
                   int argument)
{
  char *old_locale, *saved_locale;

  /* Get the name of the current locale.  */
  old_locale = setlocale (LC_ALL, NULL);

  /* Copy the name so it won’t be clobbered by setlocale. */
  saved_locale = strdup (old_locale);
  if (saved_locale == NULL)
    fatal ("Out of memory");

  /* Now change the locale and do some stuff with it. */
  setlocale (LC_ALL, new_locale);
  (*subroutine) (argument);

  /* Restore the original locale. */
  setlocale (LC_ALL, saved_locale);
  free (saved_locale);
}
EXAMPLE_END

Portability Note: Some ISO C systems may define additional locale categories, and future versions of the library will do so.  For portability, assume that any symbol beginning with ‘LC_’ might be defined in locale.h. 
