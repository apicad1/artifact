These functions and the corresponding data structures are declared in the header file utmp.h.  
The ut_type, ut_pid, ut_id, ut_tv, and ut_host fields are not available on all systems.  Portable applications therefore should be prepared for these situations.  To help do this the utmp.h header provides macros _HAVE_UT_TYPE, _HAVE_UT_PID, _HAVE_UT_ID, _HAVE_UT_TV, and _HAVE_UT_HOST if the respective field is available.  The programmer can handle the situations by using #ifdef in the program code. 
The following macros are defined for use as values for the ut_type member of the utmp structure.  The values are integer constants. 
The size of the ut_line, ut_id, ut_user and ut_host arrays can be found using the sizeof operator. 
Many older systems have, instead of an ut_tv member, an ut_time member, usually of type time_t, for representing the time associated with the entry.  Therefore, for backwards compatibility only, utmp.h defines ut_time as an alias for ut_tv.tv_sec. 
All the get* functions mentioned before store the information they return in a static buffer.  This can be a problem in multi-threaded programs since the data returned for the request is overwritten by the return value data in another thread.  Therefore the GNU C Library provides as extensions three more functions which return the data in a user-provided buffer. 
In addition to the user accounting database, most systems keep a number of similar databases.  For example most systems keep a log file with all previous logins (usually in /etc/wtmp or /var/log/wtmp). 
For specifying which database to examine, the following function should be used. 
Specially for maintaining log-like databases the GNU C Library provides the following function: 
Portability Note: Although many operating systems provide a subset of these functions, they are not standardized.  There are often subtle differences in the return types, and there are considerable differences between the various definitions of struct utmp.  When programming for the GNU C Library, it is probably best to stick with the functions described in this section.  If however, you want your program to be portable, consider using the XPG functions described in XPG Functions, or take a look at the BSD compatible functions in Logging In and Out. 
