The exact set of features available when you compile a source file is controlled by which feature test macros you define. 
If you compile your programs using ‘gcc -ansi’, you get only the ISO C library features, unless you explicitly request additional features by defining one or more of the feature macros. See GNU CC Command Options in The GNU CC Manual, for more information about GCC options. 
You should define these macros by using ‘#define’ preprocessor directives at the top of your source code files.  These directives must come before any #include of a system header file.  It is best to make them the very first thing in the file, preceded only by comments.  You could also use the ‘-D’ option to GCC, but it’s better if you make the source files indicate their own meaning in a self-contained way. 
This system exists to allow the library to conform to multiple standards. Although the different standards are often described as supersets of each other, they are usually incompatible because larger standards require functions with names that smaller ones reserve to the user program.  This is not mere pedantry — it has been a problem in practice.  For instance, some non-GNU programs define functions named getline that have nothing to do with this library’s getline.  They would not be compilable if all features were enabled indiscriminately. 
This should not be used to verify that a program conforms to a limited standard.  It is insufficient for this purpose, as it will not protect you from including header files outside the standard, or relying on semantics undefined within the standard. 
We recommend you use _GNU_SOURCE in new programs.  If you don’t specify the ‘-ansi’ option to GCC, or other conformance options such as -std=c99, and don’t define any of these macros explicitly, the effect is the same as defining _DEFAULT_SOURCE to 1. 
When you define a feature test macro to request a larger class of features, it is harmless to define in addition a feature test macro for a subset of those features.  For example, if you define _POSIX_C_SOURCE, then defining _POSIX_SOURCE as well has no effect.  Likewise, if you define _GNU_SOURCE, then defining either _POSIX_SOURCE or _POSIX_C_SOURCE as well has no effect. 
