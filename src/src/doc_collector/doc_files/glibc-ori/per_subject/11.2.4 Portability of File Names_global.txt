The rules for the syntax of file names discussed in File Names, are the rules normally used by GNU systems and by other POSIX systems.  However, other operating systems may use other conventions. 
There are two reasons why it can be important for you to be aware of file name portability issues: 
  If your program makes assumptions about file name syntax, or contains embedded literal file name strings, it is more difficult to get it to run under other operating systems that use different syntax conventions.   Even if you are not concerned about running your program on machines that run other operating systems, it may still be possible to access files that use different naming conventions.  For example, you may be able to access file systems on another computer running a different operating system over a network, or read and write disks in formats used by other operating systems. 
The ISOÂ C standard says very little about file name syntax, only that file names are strings.  In addition to varying restrictions on the length of file names and what characters can validly appear in a file name, different operating systems use different conventions and syntax for concepts such as structured directories and file types or extensions.  Some concepts such as file versions might be supported in some operating systems and not by others. 
The POSIX.1 standard allows implementations to put additional restrictions on file name syntax, concerning what characters are permitted in file names and on the length of file name and file name component strings.  However, on GNU systems, any character except the null character is permitted in a file name string, and on GNU/Hurd systems there are no limits on the length of file name strings. 
