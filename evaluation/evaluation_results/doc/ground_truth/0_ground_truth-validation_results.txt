The functions with obvious usage directive sentences:
Note: for arg.post, we only concern whether the argument carries return status but not it can be changed.
* ADMISSION_SYNTAX_new(causal √, return √)
* argz_create(arg.pre ×)
* argz_extract(arg.pre ×)
* argz_next(return √)
* ASN1_ENUMERATED_get(return)
* ASN1_INTEGER_get_int64(return √)
* ASN1_INTEGER_new(return √)
* ASN1_OBJECT_new(return √)
* ASN1_STRING_data(return)
* ASN1_STRING_TABLE_add(causal √, return √)
* ASN1_TIME_cmp_time_t(return √)
* ASN1_TYPE_cmp(return √)
* ASRange_new(causal √, return √)
* ASYNC_WAIT_CTX_get_callback(return)
* b2i_PVK_bio_ex(return √)
* b2i_PVK_bio(return √)
* backtrace(return)
* bcmp(return √)
* BIO_ADDRINFO_next(return)
* BIO_debug_callback(return √)
* BIO_get_accept_name(return √)
* BIO_get_bind_mode(return √)
* BIO_get_cipher_status(return √)
* BIO_get_close(return)
* BIO_new_buffer_ssl_connect(return)
* BIO_set_fd(return)
* BIO_set_indent(arg.pre ×, return √)
* BIO_set_mem_eof_return(arg.pre √, return ×)
* BIO_shutdown_wr(return)
* BIO_snprintf(return √)
* BIO_ssl_copy_session_id(return √)
* BIO_up_ref(return √)
* blkdev_get_by_path(return)
* BN_BLINDING_new(return √)
* BN_mul_word(return √)
* BN_print(return √)
* BN_to_ASN1_ENUMERATED(return √)
* BN_ucmp(return √)
* bstr_printf(return)
* cfgetospeed(return)
* CIRCLEQ_NEXT(return)
* clk_disable(causal ×)
* clk_get_accuracy(return √)
* CMS_get0_signers(return √)
* CMS_ReceiptRequest_free(causal √)
* CMS_sign_ex(return √)
* CMS_sign_receipt(return √)
* CPU_EQUAL(return √)
* CRYPTO_THREAD_lock_new(return √)
* CT_POLICY_EVAL_CTX_new_ex(return √)
* d2i_ADMISSION_SYNTAX(return √)
* d2i_ASIdOrRange(return √)
* d2i_DSA_SIG(return √)
* d2i_EDIPARTYNAME(return √)
* d2i_ESS_CERT_ID_V2(return √)
* d2i_NOTICEREF(return √)
* d2i_OCSP_CRLID(return √)
* d2i_OCSP_REQINFO(return √)
* d2i_OCSP_SIGNATURE(return)
* d2i_PKCS7_ENC_CONTENT(return)
* d2i_PKCS7_SIGNER_INFO(return √)
* d2i_PKCS12(return √)
* d2i_PrivateKey_ex(arg.pre √,return √)
* d2i_SSL_SESSION(return)
* d2i_TS_RESP_fp(return √)
* d2i_X509_VAL(return √)
* DES_key_sched(return √)
* DES_set_key_checked(return √)
* DH_meth_set_init(causal ×)
* DH_set_ex_data(return √)
* DSA_generate_key(return √)
* DSA_set_flags(causal √)
* DSA_set_method(return ×)
* EC_GROUP_check_named_curve(return √)
* EC_GROUP_check(return √)
* EC_GROUP_cmp(return √)
* EC_GROUP_copy(return √)
* EC_GROUP_set_seed(return ×)
* EC_KEY_get_ex_new_index(return √)
* EC_KEY_get_flags(causal √)
* EC_KEY_precompute_mult(return √)
* EC_KEY_set_group(return √)
* EC_POINT_copy(return √)
* EC_POINT_point2buf(causal ×, arg.pre √, return √)
* ECDSA_SIG_set0(return √)
* ENGINE_ctrl(return ×)
* ENGINE_get_first(causal ×, return √)
* ENGINE_get_init_function(return)
* ENGINE_get_load_privkey_function(return)
* ENGINE_init(causal √, return √)
* ERR_func_error_string(return √)
* ERR_reason_error_string(return √)
* ESS_CERT_ID_dup(return √)
* ESS_CERT_ID_V2_free(causal √)
* ESS_SIGNING_CERT_dup(return √)
* EVP_CIPHER_get_key_length(return)
* EVP_CipherFinal(causal ×)
* EVP_Digest(return √)
* EVP_DigestFinalXOF(return √)
* EVP_DigestUpdate(causal ×, return √)
* EVP_ENCODE_CTX_copy(arg.pre √)
* EVP_EncryptFinal_ex(causal ×, return √)
* EVP_EncryptUpdate(causal ×, return √)
* EVP_get_cipherbyname(return √)
* EVP_get_cipherbyobj(return √)
* EVP_KDF_CTX_get_kdf_size(return √)
* EVP_KDF_fetch(return √)
* EVP_MAC_CTX_get_block_size(return √)
* EVP_MAC_final(return √)
* EVP_MAC_up_ref(return √)
* EVP_MAC_update(return √)
* EVP_MD_CTX_get_type(return)
* EVP_MD_get_pkey_type(return)
* EVP_MD_meth_get_flags(return √)
* EVP_MD_names_do_all(return ×)
* EVP_PKEY_assign_DH(return √)
* EVP_PKEY_assign_SIPHASH(return √)
* EVP_PKEY_decrypt_init_ex(return √)
* EVP_PKEY_get_group_name(return √)
* EVP_PKEY_get_raw_private_key(return √)
* EVP_PKEY_meth_get_count(arg.pre, return)
* EVP_PKEY_meth_new(return √)
* EVP_PKEY_set_ex_data(return √)
* EVP_PKEY_set1_engine(return √)
* EVP_PKEY_verify_init(return √)
* EVP_set_default_propertie(return √)
* EVP_SignInit_ex(arg.pre √, return √)
* fgetgrent(return √)
* fgetpos(return √)
* fgetws(return ×)
* filemap_read(return ×)
* find_or_create_page(return √)
* fmemopen(return √)
* folio_contains(return ×)
* folio_redirty_for_writepage(return √)
* fputws(return √)
* fread(return)
* GENERAL_SUBTREE_free(causal √)
* generic_writepages(return √)
* getaddrinfo_a(return √)
* getaliasent_r(return ×)
* getcontext(return ×)
* getdate_r(return)
* getdelim(return ×)
* getfsspec(return √)
* getopt_long_only(return ×)
* getpwent(return √)
* getpwuid_r(arg.post √, return √)
* getrpcport(return √)
* getservbyname(return √)
* globfree(causal √)
* hcreate_r(arg.pre √, return √, causal √)
* i2d_ADMISSION_SYNTAX(return)
* i2d_ASN1_OCTET_STRING(return)
* i2d_ASN1_VISIBLESTRING(return)
* i2d_ASRange(return)
* i2d_OCSP_CERTID(return)
* i2d_OCSP_RESPONSE(return)
* i2d_PKCS7_DIGEST(return)
* i2d_PKCS7_RECIP_INFO(return)
* i2d_PKCS8_PRIV_KEY_INFO_bio(return √)
* i2d_X509_PUBKEY_bio(return √)
* i2d_X509_REQ_fp(return ×)
* i2s_ASN1_IA5STRING(return √)
* inet_ntop(return ×)
* initgroups(return √)
* initstate_r(arg.pre √)
* isnan(return √)
* kfifo_to_user(return)
* kmemdup_nul(return √)
* kstrdup(return √)
* login_tty(return √)
* lookup_resource(return)
* lsearch(return √)
* lsm_file_alloc(return)
* mbrlen(return ×)
* mbstowcs(return ×)
* mbtowc(return √)
* mcheck_check_all(causal ×)
* MD4_Init(return ×)
* MDC2_Init(return √)
* mq_setattr(return ×)
* NCONF_get_section_names(causal ×)
* OCSP_basic_verify(return √)
* OCSP_request_sign(return √)
* OCSP_resp_get0_id(return)
* OCSP_resp_get0_signer(return √)
* OCSP_resp_get1_id(return √)
* OCSP_RESPID_new(causal √, return √)
* OCSP_SERVICELOC_free(causal √)
* OPENSSL_INIT_set_config_filename(causal √)
* OPENSSL_secure_zalloc(return)
* OSSL_CMP_certConf_cb(causal ×, return ×)
* OSSL_CMP_CTX_get_status(return √)
* OSSL_CMP_CTX_new(return √)
* OSSL_CMP_CTX_snprint_PKIStatus(return √)
* OSSL_CMP_SRV_CTX_get0_cmp_ctx(return √)
* OSSL_CMP_validate_cert_path(return √)
* OSSL_DECODER_CTX_add_decoder(return √)
* OSSL_DECODER_CTX_add_extra(return √)
* OSSL_DECODER_CTX_new_for_pkey(return √)
* OSSL_ENCODER_CTX_set_params(return √)
* OSSL_ENCODER_CTX_set_passphrase_ui(return √)
* OSSL_ENCODER_get0_description(return √)
* OSSL_HTTP_REQ_CTX_set_expected(causal ×, return √)
* OSSL_HTTP_REQ_CTX_set_request_line(return √)
* OSSL_LIB_CTX_new_from_dispatch(arg.pre √)
* OSSL_LIB_CTX_get0_global_default(return √)
* OSSL_LIB_CTX_set0_default(return √)
* OSSL_PROVIDER_load(return √)
* OSSL_SELF_TEST_new(causal √, return √)
* OSSL_STORE_open(causal ×, return √)
* OSSL_STORE_register_loader(causal ×, return √)
* OSSL_STORE_SEARCH_get0_string(return √)
* OSSL_STORE_supports_search(return √)
* OTHERNAME_free(causal √)
* PBEPARAM_free(causal √)
* PBKDF2PARAM_new(causal √, return √)
* PEM_bytes_read_bio_secmem(causal √, return √)
* PEM_get_EVP_CIPHER_INFO(causal ×, return √)
* PEM_read_bio_SSL_SESSION(return √)
* PEM_read_bio(return √)
* PEM_write_bio_PKCS7_stream(return √)
* PEM_X509_INFO_read_ex(return √)
* PKCS7_dup(return √)
* PKCS7_ENC_CONTENT_free(causal √)
* PKCS7_get0_signers(return √)
* PKCS7_SIGNER_INFO_free(causal √)
* PKCS8_decrypt(return √)
* PKCS8_pkey_add1_attr(return √)
* PKCS8_PRIV_KEY_INFO_free(causal √)
* PKCS12_free(causal √)
* PKCS12_SAFEBAG_free(causal √)
* pthread_attr_getsigmask_np(return √)
* pthread_getconcurrency(return)
* pthread_sigqueue(return)
* pthread_spin_init(arg.pre, return √)
* RAND_add(arg.pre)
* RAND_query_egd_bytes(arg.pre, return √)
* RAND_write_file(return √)
* rawmemchr(return)
* readahead_folio(return √)
* regcomp(causal √, return √)
* regerror(causal ×)
* res_init(return √)
* res_nmkquery(return √)
* res_nquery(causal ×, return √)
* rewind(return)
* rpmatch(return √)
* RSA_get_method(return)
* RSA_get_multi_prime_extra_count(return √)
* RSA_meth_new(arg.pre √, return √)
* RSA_PSS_PARAMS_free(causal √)
* RSA_PSS_PARAMS_new(causal √, return √)
* RSA_set0_factors(return √)
* s2i_ASN1_INTEGER(return √)
* setcontext(return ×)
* setmntent(causal ×)
* sigfillset(causal √, return √)
* sighold(return √)
* sigwait(return ×)
* SLIST_FIRST(return)
* SRP_create_verifier(return √)
* SSL_config(return √)
* SSL_CTX_dane_enable(return ×)
* SSL_CTX_dane_mtype_set(return ×)
* SSL_CTX_get_default_passwd_cb(return √)
* SSL_CTX_get_ex_data(return √)
* SSL_CTX_get_num_tickets(return)
* SSL_CTX_get_security_level(return)
* SSL_CTX_get_tlsext_status_type(return √)
* SSL_CTX_set_cipher_list(return √)
* SSL_CTX_set_ciphersuites(return √)
* SSL_CTX_set_ctlog_list_file(return √)
* SSL_CTX_set_max_early_data(return √)
* SSL_CTX_set_stateless_cookie_generate_cb(return)
* SSL_CTX_set_tlsext_status_cb(return √)
* SSL_CTX_set_tlsext_status_type(return ×)
* SSL_CTX_set1_groups(return √)
* SSL_dane_enable(causal √, return ×)
* SSL_get_psk_identity_hint(return √)
* SSL_get_psk_identity(return √)
* SSL_get0_dane_tlsa(return ×)
* SSL_has_pending(return √)
* SSL_peek_ex(return √)
* SSL_select_next_proto(arg.pre ×, return)
* SSL_set_async_callback(return √)
* SSL_verify_client_post_handshake(return √)
* SSL_want_read(return √)
* str_has_prefix(return √)
* strerror(return)
* strrchr(return √)
* SXNET_free(causal √)
* TAILQ_EMPTY(return √)
* towctrans(return)
* TS_REQ_new(causal √, return √)
* TS_RESP_dup(return √)
* UI_add_input_string(return ×)
* UI_get0_user_data(causal ×)
* UI_new_method(causal √, return √)
* UI_OpenSSL(return √)
* uselocale(return √)
* uuid_is_valid(return √)
* versionsort(return √)
* vm_map_ram(return √)
* wcsnlen(return ×)
* wcstok(return √)
* wcswidth(return)
* X509_ALGOR_set0(return √)
* X509_ATTRIBUTE_free(causal √)
* X509_build_chain(return √)
* X509_CERT_AUX_free(causal √)
* X509_get0_authority_issuer(return √)
* X509_get0_authority_key_id(return √)
* X509_load_cert_crl_file(return √)
* X509_LOOKUP_init(return √)
* X509_NAME_add_entry_by_NID(return √)
* X509_NAME_ENTRY_dup(return √)
* X509_REQ_free(causal ×)
* X509_REVOKED_set_serialNumber(return √)
* X509_STORE_get_ex_data(return √)
* X509_STORE_get_lookup_certs(return √)
* X509_STORE_get1_all_certs(return √)
* X509_STORE_set_check_policy(return)
* X509_VERIFY_PARAM_get0_email(return √)
* X509_VERIFY_PARAM_set_flags(return √)
* X509_VERIFY_PARAM_set_trust(return √)
* X509_VERIFY_PARAM_set1_ip(arg.pre √, return √)
* X509V3_get_d2i(return √)
